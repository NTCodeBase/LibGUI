/**
 * Loader generated by glad 2.0.0-beta on Tue Aug 14 02:01:07 2018
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 2
 *
 * APIs:
 *  - gl:core=4.1
 *
 * Options:
 *  - MX_GLOBAL = False
 *  - LOADER = True
 *  - ALIAS = False
 *  - HEADER_ONLY = True
 *  - DEBUG = True
 *  - MX = False
 *
 * Commandline:
 *    --api='gl:core=4.1' --extensions='GL_3DFX_multisample,GL_ARB_robustness' c --loader --header-only --debug
 *
 * Online:
 *    http://glad.sh/#api=gl%3Acore%3D4.1&extensions=GL_3DFX_multisample%2CGL_ARB_robustness&generator=c&options=LOADER%2CHEADER_ONLY%2CDEBUG
 *
 */

#ifndef GLAD_GL_H_
#define GLAD_GL_H_

#ifdef __gl_h_
    #error OpenGL header already included (API: gl), remove previous include!
#endif
#define __gl_h_ 1


#define GLAD_GL
#define GLAD_OPTION_GL_LOADER
#define GLAD_OPTION_GL_HEADER_ONLY
#define GLAD_OPTION_GL_DEBUG

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
  #define GLAD_PLATFORM_WIN32 1
#else
  #define GLAD_PLATFORM_WIN32 0
#endif


#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif


#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(const char *name, void *userptr);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_SHADER 0x8B31
#define GL_DITHER 0x0BD0
#define GL_RGB16UI 0x8D77
#define GL_QUERY_RESULT 0x8866
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_R16_SNORM 0x8F98
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT 0x1406
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_NOR 0x1508
#define GL_TIME_ELAPSED 0x88BF
#define GL_BUFFER_SIZE 0x8764
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_RGB16_SNORM 0x8F9A
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_RGB9_E5 0x8C3D
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_LOWER_LEFT 0x8CA1
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_CONSTANT_COLOR 0x8001
#define GL_RGBA32UI 0x8D70
#define GL_RG8UI 0x8238
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE0 0x84C0
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_DOUBLE 0x140A
#define GL_BLEND_EQUATION 0x8009
#define GL_BYTE 0x1400
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC2 0x8B57
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_ONE 1
#define GL_RG 0x8227
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_RGB565 0x8D62
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_MAX_SAMPLES 0x8D57
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_WAIT_FAILED 0x911D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_GREEN_INTEGER 0x8D95
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_TRIANGLE_STRIP 0x0005
#define GL_NOOP 0x1505
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_CONTEXT_FLAGS 0x821E
#define GL_FRONT_LEFT 0x0400
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_STENCIL_FUNC 0x0B92
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_STENCIL_INDEX8 0x8D48
#define GL_POINT_SIZE 0x0B11
#define GL_DECR 0x1E03
#define GL_BACK 0x0405
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_RGB12 0x8053
#define GL_INT 0x1404
#define GL_RGB10 0x8052
#define GL_RGB16 0x8054
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_CLIP_DISTANCE1 GL_CLIP_PLANE1
#define GL_BGRA 0x80E1
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_CLIP_DISTANCE2 GL_CLIP_PLANE2
#define GL_CLIP_DISTANCE5 GL_CLIP_PLANE5
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_MINOR_VERSION 0x821C
#define GL_CLIP_DISTANCE6 0x3006
#define GL_DOUBLEBUFFER 0x0C32
#define GL_FRONT_AND_BACK 0x0408
#define GL_R8 0x8229
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_POINT 0x1B00
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_RGB_INTEGER 0x8D98
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY GL_LINE_WIDTH_GRANULARITY
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_SRGB 0x8C40
#define GL_SYNC_FENCE 0x9116
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_RGB8_SNORM 0x8F96
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_TEXTURE_DEPTH 0x8071
#define GL_NO_ERROR 0
#define GL_TEXTURE_2D 0x0DE1
#define GL_VIEWPORT 0x0BA2
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_RGB8I 0x8D8F
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_COPY 0x1503
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_BLEND_SRC 0x0BE1
#define GL_DRAW_BUFFER9 0x882E
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_POINTS 0x0000
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_R32UI 0x8236
#define GL_RGBA8_SNORM 0x8F97
#define GL_FILL 0x1B02
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_SRC_COLOR 0x0300
#define GL_SAMPLER_BINDING 0x8919
#define GL_AND 0x1501
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_RGBA_INTEGER 0x8D99
#define GL_STATIC_COPY 0x88E6
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_EXTENSIONS 0x1F03
#define GL_BGR_INTEGER 0x8D9A
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_AND_REVERSE 0x1502
#define GL_UPPER_LEFT 0x8CA2
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_TYPE 0x8A37
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNALED 0x9118
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_MAP_WRITE_BIT 0x0002
#define GL_SMOOTH_POINT_SIZE_RANGE GL_POINT_SIZE_RANGE
#define GL_SAMPLE_MASK 0x8E51
#define GL_CCW 0x0901
#define GL_FRONT_RIGHT 0x0401
#define GL_TEXTURE_1D 0x0DE0
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_DEPTH_TEST 0x0B71
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_MULTISAMPLE 0x809D
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_STREAM_READ 0x88E1
#define GL_LINEAR 0x2601
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_FUNC_SUBTRACT 0x800A
#define GL_R32F 0x822E
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_STENCIL_INDEX 0x1901
#define GL_MAX_VARYING_COMPONENTS MAX_VARYING_FLOATS
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_HIGH_FLOAT 0x8DF2
#define GL_DEPTH_RANGE 0x0B70
#define GL_GREATER 0x0204
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_NEAREST 0x2600
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FALSE 0
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH 0x1801
#define GL_REPLACE 0x1E01
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_RG8I 0x8237
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_RGBA8I 0x8D8E
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_SRC1_ALPHA GL_SOURCE1_ALPHA
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_BACK_LEFT 0x0402
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_LINE_SMOOTH 0x0B20
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_STENCIL_REF 0x0B97
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_BLEND 0x0BE2
#define GL_MIRRORED_REPEAT 0x8370
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_UNSIGNED_SHORT 0x1403
#define GL_MIN 0x8007
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE 0x1702
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_MAX_CLIP_DISTANCES GL_MAX_CLIP_PLANES
#define GL_PATCHES 0x000E
#define GL_TIMESTAMP 0x8E28
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_DONT_CARE 0x1100
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_TEXTURE5 0x84C5
#define GL_SAMPLER_2D 0x8B5E
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_TEXTURE11 0x84CB
#define GL_SRGB_ALPHA 0x8C42
#define GL_DRAW_BUFFER12 0x8831
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_R8I 0x8231
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_SAMPLER_CUBE 0x8B60
#define GL_BOOL_VEC4 0x8B59
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_LEFT 0x0406
#define GL_AND_INVERTED 0x1504
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_SAMPLER_1D 0x8B5D
#define GL_RG16F 0x822F
#define GL_LINE 0x1B01
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_SAMPLES_PASSED 0x8914
#define GL_ARRAY_BUFFER 0x8892
#define GL_OR_REVERSE 0x150B
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_BLUE_INTEGER 0x8D96
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_RGB32I 0x8D83
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SYNC_FLAGS 0x9115
#define GL_RGB32F 0x8815
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_PROGRAM_POINT_SIZE GL_VERTEX_PROGRAM_POINT_SIZE
#define GL_RGBA16I 0x8D88
#define GL_RGBA16F 0x881A
#define GL_RED 0x1903
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_RG32F 0x8230
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_R32I 0x8235
#define GL_RG32I 0x823B
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_MAJOR_VERSION 0x821B
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_LINE_WIDTH 0x0B21
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_GREEN 0x1904
#define GL_INVALID_OPERATION 0x0502
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_FIXED_ONLY 0x891D
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_RED_INTEGER 0x8D94
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_POLYGON_MODE 0x0B40
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_SCISSOR_BOX 0x0C10
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_BUFFER_USAGE 0x8765
#define GL_PATCH_VERTICES 0x8E72
#define GL_CULL_FACE_MODE 0x0B45
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_NUM_EXTENSIONS 0x821D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_BOOL 0x8B56
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_ALPHA 0x1906
#define GL_SET 0x150F
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DST_COLOR 0x0306
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT 0x1405
#define GL_DEPTH_FUNC 0x0B74
#define GL_ALWAYS 0x0207
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_INVALID_ENUM 0x0500
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_COMPRESSED_RGB 0x84ED
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_DEPTH_COMPONENT 0x1902
#define GL_SRC1_COLOR 0x88F9
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_SHADER_TYPE 0x8B4F
#define GL_RG16_SNORM 0x8F99
#define GL_COMPARE_REF_TO_TEXTURE GL_COMPARE_R_TO_TEXTURE
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_TRUE 1
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_FLOAT_MAT4 0x8B5C
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_RG_INTEGER 0x8228
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_NONE 0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RG16UI 0x823A
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_LOW_FLOAT 0x8DF0
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_HALF_FLOAT 0x140B
#define GL_DRAW_BUFFER14 0x8833
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_COMPILE_STATUS 0x8B81
#define GL_STEREO 0x0C33
#define GL_ALREADY_SIGNALED 0x911A
#define GL_LINE_STRIP 0x0003
#define GL_STREAM_COPY 0x88E2
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_LINES 0x0001
#define GL_MEDIUM_INT 0x8DF4
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_COLOR 0x1800
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_DYNAMIC_READ 0x88E9
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_LOW_INT 0x8DF3
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_KEEP 0x1E00
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SYNC_STATUS 0x9114
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_FASTEST 0x1101
#define GL_SYNC_CONDITION 0x9113
#define GL_FRONT 0x0404
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_NAND 0x150E
#define GL_OR 0x1507
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE24 0x84D8
#define GL_R8_SNORM 0x8F94
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE28 0x84DC
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_LINE_LOOP 0x0002
#define GL_DRAW_BUFFER2 0x8827
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_READ_BUFFER 0x0C02
#define GL_QUERY_WAIT 0x8E13
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_BACK_RIGHT 0x0403
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_RIGHT 0x0407
#define GL_GEQUAL 0x0206
#define GL_R3_G3_B2 0x2A10
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_RGBA8UI 0x8D7C
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_R16F 0x822D
#define GL_TEXTURE1 0x84C1
#define GL_LEQUAL 0x0203
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_TEXTURE_WIDTH 0x1000
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_UNIFORM_SIZE 0x8A38
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_SAMPLES_3DFX 0x86B4
#define GL_FUNC_ADD 0x8006
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_BUFFER_ACCESS 0x88BB
#define GL_VERSION 0x1F02
#define GL_COMPRESSED_RG 0x8226
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_LINES_ADJACENCY 0x000A
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_VENDOR 0x1F00
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_BUFFER_MAPPED 0x88BC
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_STREAM_DRAW 0x88E0
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SIGNALED 0x9119
#define GL_FRAMEBUFFER 0x8D40
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_STENCIL_TEST 0x0B90
#define GL_R16 0x822A
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_SRGB8 0x8C41
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_INVERT 0x150A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_TRIANGLE_FAN 0x0006
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_RENDERBUFFER 0x8D41
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TRIANGLES 0x0004
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_RENDERER 0x1F01
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_CLIP_DISTANCE0 GL_CLIP_PLANE0
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_RGB16I 0x8D89
#define GL_R16UI 0x8234
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_RGB16F 0x881B
#define GL_SMOOTH_LINE_WIDTH_RANGE GL_LINE_WIDTH_RANGE
#define GL_CLIP_DISTANCE4 GL_CLIP_PLANE4
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_CLIP_DISTANCE7 0x3007
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC2 0x8B53
#define GL_STENCIL_FAIL 0x0B94
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_XOR 0x1506
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_DST_ALPHA 0x0304
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_LESS 0x0201
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLER_3D 0x8B5F
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_RGBA8 0x8058
#define GL_DRAW_BUFFER13 0x8832
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_DRAW_BUFFER15 0x8834
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_CONSTANT_ALPHA 0x8003
#define GL_RGB32UI 0x8D71
#define GL_RG8_SNORM 0x8F95
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_STATIC_READ 0x88E5
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_SCISSOR_TEST 0x0C11
#define GL_VALIDATE_STATUS 0x8B83
#define GL_MAP_READ_BIT 0x0001
#define GL_RG16 0x822C
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_STENCIL 0x1802
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SRC_ALPHA 0x0302
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_STENCIL_INDEX1 0x8D46
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_INCR_WRAP 0x8507
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_HIGH_INT 0x8DF5
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_DECR_WRAP 0x8508
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_DELETE_STATUS 0x8B80
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_SAMPLE_POSITION 0x8E50
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_RGBA12 0x805A
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE12 0x84CC
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_RGBA16 0x805B
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_R16I 0x8233
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_CLIP_DISTANCE3 GL_CLIP_PLANE3
#define GL_DEPTH_CLAMP 0x864F
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_RGB 0x1907
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_TEXTURE14 0x84CE
#define GL_CURRENT_QUERY 0x8865
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_RGB5_A1 0x8057
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_COPY_INVERTED 0x150C
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_MAX_VIEWPORTS 0x825B
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_RG8 0x822B
#define GL_RGB10_A2 0x8059
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_INVALID_VALUE 0x0501
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_ZERO 0
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_CLEAR 0x1500
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_READ_ONLY 0x88B8
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_SMOOTH_POINT_SIZE_GRANULARITY GL_POINT_SIZE_GRANULARITY
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TEXTURE_3D 0x806F
#define GL_FIXED 0x140C
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_RGB8 0x8051
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_NOTEQUAL 0x0205
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_INCR 0x1E02
#define GL_CULL_FACE 0x0B44
#define GL_COMPRESSED_RED 0x8225
#define GL_BGR 0x80E0
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_SAMPLE_SHADING 0x8C36
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_EQUAL 0x0202
#define GL_RG32UI 0x823C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_NEVER 0x0200
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_BLEND_DST 0x0BE0
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE10 0x84CA
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_SHADER_COMPILER 0x8DFA
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_RGBA 0x1908
#define GL_SHORT 0x1402
#define GL_BLUE 0x1905
#define GL_CW 0x0900
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_UNSIGNED_BYTE 0x1401
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_READ_WRITE 0x88BA
#define GL_NICEST 0x1102
#define GL_QUADS 0x0007
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_OBJECT_TYPE 0x9112
#define GL_ISOLINES 0x8E7A
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_R8UI 0x8232
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_LINK_STATUS 0x8B82
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_RGBA16UI 0x8D76
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_DRAW_BUFFER 0x0C01
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_STENCIL_INDEX4 0x8D47
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_MAX 0x8008
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_OR_INVERTED 0x150D
#define GL_RGB8UI 0x8D7D
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_REPEAT 0x2901
#define GL_SAMPLES 0x80A9
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_BLEND_DST_RGB 0x80C8
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_EQUIV 0x1509
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_BLEND_COLOR 0x8005
#define GL_DRAW_BUFFER8 0x882D
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_RG16I 0x8239
#define GL_STATIC_DRAW 0x88E4
#define GL_WRITE_ONLY 0x88B9
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_RGB10_A2UI 0x906F


#include <stddef.h>
#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(_WIN32) && !defined(__SCITECH_SNAP__)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif
typedef int64_t GLint64;
typedef uint64_t GLuint64;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef long GLintptrARB;
#else
typedef ptrdiff_t GLintptrARB;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef long GLsizeiptrARB;
#else
typedef ptrdiff_t GLsizeiptrARB;
#endif
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (GLAD_API_PTR *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (GLAD_API_PTR *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (GLAD_API_PTR *GLVULKANPROCNV)(void);


#define GL_VERSION_1_0 1
GLAD_API_CALL int GLAD_GL_VERSION_1_0;
#define GL_VERSION_1_1 1
GLAD_API_CALL int GLAD_GL_VERSION_1_1;
#define GL_VERSION_1_2 1
GLAD_API_CALL int GLAD_GL_VERSION_1_2;
#define GL_VERSION_1_3 1
GLAD_API_CALL int GLAD_GL_VERSION_1_3;
#define GL_VERSION_1_4 1
GLAD_API_CALL int GLAD_GL_VERSION_1_4;
#define GL_VERSION_1_5 1
GLAD_API_CALL int GLAD_GL_VERSION_1_5;
#define GL_VERSION_2_0 1
GLAD_API_CALL int GLAD_GL_VERSION_2_0;
#define GL_VERSION_2_1 1
GLAD_API_CALL int GLAD_GL_VERSION_2_1;
#define GL_VERSION_3_0 1
GLAD_API_CALL int GLAD_GL_VERSION_3_0;
#define GL_VERSION_3_1 1
GLAD_API_CALL int GLAD_GL_VERSION_3_1;
#define GL_VERSION_3_2 1
GLAD_API_CALL int GLAD_GL_VERSION_3_2;
#define GL_VERSION_3_3 1
GLAD_API_CALL int GLAD_GL_VERSION_3_3;
#define GL_VERSION_4_0 1
GLAD_API_CALL int GLAD_GL_VERSION_4_0;
#define GL_VERSION_4_1 1
GLAD_API_CALL int GLAD_GL_VERSION_4_1;
#define GL_3DFX_multisample 1
GLAD_API_CALL int GLAD_GL_3DFX_multisample;
#define GL_ARB_robustness 1
GLAD_API_CALL int GLAD_GL_ARB_robustness;


typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLint   x, GLint   y, GLsizei   width, GLint   border);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIPROC)(GLuint   index, GLuint   x, GLuint   y, GLuint   z);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKSEPARATEPROC)(GLenum   face, GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum   target, GLenum   attachment, GLenum   renderbuffertarget, GLuint   renderbuffer);
typedef void (GLAD_API_PTR *PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum   shadertype, GLsizei   count, const  GLuint  * indices);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VPROC)(GLenum   target, GLuint   index, GLdouble  * data);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERPROC)(GLuint   unit, GLuint   sampler);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat   width);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERI_VPROC)(GLenum   target, GLuint   index, GLint  * data);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLsizei  * size, GLenum  * type, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat   n, GLfloat   f);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint   index, GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLENABLEIPROC)(GLenum   target, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint   program, GLenum   shadertype, GLuint   index, GLsizei   bufsize, GLsizei  * length, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum   type);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVPROC)(GLenum   pname, GLuint   index, GLfloat  * val);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei   n, GLuint  * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DPROC)(GLuint   index, GLdouble   x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint   index, GLfloat   x);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum   sfactorRGB, GLenum   dfactorRGB, GLenum   sfactorAlpha, GLenum   dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGPROC)(GLfloat   value);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSPROC)(GLsizei   n, const  GLenum  * bufs);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SPROC)(GLuint   index, GLshort   x);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKIPROC)(GLuint   maskNumber, GLbitfield   mask);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat   size);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCPROC)(GLsync   sync, GLbitfield   flags, GLuint64   timeout);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum   target, GLenum   internalformat, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint   location, GLint   v0, GLint   v1, GLint   v2);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint   program, GLint   location, GLuint   v0);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint   buf, GLenum   modeRGB, GLenum   modeAlpha);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DPROC)(GLint   location, GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVPROC)(GLuint   index, const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIPROC)(GLuint   index, GLboolean   r, GLboolean   g, GLboolean   b, GLboolean   a);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFIPROC)(GLenum   buffer, GLint   drawbuffer, GLfloat   depth, GLint   stencil);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum   mode, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSPROC)(GLsizei   n, GLuint  * arrays);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint   sampler, GLenum   pname, GLint  * params);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATAINDEXPROC)(GLuint   program, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVPROC)(GLuint   index, GLenum   pname, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMPROC)(GLuint   pipeline, GLuint   program);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei   n, const  GLuint  * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum   mode, GLint   first, GLsizei   count);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIPROC)(GLint   location, GLuint   v0);
typedef void (GLAD_API_PTR *PFNGLGETNTEXIMAGEARBPROC)(GLenum   target, GLint   level, GLenum   format, GLenum   type, GLsizei   bufSize, void * img);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IPROC)(GLuint   index, GLint   x, GLint   y);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield   mask);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIPROC)(GLuint   program, GLenum   pname, GLint   value);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint   program, GLuint   uniformIndex, GLsizei   bufSize, GLsizei  * length, GLchar  * uniformName);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum   cap);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum   fail, GLenum   zfail, GLenum   zpass);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint   program, GLint   location, GLuint   v0, GLuint   v1);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBPROC)(GLuint   index, GLubyte   x, GLubyte   y, GLubyte   z, GLubyte   w);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEPROC)(GLenum   target, GLuint   index, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum   mode, GLenum   type, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum   target, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum   target, GLint   level, GLenum   format, GLenum   type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VPROC)(GLuint   id, GLenum   pname, GLint64  * params);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei   n, GLuint  * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDSHADERSPROC)(GLuint   program, GLsizei   maxCount, GLsizei  * count, GLuint  * shaders);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint   renderbuffer);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei   n, const  GLuint  * arrays);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   length, GLbitfield   access);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYPROC)(GLuint   array);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint   index);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTARRAYVPROC)(GLuint   first, GLsizei   count, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint   sampler, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMINDICESPROC)(GLuint   program, GLsizei   uniformCount, const  GLchar  *const* uniformNames, GLuint  * uniformIndices);
typedef GLboolean (GLAD_API_PTR *PFNGLISSHADERPROC)(GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint   index, const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVPROC)(GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint   program, GLsizei   uniformCount, const  GLuint  * uniformIndices, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIPROC)(GLuint   buf, GLenum   mode);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint   program, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DVPROC)(GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint   program, GLint   location, GLuint   v0, GLuint   v1, GLuint   v2);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint   program, GLint   location, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVPROC)(GLuint   program, GLint   location, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum   cap);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble   n, GLdouble   f);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVARBPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum   buf);
typedef void (GLAD_API_PTR *PFNGLENDQUERYINDEXEDPROC)(GLenum   target, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERUIVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLsizei   instancecount);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IPROC)(GLuint   program, GLint   location, GLint   v0);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERIPROC)(GLenum   pname, GLint   value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DPROC)(GLuint   program, GLint   location, GLdouble   v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FPROC)(GLuint   program, GLint   location, GLfloat   v0);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint   index, GLenum   pname, void ** pointer);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCPROC)(GLenum   condition, GLbitfield   flags);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint   id, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint   pipeline);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum   target, GLint   level, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLint   border, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum   face, GLenum   func, GLint   ref, GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLGENSAMPLERSPROC)(GLsizei   count, GLuint  * samplers);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORPROC)(GLenum   target, GLenum   clamp);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint   s);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei   n, GLuint  * textures);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum   mode, GLuint   id);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum   pname, GLdouble  * data);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum   target, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVPROC)(GLuint   index, const  GLbyte  * v);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCPROC)(GLsync   sync);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei   n, const  GLuint  * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint   location, GLint   v0, GLint   v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint   location, GLfloat   v0, GLfloat   v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DPROC)(GLint   location, GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DPROC)(GLuint   index, GLdouble   x);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVPROC)(GLuint   program, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint   index, GLint   size, GLenum   type, GLboolean   normalized, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum   target, GLenum   attachment, GLuint   texture, GLint   level, GLint   layer);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   length);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESPROC)(GLsizei   n, GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVARBPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLsizei   width, GLsizei   height, GLsizei   depth, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64I_VPROC)(GLenum   target, GLuint   index, GLint64  * data);
typedef void (GLAD_API_PTR *PFNGLDELETESAMPLERSPROC)(GLsizei   count, const  GLuint  * samplers);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLint   border);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint   srcX0, GLint   srcY0, GLint   srcX1, GLint   srcY1, GLint   dstX0, GLint   dstY0, GLint   dstX1, GLint   dstY1, GLbitfield   mask, GLenum   filter);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIPROC)(GLenum   target, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint   program, GLuint   colorNumber, GLuint   index, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLGETSHADERIVPROC)(GLuint   shader, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint   program, GLuint   color, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLSCISSORARRAYVPROC)(GLuint   first, GLsizei   count, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat   factor, GLfloat   units);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DVPROC)(GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLsizei   height, GLint   border, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DVPROC)(GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum   cap);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint   index, GLenum   pname, GLint  * params);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERPROC)(GLenum   target, GLenum   access);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLint   border, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCPROC)(GLsync   sync);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLint   zoffset, GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint   program, GLuint   uniformBlockIndex, GLsizei   bufSize, GLsizei  * length, GLchar  * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint   index, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSPROC)(GLenum   mode, const  GLsizei  * count, GLenum   type, const void *const* indices, GLsizei   drawcount);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum   face, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint   program, GLuint   uniformBlockIndex, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMBINARYPROC)(GLuint   program, GLsizei   bufSize, GLsizei  * length, GLenum  * binaryFormat, void * binary);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINFOLOGPROC)(GLuint   program, GLsizei   bufSize, GLsizei  * length, GLchar  * infoLog);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum   target, GLuint   id);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYPROC)(GLuint   array);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei   n, const  GLuint  * buffers);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum   mode, const  GLsizei  * count, GLenum   type, const void *const* indices, GLsizei   drawcount, const  GLint  * basevertex);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLsizei   width, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDPROC)(GLuint   index, GLdouble   n, GLdouble   f);
typedef void (GLAD_API_PTR *PFNGLDELETESHADERPROC)(GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIPROC)(GLint   location, GLuint   v0, GLuint   v1);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IPROC)(GLuint   index, GLint   x, GLint   y, GLint   z);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble   depth);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVPROC)(GLuint   index, const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum   target, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum   target, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint   program, GLenum   shadertype, GLuint   index, GLenum   pname, GLint  * values);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint   shader, GLsizei   bufSize, GLsizei  * length, GLchar  * source);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERPROC)(GLenum   target, GLenum   internalformat, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANI_VPROC)(GLenum   target, GLuint   index, GLboolean  * data);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei   n, GLuint  * pipelines);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum   target, GLuint   texture);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUIVARBPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint   pipeline, GLsizei   bufSize, GLsizei  * length, GLchar  * infoLog);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum   name);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint   program, GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLENDQUERYPROC)(GLenum   target);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYVPROC)(GLuint   first, GLsizei   count, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIPROC)(GLuint   index, GLuint   x, GLuint   y);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei   n, const  GLuint  * textures);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEPROC)(GLenum   face, GLenum   sfail, GLenum   dpfail, GLenum   dppass);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESPROC)(GLsizei   n, const  GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint   index, GLfloat   x, GLfloat   y, GLfloat   z, GLfloat   w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum   target, GLenum   pname, GLint64  * params);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SPROC)(GLuint   index, GLshort   x, GLshort   y, GLshort   z, GLshort   w);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLint   basevertex);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat   value, GLboolean   invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIPROC)(GLuint   sampler, GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFPROC)(GLuint   sampler, GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint   location, GLfloat   v0);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint   index, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DPROC)(GLint   location, GLdouble   x);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum   target, GLint   level, void * img);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint   location, GLint   v0);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLint  * size, GLenum  * type, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint   program, GLint   location, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum   opcode);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIPROC)(GLint   location, GLuint   v0, GLuint   v1, GLuint   v2, GLuint   v3);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum   target, GLuint   framebuffer);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IPROC)(GLuint   program, GLint   location, GLint   v0, GLint   v1, GLint   v2, GLint   v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FPROC)(GLuint   program, GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2, GLfloat   v3);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFPROC)(GLuint   index, GLfloat   x, GLfloat   y, GLfloat   w, GLfloat   h);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DPROC)(GLuint   program, GLint   location, GLdouble   v0, GLdouble   v1, GLdouble   v2, GLdouble   v3);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGIPROC)(GLenum   name, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDPROC)(GLuint   index, GLint   left, GLint   bottom, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum   mode, GLuint   id, GLuint   stream);
typedef void (GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint   program, GLuint   shader);
typedef void (GLAD_API_PTR *PFNGLQUERYCOUNTERPROC)(GLuint   id, GLenum   target);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLSHADERBINARYPROC)(GLsizei   count, const  GLuint  * shaders, GLenum   binaryformat, const void * binary, GLsizei   length);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint   location, GLsizei   count, const  GLint  * value);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVPROC)(GLenum   type, GLsizei   count, const  GLchar  *const* strings);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVPROC)(GLuint   id, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum   src);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVPROC)(GLenum   target, GLenum   pname, const  GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum   mode, GLint   first, GLsizei   count, GLsizei   instancecount);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum   target);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIVPROC)(GLuint   sampler, GLenum   pname, const  GLint  * param);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint   index, GLfloat   x, GLfloat   y, GLfloat   z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIPROC)(GLenum   pname, GLint   param);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint   sampler, GLenum   pname, const  GLuint  * param);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum   target);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum   pname, GLfloat   param);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SPROC)(GLuint   index, GLshort   x, GLshort   y, GLshort   z);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum   target, GLuint   renderbuffer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTAGEIVPROC)(GLuint   program, GLenum   shadertype, GLenum   pname, GLint  * values);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPROC)(GLuint   program);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2DVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint   id);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint   location, GLint   v0, GLint   v1, GLint   v2, GLint   v3);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum   texture);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint   index);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPIPELINEPROC)(GLuint   pipeline);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint   index, const  GLfloat  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DPROC)(GLint   location, GLdouble   x, GLdouble   y, GLdouble   z, GLdouble   w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2, GLfloat   v3);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint   index, GLint   size, GLenum   type, GLsizei   stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum   mode, GLsizei   count, GLenum   type, const void * indices, GLsizei   instancecount, GLint   basevertex);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSARBPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, GLsizei   bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DPROC)(GLuint   index, GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum   func, GLint   ref, GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint   program, GLuint   uniformBlockIndex, GLuint   uniformBlockBinding);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IPROC)(GLuint   program, GLint   location, GLint   v0, GLint   v1, GLint   v2);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESPROC)(GLuint   pipeline, GLbitfield   stages, GLuint   program);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FPROC)(GLuint   program, GLint   location, GLfloat   v0, GLfloat   v1, GLfloat   v2);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSARBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DPROC)(GLuint   program, GLint   location, GLdouble   v0, GLdouble   v1, GLdouble   v2);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint   pipeline, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYINDEXEDIVPROC)(GLenum   target, GLuint   index, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLGETSHADERINFOLOGPROC)(GLuint   shader, GLsizei   bufSize, GLsizei  * length, GLchar  * infoLog);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IPROC)(GLuint   index, GLint   x, GLint   y, GLint   z, GLint   w);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLDVPROC)(GLuint   index, GLenum   pname, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum   modeRGB, GLenum   modeAlpha);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIPROC)(GLuint   index, GLuint   x);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei   n, GLuint  * buffers);
typedef GLuint (GLAD_API_PTR *PFNGLGETSUBROUTINEINDEXPROC)(GLuint   program, GLenum   shadertype, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum   sfactor, GLenum   dfactor);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLint   border, GLenum   format, GLenum   type, const void * pixels);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint   framebuffer);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint   index);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMDVARBPROC)(GLuint   program, GLint   location, GLsizei   bufSize, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VPROC)(GLenum   pname, GLint64  * data);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint   pipeline);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum   pname, GLboolean  * data);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVPROC)(GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat   red, GLfloat   green, GLfloat   blue, GLfloat   alpha);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERIVPROC)(GLenum   buffer, GLint   drawbuffer, const  GLint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DPROC)(GLuint   index, GLdouble   x, GLdouble   y, GLdouble   z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIPROC)(GLint   location, GLuint   v0, GLuint   v1, GLuint   v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVPROC)(GLuint   index, const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint   program, GLenum   shadertype, GLuint   index, GLsizei   bufsize, GLsizei  * length, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint   sampler, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEPROC)(GLenum   target, GLuint   index, GLuint   buffer, GLintptr   offset, GLsizeiptr   size);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMDVPROC)(GLuint   program, GLint   location, GLdouble  * params);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat   d);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei   n, GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint   index, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint   index, const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean   red, GLboolean   green, GLboolean   blue, GLboolean   alpha);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, GLsizei   bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBINARYPROC)(GLuint   program, GLenum   binaryFormat, const void * binary, GLsizei   length);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVPROC)(GLuint   index, const  GLbyte  * v);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum   target, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIPROC)(GLuint   buf, GLenum   src, GLenum   dst);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCPROC)(GLsync   sync, GLbitfield   flags, GLuint64   timeout);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIPROC)(GLuint   index, GLuint   x, GLuint   y, GLuint   z, GLuint   w);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VPROC)(GLenum   target, GLuint   index, GLfloat  * data);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum   func);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVPROC)(GLenum   target, GLenum   pname, const  GLint  * params);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum   mode);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint   program, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   yoffset, GLsizei   width, GLsizei   height, GLenum   format, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVPROC)(GLuint   index, const  GLushort  * v);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum   shadertype, GLint   location, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLboolean   fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum   primitiveMode);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVPROC)(GLuint   index, const  GLint  * v);
typedef GLboolean (GLAD_API_PTR *PFNGLISSAMPLERPROC)(GLuint   sampler);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint   index, GLuint   divisor);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum   target, GLint   level, GLenum   internalformat, GLsizei   width, GLint   border, GLsizei   imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei   n, const  GLuint  * ids);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLint   x, GLint   y, GLsizei   width);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum   mode, GLuint   start, GLuint   end, GLsizei   count, GLenum   type, const void * indices, GLint   basevertex);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum   target);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint   program, GLuint   index, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint   program, GLsizei   count, const  GLchar  *const* varyings, GLenum   bufferMode);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSPROC)(GLenum   mode, GLuint   start, GLuint   end, GLsizei   count, GLenum   type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVPROC)(GLuint   id, GLenum   pname, GLuint  * params);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint   sampler, GLenum   pname, const  GLint  * param);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum   target, GLintptr   offset, GLsizeiptr   size, const void * data);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum   target, GLenum   attachment, GLuint   texture, GLint   level);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint   buf, GLenum   srcRGB, GLenum   dstRGB, GLenum   srcAlpha, GLenum   dstAlpha);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSPROC)(GLenum   mode, const  GLint  * first, const  GLsizei  * count, GLsizei   drawcount);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum   shadertype, GLenum   precisiontype, GLint  * range, GLint  * precision);
typedef void (GLAD_API_PTR *PFNGLDISABLEIPROC)(GLenum   target, GLuint   index);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint   shader, GLsizei   count, const  GLchar  *const* string, const  GLint  * length);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYINDEXEDPROC)(GLenum   target, GLuint   index, GLuint   id);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVPROC)(GLsync   sync, GLenum   pname, GLsizei   bufSize, GLsizei  * length, GLint  * values);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERFVPROC)(GLenum   pname, const  GLfloat  * values);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IPROC)(GLuint   program, GLint   location, GLint   v0, GLint   v1);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYPROC)(GLenum   target, GLuint   id);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum   target, GLuint   buffer);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DPROC)(GLuint   program, GLint   location, GLdouble   v0, GLdouble   v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FPROC)(GLuint   program, GLint   location, GLfloat   v0, GLfloat   v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint   location, GLsizei   count, GLboolean   transpose, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum   target, GLsizeiptr   size, const void * data, GLenum   usage);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVPROC)(GLenum   target, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIPROC)(GLuint   index, GLenum   type, GLboolean   normalized, GLuint   value);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum   pname, GLfloat  * data);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum   target, GLint   level, GLint   xoffset, GLsizei   width, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint   x, GLint   y, GLsizei   width, GLsizei   height, GLenum   format, GLenum   type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum   target, GLint   level, GLenum   pname, GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IPROC)(GLuint   index, GLint   x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIVPROC)(GLuint   index, GLenum   type, GLboolean   normalized, const  GLuint  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum   target, GLint   lod, GLsizei   bufSize, void * img);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum   pname, GLint  * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum   target, GLenum   pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint   program, GLint   location, GLsizei   count, GLboolean   transpose, const  GLdouble  * value);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum   target, GLenum   attachment, GLenum   textarget, GLuint   texture, GLint   level, GLint   zoffset);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYPROC)(GLuint   id);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum   target, GLenum   attachment, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint   program, GLint   location, GLuint   v0, GLuint   v1, GLuint   v2, GLuint   v3);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVPROC)(GLuint   index, const  GLshort  * v);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum   target, GLint   level, GLint   internalformat, GLsizei   width, GLsizei   height, GLint   border, GLenum   format, GLenum   type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint   mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFVPROC)(GLuint   sampler, GLenum   pname, const  GLfloat  * param);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint   texture);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint   index, const  GLubyte  * v);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum   target, GLenum   pname, const  GLfloat  * params);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDVPROC)(GLuint   index, const  GLint  * v);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DVPROC)(GLint   location, GLsizei   count, const  GLdouble  * value);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONPROC)(GLuint   program, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLfloat  * value);
typedef GLint (GLAD_API_PTR *PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint   program, GLenum   shadertype, const  GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum   target, GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint   sampler, GLenum   pname, GLint  * params);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum   readTarget, GLenum   writeTarget, GLintptr   readOffset, GLintptr   writeOffset, GLsizeiptr   size);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint   index, const  GLuint  * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DPROC)(GLuint   index, GLdouble   x, GLdouble   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint   index, GLfloat   x, GLfloat   y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVPROC)(GLuint   index, const  GLdouble  * v);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VPROC)(GLuint   id, GLenum   pname, GLuint64  * params);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean   flag);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SPROC)(GLuint   index, GLshort   x, GLshort   y);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum   target, GLsizei   samples, GLenum   internalformat, GLsizei   width, GLsizei   height, GLsizei   depth, GLboolean   fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint   program, GLint   location, GLsizei   count, const  GLfloat  * value);
typedef GLuint (GLAD_API_PTR *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint   program, const  GLchar  * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint   location, GLsizei   count, const  GLfloat  * value);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint   program, GLuint   index, GLsizei   bufSize, GLsizei  * length, GLint  * size, GLenum  * type, GLchar  * name);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum   mode);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei   n, const  GLuint  * pipelines);

GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D;
#define glCopyTexImage1D glad_debug_glCopyTexImage1D
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIPROC glad_debug_glVertexAttribI3ui;
#define glVertexAttribI3ui glad_debug_glVertexAttribI3ui
GLAD_API_CALL PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
GLAD_API_CALL PFNGLSTENCILMASKSEPARATEPROC glad_debug_glStencilMaskSeparate;
#define glStencilMaskSeparate glad_debug_glStencilMaskSeparate
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_debug_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv glad_debug_glProgramUniformMatrix4fv
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_debug_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer glad_debug_glFramebufferRenderbuffer
GLAD_API_CALL PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
GLAD_API_CALL PFNGLUNIFORMSUBROUTINESUIVPROC glad_debug_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv glad_debug_glUniformSubroutinesuiv
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D glad_debug_glCompressedTexSubImage3D
GLAD_API_CALL PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
GLAD_API_CALL PFNGLGETDOUBLEI_VPROC glad_debug_glGetDoublei_v;
#define glGetDoublei_v glad_debug_glGetDoublei_v
GLAD_API_CALL PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
GLAD_API_CALL PFNGLVERTEXATTRIB1SVPROC glad_debug_glVertexAttrib1sv;
#define glVertexAttrib1sv glad_debug_glVertexAttrib1sv
GLAD_API_CALL PFNGLBINDSAMPLERPROC glad_glBindSampler;
GLAD_API_CALL PFNGLBINDSAMPLERPROC glad_debug_glBindSampler;
#define glBindSampler glad_debug_glBindSampler
GLAD_API_CALL PFNGLLINEWIDTHPROC glad_glLineWidth;
GLAD_API_CALL PFNGLLINEWIDTHPROC glad_debug_glLineWidth;
#define glLineWidth glad_debug_glLineWidth
GLAD_API_CALL PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
GLAD_API_CALL PFNGLGETINTEGERI_VPROC glad_debug_glGetIntegeri_v;
#define glGetIntegeri_v glad_debug_glGetIntegeri_v
GLAD_API_CALL PFNGLCOMPILESHADERPROC glad_glCompileShader;
GLAD_API_CALL PFNGLCOMPILESHADERPROC glad_debug_glCompileShader;
#define glCompileShader glad_debug_glCompileShader
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_debug_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying glad_debug_glGetTransformFeedbackVarying
GLAD_API_CALL PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
GLAD_API_CALL PFNGLDEPTHRANGEFPROC glad_debug_glDepthRangef;
#define glDepthRangef glad_debug_glDepthRangef
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC glad_debug_glVertexAttribIPointer;
#define glVertexAttribIPointer glad_debug_glVertexAttribIPointer
GLAD_API_CALL PFNGLENABLEIPROC glad_glEnablei;
GLAD_API_CALL PFNGLENABLEIPROC glad_debug_glEnablei;
#define glEnablei glad_debug_glEnablei
GLAD_API_CALL PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
GLAD_API_CALL PFNGLGETACTIVESUBROUTINENAMEPROC glad_debug_glGetActiveSubroutineName;
#define glGetActiveSubroutineName glad_debug_glGetActiveSubroutineName
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui;
#define glVertexAttribP4ui glad_debug_glVertexAttribP4ui
GLAD_API_CALL PFNGLCREATESHADERPROC glad_glCreateShader;
GLAD_API_CALL PFNGLCREATESHADERPROC glad_debug_glCreateShader;
#define glCreateShader glad_debug_glCreateShader
GLAD_API_CALL PFNGLISBUFFERPROC glad_glIsBuffer;
GLAD_API_CALL PFNGLISBUFFERPROC glad_debug_glIsBuffer;
#define glIsBuffer glad_debug_glIsBuffer
GLAD_API_CALL PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
GLAD_API_CALL PFNGLGETMULTISAMPLEFVPROC glad_debug_glGetMultisamplefv;
#define glGetMultisamplefv glad_debug_glGetMultisamplefv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_debug_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv glad_debug_glProgramUniformMatrix2dv
GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC glad_debug_glGenRenderbuffers;
#define glGenRenderbuffers glad_debug_glGenRenderbuffers
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D;
#define glCopyTexSubImage2D glad_debug_glCopyTexSubImage2D
GLAD_API_CALL PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
GLAD_API_CALL PFNGLVERTEXATTRIB1DPROC glad_debug_glVertexAttrib1d;
#define glVertexAttrib1d glad_debug_glVertexAttrib1d
GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC glad_debug_glVertexAttrib1f;
#define glVertexAttrib1f glad_debug_glVertexAttrib1f
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate;
#define glBlendFuncSeparate glad_debug_glBlendFuncSeparate
GLAD_API_CALL PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;
GLAD_API_CALL PFNGLMINSAMPLESHADINGPROC glad_debug_glMinSampleShading;
#define glMinSampleShading glad_debug_glMinSampleShading
GLAD_API_CALL PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
GLAD_API_CALL PFNGLDRAWBUFFERSPROC glad_debug_glDrawBuffers;
#define glDrawBuffers glad_debug_glDrawBuffers
GLAD_API_CALL PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
GLAD_API_CALL PFNGLVERTEXATTRIB1SPROC glad_debug_glVertexAttrib1s;
#define glVertexAttrib1s glad_debug_glVertexAttrib1s
GLAD_API_CALL PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
GLAD_API_CALL PFNGLSAMPLEMASKIPROC glad_debug_glSampleMaski;
#define glSampleMaski glad_debug_glSampleMaski
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC glad_debug_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv glad_debug_glUniformMatrix3x2fv
GLAD_API_CALL PFNGLPOINTSIZEPROC glad_glPointSize;
GLAD_API_CALL PFNGLPOINTSIZEPROC glad_debug_glPointSize;
#define glPointSize glad_debug_glPointSize
GLAD_API_CALL PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
GLAD_API_CALL PFNGLVERTEXATTRIB2DVPROC glad_debug_glVertexAttrib2dv;
#define glVertexAttrib2dv glad_debug_glVertexAttrib2dv
GLAD_API_CALL PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
GLAD_API_CALL PFNGLDELETEPROGRAMPROC glad_debug_glDeleteProgram;
#define glDeleteProgram glad_debug_glDeleteProgram
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVPROC glad_debug_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv glad_debug_glVertexAttrib4Nuiv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC glad_debug_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv glad_debug_glUniformMatrix3x4fv
GLAD_API_CALL PFNGLWAITSYNCPROC glad_glWaitSync;
GLAD_API_CALL PFNGLWAITSYNCPROC glad_debug_glWaitSync;
#define glWaitSync glad_debug_glWaitSync
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC glad_debug_glRenderbufferStorage;
#define glRenderbufferStorage glad_debug_glRenderbufferStorage
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC glad_debug_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv glad_debug_glUniformMatrix4x3fv
GLAD_API_CALL PFNGLUNIFORM3IPROC glad_glUniform3i;
GLAD_API_CALL PFNGLUNIFORM3IPROC glad_debug_glUniform3i;
#define glUniform3i glad_debug_glUniform3i
GLAD_API_CALL PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
GLAD_API_CALL PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv;
#define glClearBufferfv glad_debug_glClearBufferfv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC glad_debug_glProgramUniform1ui;
#define glProgramUniform1ui glad_debug_glProgramUniform1ui
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC glad_debug_glBlendEquationSeparatei;
#define glBlendEquationSeparatei glad_debug_glBlendEquationSeparatei
GLAD_API_CALL PFNGLUNIFORM3DPROC glad_glUniform3d;
GLAD_API_CALL PFNGLUNIFORM3DPROC glad_debug_glUniform3d;
#define glUniform3d glad_debug_glUniform3d
GLAD_API_CALL PFNGLUNIFORM3FPROC glad_glUniform3f;
GLAD_API_CALL PFNGLUNIFORM3FPROC glad_debug_glUniform3f;
#define glUniform3f glad_debug_glUniform3f
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVPROC glad_debug_glVertexAttrib4ubv;
#define glVertexAttrib4ubv glad_debug_glVertexAttrib4ubv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC glad_debug_glGetBufferParameteriv;
#define glGetBufferParameteriv glad_debug_glGetBufferParameteriv
GLAD_API_CALL PFNGLCOLORMASKIPROC glad_glColorMaski;
GLAD_API_CALL PFNGLCOLORMASKIPROC glad_debug_glColorMaski;
#define glColorMaski glad_debug_glColorMaski
GLAD_API_CALL PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
GLAD_API_CALL PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi;
#define glClearBufferfi glad_debug_glClearBufferfi
GLAD_API_CALL PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
GLAD_API_CALL PFNGLDRAWARRAYSINDIRECTPROC glad_debug_glDrawArraysIndirect;
#define glDrawArraysIndirect glad_debug_glDrawArraysIndirect
GLAD_API_CALL PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
GLAD_API_CALL PFNGLGENVERTEXARRAYSPROC glad_debug_glGenVertexArrays;
#define glGenVertexArrays glad_debug_glGenVertexArrays
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_debug_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv glad_debug_glProgramUniformMatrix3x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_debug_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv glad_debug_glProgramUniformMatrix3x2fv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC glad_debug_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv glad_debug_glGetSamplerParameterIiv
GLAD_API_CALL PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
GLAD_API_CALL PFNGLGETFRAGDATAINDEXPROC glad_debug_glGetFragDataIndex;
#define glGetFragDataIndex glad_debug_glGetFragDataIndex
GLAD_API_CALL PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
GLAD_API_CALL PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d;
#define glVertexAttribL4d glad_debug_glVertexAttribL4d
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVPROC glad_debug_glGetVertexAttribdv;
#define glGetVertexAttribdv glad_debug_glGetVertexAttribdv
GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram;
#define glActiveShaderProgram glad_debug_glActiveShaderProgram
GLAD_API_CALL PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3DVPROC glad_debug_glUniformMatrix3dv;
#define glUniformMatrix3dv glad_debug_glUniformMatrix3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_debug_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv glad_debug_glProgramUniformMatrix3x4dv
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC glad_debug_glResumeTransformFeedback;
#define glResumeTransformFeedback glad_debug_glResumeTransformFeedback
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_debug_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv glad_debug_glProgramUniformMatrix4x3fv
GLAD_API_CALL PFNGLGETQUERYIVPROC glad_glGetQueryiv;
GLAD_API_CALL PFNGLGETQUERYIVPROC glad_debug_glGetQueryiv;
#define glGetQueryiv glad_debug_glGetQueryiv
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC glad_debug_glDeleteFramebuffers;
#define glDeleteFramebuffers glad_debug_glDeleteFramebuffers
GLAD_API_CALL PFNGLDRAWARRAYSPROC glad_glDrawArrays;
GLAD_API_CALL PFNGLDRAWARRAYSPROC glad_debug_glDrawArrays;
#define glDrawArrays glad_debug_glDrawArrays
GLAD_API_CALL PFNGLUNIFORM1UIPROC glad_glUniform1ui;
GLAD_API_CALL PFNGLUNIFORM1UIPROC glad_debug_glUniform1ui;
#define glUniform1ui glad_debug_glUniform1ui
GLAD_API_CALL PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB;
GLAD_API_CALL PFNGLGETNTEXIMAGEARBPROC glad_debug_glGetnTexImageARB;
#define glGetnTexImageARB glad_debug_glGetnTexImageARB
GLAD_API_CALL PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
GLAD_API_CALL PFNGLVERTEXATTRIBI2IPROC glad_debug_glVertexAttribI2i;
#define glVertexAttribI2i glad_debug_glVertexAttribI2i
GLAD_API_CALL PFNGLCLEARPROC glad_glClear;
GLAD_API_CALL PFNGLCLEARPROC glad_debug_glClear;
#define glClear glad_debug_glClear
GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC glad_debug_glProgramParameteri;
#define glProgramParameteri glad_debug_glProgramParameteri
GLAD_API_CALL PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMNAMEPROC glad_debug_glGetActiveUniformName;
#define glGetActiveUniformName glad_debug_glGetActiveUniformName
GLAD_API_CALL PFNGLISENABLEDPROC glad_glIsEnabled;
GLAD_API_CALL PFNGLISENABLEDPROC glad_debug_glIsEnabled;
#define glIsEnabled glad_debug_glIsEnabled
GLAD_API_CALL PFNGLSTENCILOPPROC glad_glStencilOp;
GLAD_API_CALL PFNGLSTENCILOPPROC glad_debug_glStencilOp;
#define glStencilOp glad_debug_glStencilOp
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC glad_debug_glFramebufferTexture2D;
#define glFramebufferTexture2D glad_debug_glFramebufferTexture2D
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC glad_debug_glProgramUniform2ui;
#define glProgramUniform2ui glad_debug_glProgramUniform2ui
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBPROC glad_debug_glVertexAttrib4Nub;
#define glVertexAttrib4Nub glad_debug_glVertexAttrib4Nub
GLAD_API_CALL PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
GLAD_API_CALL PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase;
#define glBindBufferBase glad_debug_glBindBufferBase
GLAD_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
GLAD_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC glad_debug_glDrawElementsIndirect;
#define glDrawElementsIndirect glad_debug_glDrawElementsIndirect
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC glad_debug_glTexParameteriv;
#define glTexParameteriv glad_debug_glTexParameteriv
GLAD_API_CALL PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
GLAD_API_CALL PFNGLGETTEXIMAGEPROC glad_debug_glGetTexImage;
#define glGetTexImage glad_debug_glGetTexImage
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VPROC glad_debug_glGetQueryObjecti64v;
#define glGetQueryObjecti64v glad_debug_glGetQueryObjecti64v
GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC glad_debug_glGenFramebuffers;
#define glGenFramebuffers glad_debug_glGenFramebuffers
GLAD_API_CALL PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
GLAD_API_CALL PFNGLGETATTACHEDSHADERSPROC glad_debug_glGetAttachedShaders;
#define glGetAttachedShaders glad_debug_glGetAttachedShaders
GLAD_API_CALL PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
GLAD_API_CALL PFNGLISRENDERBUFFERPROC glad_debug_glIsRenderbuffer;
#define glIsRenderbuffer glad_debug_glIsRenderbuffer
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSPROC glad_debug_glDeleteVertexArrays;
#define glDeleteVertexArrays glad_debug_glDeleteVertexArrays
GLAD_API_CALL PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
GLAD_API_CALL PFNGLMAPBUFFERRANGEPROC glad_debug_glMapBufferRange;
#define glMapBufferRange glad_debug_glMapBufferRange
GLAD_API_CALL PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
GLAD_API_CALL PFNGLISVERTEXARRAYPROC glad_debug_glIsVertexArray;
#define glIsVertexArray glad_debug_glIsVertexArray
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_debug_glDisableVertexAttribArray;
#define glDisableVertexAttribArray glad_debug_glDisableVertexAttribArray
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC glad_debug_glProgramUniform2iv;
#define glProgramUniform2iv glad_debug_glProgramUniform2iv
GLAD_API_CALL PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
GLAD_API_CALL PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv;
#define glViewportArrayv glad_debug_glViewportArrayv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC glad_debug_glGetSamplerParameterfv;
#define glGetSamplerParameterfv glad_debug_glGetSamplerParameterfv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_debug_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv glad_debug_glProgramUniformMatrix4x2dv
GLAD_API_CALL PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
GLAD_API_CALL PFNGLGETUNIFORMINDICESPROC glad_debug_glGetUniformIndices;
#define glGetUniformIndices glad_debug_glGetUniformIndices
GLAD_API_CALL PFNGLISSHADERPROC glad_glIsShader;
GLAD_API_CALL PFNGLISSHADERPROC glad_debug_glIsShader;
#define glIsShader glad_debug_glIsShader
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVPROC glad_debug_glVertexAttribI4ubv;
#define glVertexAttribI4ubv glad_debug_glVertexAttribI4ubv
GLAD_API_CALL PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
GLAD_API_CALL PFNGLPOINTPARAMETERIVPROC glad_debug_glPointParameteriv;
#define glPointParameteriv glad_debug_glPointParameteriv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_debug_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv glad_debug_glProgramUniformMatrix2x3fv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC glad_debug_glGetActiveUniformsiv;
#define glGetActiveUniformsiv glad_debug_glGetActiveUniformsiv
GLAD_API_CALL PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;
GLAD_API_CALL PFNGLBLENDEQUATIONIPROC glad_debug_glBlendEquationi;
#define glBlendEquationi glad_debug_glBlendEquationi
GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC glad_debug_glGetAttribLocation;
#define glGetAttribLocation glad_debug_glGetAttribLocation
GLAD_API_CALL PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
GLAD_API_CALL PFNGLVERTEXATTRIB4DVPROC glad_debug_glVertexAttrib4dv;
#define glVertexAttrib4dv glad_debug_glVertexAttrib4dv
GLAD_API_CALL PFNGLUNIFORM2DVPROC glad_glUniform2dv;
GLAD_API_CALL PFNGLUNIFORM2DVPROC glad_debug_glUniform2dv;
#define glUniform2dv glad_debug_glUniform2dv
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui;
#define glVertexAttribP3ui glad_debug_glVertexAttribP3ui
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC glad_debug_glFramebufferTexture1D;
#define glFramebufferTexture1D glad_debug_glFramebufferTexture1D
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC glad_debug_glProgramUniform3ui;
#define glProgramUniform3ui glad_debug_glProgramUniform3ui
GLAD_API_CALL PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
GLAD_API_CALL PFNGLGETUNIFORMFVPROC glad_debug_glGetUniformfv;
#define glGetUniformfv glad_debug_glGetUniformfv
GLAD_API_CALL PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
GLAD_API_CALL PFNGLGETUNIFORMUIVPROC glad_debug_glGetUniformuiv;
#define glGetUniformuiv glad_debug_glGetUniformuiv
GLAD_API_CALL PFNGLENABLEPROC glad_glEnable;
GLAD_API_CALL PFNGLENABLEPROC glad_debug_glEnable;
#define glEnable glad_debug_glEnable
GLAD_API_CALL PFNGLDEPTHRANGEPROC glad_glDepthRange;
GLAD_API_CALL PFNGLDEPTHRANGEPROC glad_debug_glDepthRange;
#define glDepthRange glad_debug_glDepthRange
GLAD_API_CALL PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB;
GLAD_API_CALL PFNGLGETNUNIFORMFVARBPROC glad_debug_glGetnUniformfvARB;
#define glGetnUniformfvARB glad_debug_glGetnUniformfvARB
GLAD_API_CALL PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
GLAD_API_CALL PFNGLDRAWBUFFERPROC glad_debug_glDrawBuffer;
#define glDrawBuffer glad_debug_glDrawBuffer
GLAD_API_CALL PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
GLAD_API_CALL PFNGLENDQUERYINDEXEDPROC glad_debug_glEndQueryIndexed;
#define glEndQueryIndexed glad_debug_glEndQueryIndexed
GLAD_API_CALL PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
GLAD_API_CALL PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv;
#define glClearBufferuiv glad_debug_glClearBufferuiv
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC glad_debug_glDrawElementsInstanced;
#define glDrawElementsInstanced glad_debug_glDrawElementsInstanced
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC glad_debug_glProgramUniform1i;
#define glProgramUniform1i glad_debug_glProgramUniform1i
GLAD_API_CALL PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
GLAD_API_CALL PFNGLPATCHPARAMETERIPROC glad_debug_glPatchParameteri;
#define glPatchParameteri glad_debug_glPatchParameteri
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DPROC glad_debug_glProgramUniform1d;
#define glProgramUniform1d glad_debug_glProgramUniform1d
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC glad_debug_glProgramUniform1f;
#define glProgramUniform1f glad_debug_glProgramUniform1f
GLAD_API_CALL PFNGLFLUSHPROC glad_glFlush;
GLAD_API_CALL PFNGLFLUSHPROC glad_debug_glFlush;
#define glFlush glad_debug_glFlush
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_debug_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv glad_debug_glGetRenderbufferParameteriv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC glad_debug_glProgramUniform3iv;
#define glProgramUniform3iv glad_debug_glProgramUniform3iv
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC glad_debug_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv glad_debug_glGetVertexAttribPointerv
GLAD_API_CALL PFNGLFENCESYNCPROC glad_glFenceSync;
GLAD_API_CALL PFNGLFENCESYNCPROC glad_debug_glFenceSync;
#define glFenceSync glad_debug_glFenceSync
GLAD_API_CALL PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
GLAD_API_CALL PFNGLVERTEXATTRIB3SVPROC glad_debug_glVertexAttrib3sv;
#define glVertexAttrib3sv glad_debug_glVertexAttrib3sv
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender;
#define glBeginConditionalRender glad_debug_glBeginConditionalRender
GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC glad_debug_glValidateProgramPipeline;
#define glValidateProgramPipeline glad_debug_glValidateProgramPipeline
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC glad_debug_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv glad_debug_glGetTexLevelParameteriv
GLAD_API_CALL PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
GLAD_API_CALL PFNGLTEXIMAGE1DPROC glad_debug_glTexImage1D;
#define glTexImage1D glad_debug_glTexImage1D
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEPROC glad_debug_glStencilFuncSeparate;
#define glStencilFuncSeparate glad_debug_glStencilFuncSeparate
GLAD_API_CALL PFNGLGENSAMPLERSPROC glad_glGenSamplers;
GLAD_API_CALL PFNGLGENSAMPLERSPROC glad_debug_glGenSamplers;
#define glGenSamplers glad_debug_glGenSamplers
GLAD_API_CALL PFNGLCLAMPCOLORPROC glad_glClampColor;
GLAD_API_CALL PFNGLCLAMPCOLORPROC glad_debug_glClampColor;
#define glClampColor glad_debug_glClampColor
GLAD_API_CALL PFNGLUNIFORM4IVPROC glad_glUniform4iv;
GLAD_API_CALL PFNGLUNIFORM4IVPROC glad_debug_glUniform4iv;
#define glUniform4iv glad_debug_glUniform4iv
GLAD_API_CALL PFNGLCLEARSTENCILPROC glad_glClearStencil;
GLAD_API_CALL PFNGLCLEARSTENCILPROC glad_debug_glClearStencil;
#define glClearStencil glad_debug_glClearStencil
GLAD_API_CALL PFNGLGENTEXTURESPROC glad_glGenTextures;
GLAD_API_CALL PFNGLGENTEXTURESPROC glad_debug_glGenTextures;
#define glGenTextures glad_debug_glGenTextures
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKPROC glad_debug_glDrawTransformFeedback;
#define glDrawTransformFeedback glad_debug_glDrawTransformFeedback
GLAD_API_CALL PFNGLGETDOUBLEVPROC glad_glGetDoublev;
GLAD_API_CALL PFNGLGETDOUBLEVPROC glad_debug_glGetDoublev;
#define glGetDoublev glad_debug_glGetDoublev
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVPROC glad_debug_glGetTexParameterIuiv;
#define glGetTexParameterIuiv glad_debug_glGetTexParameterIuiv
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVPROC glad_debug_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv glad_debug_glVertexAttrib4Nbv
GLAD_API_CALL PFNGLISSYNCPROC glad_glIsSync;
GLAD_API_CALL PFNGLISSYNCPROC glad_debug_glIsSync;
#define glIsSync glad_debug_glIsSync
GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC glad_debug_glDeleteRenderbuffers;
#define glDeleteRenderbuffers glad_debug_glDeleteRenderbuffers
GLAD_API_CALL PFNGLUNIFORM2IPROC glad_glUniform2i;
GLAD_API_CALL PFNGLUNIFORM2IPROC glad_debug_glUniform2i;
#define glUniform2i glad_debug_glUniform2i
GLAD_API_CALL PFNGLUNIFORM2FPROC glad_glUniform2f;
GLAD_API_CALL PFNGLUNIFORM2FPROC glad_debug_glUniform2f;
#define glUniform2f glad_debug_glUniform2f
GLAD_API_CALL PFNGLUNIFORM2DPROC glad_glUniform2d;
GLAD_API_CALL PFNGLUNIFORM2DPROC glad_debug_glUniform2d;
#define glUniform2d glad_debug_glUniform2d
GLAD_API_CALL PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
GLAD_API_CALL PFNGLVERTEXATTRIBL1DPROC glad_debug_glVertexAttribL1d;
#define glVertexAttribL1d glad_debug_glVertexAttribL1d
GLAD_API_CALL PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
GLAD_API_CALL PFNGLGETPROGRAMIVPROC glad_debug_glGetProgramiv;
#define glGetProgramiv glad_debug_glGetProgramiv
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer;
#define glVertexAttribPointer glad_debug_glVertexAttribPointer
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_debug_glFramebufferTextureLayer;
#define glFramebufferTextureLayer glad_debug_glFramebufferTextureLayer
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC glad_debug_glProgramUniform4fv;
#define glProgramUniform4fv glad_debug_glProgramUniform4fv
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_debug_glFlushMappedBufferRange;
#define glFlushMappedBufferRange glad_debug_glFlushMappedBufferRange
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC glad_debug_glProgramUniform2fv;
#define glProgramUniform2fv glad_debug_glProgramUniform2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3DVPROC glad_debug_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv glad_debug_glUniformMatrix2x3dv
GLAD_API_CALL PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
GLAD_API_CALL PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d;
#define glVertexAttribL3d glad_debug_glVertexAttribL3d
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_debug_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv glad_debug_glProgramUniformMatrix2x4dv
GLAD_API_CALL PFNGLGENQUERIESPROC glad_glGenQueries;
GLAD_API_CALL PFNGLGENQUERIESPROC glad_debug_glGenQueries;
#define glGenQueries glad_debug_glGenQueries
GLAD_API_CALL PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB;
GLAD_API_CALL PFNGLGETNUNIFORMIVARBPROC glad_debug_glGetnUniformivARB;
#define glGetnUniformivARB glad_debug_glGetnUniformivARB
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui;
#define glVertexAttribP1ui glad_debug_glVertexAttribP1ui
GLAD_API_CALL PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
GLAD_API_CALL PFNGLTEXSUBIMAGE3DPROC glad_debug_glTexSubImage3D;
#define glTexSubImage3D glad_debug_glTexSubImage3D
GLAD_API_CALL PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
GLAD_API_CALL PFNGLGETINTEGER64I_VPROC glad_debug_glGetInteger64i_v;
#define glGetInteger64i_v glad_debug_glGetInteger64i_v
GLAD_API_CALL PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
GLAD_API_CALL PFNGLDELETESAMPLERSPROC glad_debug_glDeleteSamplers;
#define glDeleteSamplers glad_debug_glDeleteSamplers
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D;
#define glCopyTexImage2D glad_debug_glCopyTexImage2D
GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer;
#define glBlitFramebuffer glad_debug_glBlitFramebuffer
GLAD_API_CALL PFNGLISENABLEDIPROC glad_glIsEnabledi;
GLAD_API_CALL PFNGLISENABLEDIPROC glad_debug_glIsEnabledi;
#define glIsEnabledi glad_debug_glIsEnabledi
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed glad_debug_glBindFragDataLocationIndexed
GLAD_API_CALL PFNGLUNIFORM2IVPROC glad_glUniform2iv;
GLAD_API_CALL PFNGLUNIFORM2IVPROC glad_debug_glUniform2iv;
#define glUniform2iv glad_debug_glUniform2iv
GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC glad_debug_glVertexAttrib1fv;
#define glVertexAttrib1fv glad_debug_glVertexAttrib1fv
GLAD_API_CALL PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
GLAD_API_CALL PFNGLUNIFORM4UIVPROC glad_debug_glUniform4uiv;
#define glUniform4uiv glad_debug_glUniform4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv;
#define glVertexAttribL1dv glad_debug_glVertexAttribL1dv
GLAD_API_CALL PFNGLGETSHADERIVPROC glad_glGetShaderiv;
GLAD_API_CALL PFNGLGETSHADERIVPROC glad_debug_glGetShaderiv;
#define glGetShaderiv glad_debug_glGetShaderiv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_debug_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv glad_debug_glProgramUniformMatrix3fv
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation;
#define glBindFragDataLocation glad_debug_glBindFragDataLocation
GLAD_API_CALL PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
GLAD_API_CALL PFNGLSCISSORARRAYVPROC glad_debug_glScissorArrayv;
#define glScissorArrayv glad_debug_glScissorArrayv
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC glad_debug_glPolygonOffset;
#define glPolygonOffset glad_debug_glPolygonOffset
GLAD_API_CALL PFNGLUNIFORM1DVPROC glad_glUniform1dv;
GLAD_API_CALL PFNGLUNIFORM1DVPROC glad_debug_glUniform1dv;
#define glUniform1dv glad_debug_glUniform1dv
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D;
#define glCompressedTexImage2D glad_debug_glCompressedTexImage2D
GLAD_API_CALL PFNGLUNIFORM4DVPROC glad_glUniform4dv;
GLAD_API_CALL PFNGLUNIFORM4DVPROC glad_debug_glUniform4dv;
#define glUniform4dv glad_debug_glUniform4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVPROC glad_debug_glProgramUniform3dv;
#define glProgramUniform3dv glad_debug_glProgramUniform3dv
GLAD_API_CALL PFNGLDISABLEPROC glad_glDisable;
GLAD_API_CALL PFNGLDISABLEPROC glad_debug_glDisable;
#define glDisable glad_debug_glDisable
GLAD_API_CALL PFNGLUNIFORM3FVPROC glad_glUniform3fv;
GLAD_API_CALL PFNGLUNIFORM3FVPROC glad_debug_glUniform3fv;
#define glUniform3fv glad_debug_glUniform3fv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVPROC glad_debug_glGetVertexAttribIiv;
#define glGetVertexAttribIiv glad_debug_glGetVertexAttribIiv
GLAD_API_CALL PFNGLMAPBUFFERPROC glad_glMapBuffer;
GLAD_API_CALL PFNGLMAPBUFFERPROC glad_debug_glMapBuffer;
#define glMapBuffer glad_debug_glMapBuffer
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D;
#define glCompressedTexImage3D glad_debug_glCompressedTexImage3D
GLAD_API_CALL PFNGLDELETESYNCPROC glad_glDeleteSync;
GLAD_API_CALL PFNGLDELETESYNCPROC glad_debug_glDeleteSync;
#define glDeleteSync glad_debug_glDeleteSync
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D;
#define glCopyTexSubImage3D glad_debug_glCopyTexSubImage3D
GLAD_API_CALL PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4DVPROC glad_debug_glUniformMatrix4dv;
#define glUniformMatrix4dv glad_debug_glUniformMatrix4dv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_debug_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName glad_debug_glGetActiveUniformBlockName
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC glad_debug_glGetVertexAttribiv;
#define glGetVertexAttribiv glad_debug_glGetVertexAttribiv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2DVPROC glad_debug_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv glad_debug_glUniformMatrix4x2dv
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSPROC glad_debug_glMultiDrawElements;
#define glMultiDrawElements glad_debug_glMultiDrawElements
GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC glad_debug_glVertexAttrib3fv;
#define glVertexAttrib3fv glad_debug_glVertexAttrib3fv
GLAD_API_CALL PFNGLUNIFORM3IVPROC glad_glUniform3iv;
GLAD_API_CALL PFNGLUNIFORM3IVPROC glad_debug_glUniform3iv;
#define glUniform3iv glad_debug_glUniform3iv
GLAD_API_CALL PFNGLPOLYGONMODEPROC glad_glPolygonMode;
GLAD_API_CALL PFNGLPOLYGONMODEPROC glad_debug_glPolygonMode;
#define glPolygonMode glad_debug_glPolygonMode
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC glad_debug_glProgramUniform4uiv;
#define glProgramUniform4uiv glad_debug_glProgramUniform4uiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_debug_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv glad_debug_glGetActiveUniformBlockiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC glad_debug_glProgramUniform4iv;
#define glProgramUniform4iv glad_debug_glProgramUniform4iv
GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC glad_debug_glGetProgramBinary;
#define glGetProgramBinary glad_debug_glGetProgramBinary
GLAD_API_CALL PFNGLUSEPROGRAMPROC glad_glUseProgram;
GLAD_API_CALL PFNGLUSEPROGRAMPROC glad_debug_glUseProgram;
#define glUseProgram glad_debug_glUseProgram
GLAD_API_CALL PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
GLAD_API_CALL PFNGLGETPROGRAMINFOLOGPROC glad_debug_glGetProgramInfoLog;
#define glGetProgramInfoLog glad_debug_glGetProgramInfoLog
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback;
#define glBindTransformFeedback glad_debug_glBindTransformFeedback
GLAD_API_CALL PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
GLAD_API_CALL PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray;
#define glBindVertexArray glad_debug_glBindVertexArray
GLAD_API_CALL PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
GLAD_API_CALL PFNGLDELETEBUFFERSPROC glad_debug_glDeleteBuffers;
#define glDeleteBuffers glad_debug_glDeleteBuffers
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_debug_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex glad_debug_glMultiDrawElementsBaseVertex
GLAD_API_CALL PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
GLAD_API_CALL PFNGLUNIFORM2UIVPROC glad_debug_glUniform2uiv;
#define glUniform2uiv glad_debug_glUniform2uiv
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D glad_debug_glCompressedTexSubImage1D
GLAD_API_CALL PFNGLFINISHPROC glad_glFinish;
GLAD_API_CALL PFNGLFINISHPROC glad_debug_glFinish;
#define glFinish glad_debug_glFinish
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDPROC glad_debug_glDepthRangeIndexed;
#define glDepthRangeIndexed glad_debug_glDepthRangeIndexed
GLAD_API_CALL PFNGLDELETESHADERPROC glad_glDeleteShader;
GLAD_API_CALL PFNGLDELETESHADERPROC glad_debug_glDeleteShader;
#define glDeleteShader glad_debug_glDeleteShader
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4DVPROC glad_debug_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv glad_debug_glUniformMatrix2x4dv
GLAD_API_CALL PFNGLVIEWPORTPROC glad_glViewport;
GLAD_API_CALL PFNGLVIEWPORTPROC glad_debug_glViewport;
#define glViewport glad_debug_glViewport
GLAD_API_CALL PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
GLAD_API_CALL PFNGLUNIFORM1UIVPROC glad_debug_glUniform1uiv;
#define glUniform1uiv glad_debug_glUniform1uiv
GLAD_API_CALL PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2DVPROC glad_debug_glUniformMatrix2dv;
#define glUniformMatrix2dv glad_debug_glUniformMatrix2dv
GLAD_API_CALL PFNGLUNIFORM2UIPROC glad_glUniform2ui;
GLAD_API_CALL PFNGLUNIFORM2UIPROC glad_debug_glUniform2ui;
#define glUniform2ui glad_debug_glUniform2ui
GLAD_API_CALL PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
GLAD_API_CALL PFNGLVERTEXATTRIBI3IPROC glad_debug_glVertexAttribI3i;
#define glVertexAttribI3i glad_debug_glVertexAttribI3i
GLAD_API_CALL PFNGLCLEARDEPTHPROC glad_glClearDepth;
GLAD_API_CALL PFNGLCLEARDEPTHPROC glad_debug_glClearDepth;
#define glClearDepth glad_debug_glClearDepth
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVPROC glad_debug_glVertexAttribI4usv;
#define glVertexAttribI4usv glad_debug_glVertexAttribI4usv
GLAD_API_CALL PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
GLAD_API_CALL PFNGLTEXPARAMETERFPROC glad_debug_glTexParameterf;
#define glTexParameterf glad_debug_glTexParameterf
GLAD_API_CALL PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
GLAD_API_CALL PFNGLTEXPARAMETERIPROC glad_debug_glTexParameteri;
#define glTexParameteri glad_debug_glTexParameteri
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_debug_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv glad_debug_glGetActiveSubroutineUniformiv
GLAD_API_CALL PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
GLAD_API_CALL PFNGLGETSHADERSOURCEPROC glad_debug_glGetShaderSource;
#define glGetShaderSource glad_debug_glGetShaderSource
GLAD_API_CALL PFNGLTEXBUFFERPROC glad_glTexBuffer;
GLAD_API_CALL PFNGLTEXBUFFERPROC glad_debug_glTexBuffer;
#define glTexBuffer glad_debug_glTexBuffer
GLAD_API_CALL PFNGLPIXELSTOREIPROC glad_glPixelStorei;
GLAD_API_CALL PFNGLPIXELSTOREIPROC glad_debug_glPixelStorei;
#define glPixelStorei glad_debug_glPixelStorei
GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC glad_debug_glValidateProgram;
#define glValidateProgram glad_debug_glValidateProgram
GLAD_API_CALL PFNGLPIXELSTOREFPROC glad_glPixelStoref;
GLAD_API_CALL PFNGLPIXELSTOREFPROC glad_debug_glPixelStoref;
#define glPixelStoref glad_debug_glPixelStoref
GLAD_API_CALL PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
GLAD_API_CALL PFNGLGETBOOLEANI_VPROC glad_debug_glGetBooleani_v;
#define glGetBooleani_v glad_debug_glGetBooleani_v
GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC glad_debug_glGenProgramPipelines;
#define glGenProgramPipelines glad_debug_glGenProgramPipelines
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv;
#define glVertexAttribP1uiv glad_debug_glVertexAttribP1uiv
GLAD_API_CALL PFNGLLINKPROGRAMPROC glad_glLinkProgram;
GLAD_API_CALL PFNGLLINKPROGRAMPROC glad_debug_glLinkProgram;
#define glLinkProgram glad_debug_glLinkProgram
GLAD_API_CALL PFNGLBINDTEXTUREPROC glad_glBindTexture;
GLAD_API_CALL PFNGLBINDTEXTUREPROC glad_debug_glBindTexture;
#define glBindTexture glad_debug_glBindTexture
GLAD_API_CALL PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB;
GLAD_API_CALL PFNGLGETNUNIFORMUIVARBPROC glad_debug_glGetnUniformuivARB;
#define glGetnUniformuivARB glad_debug_glGetnUniformuivARB
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_debug_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog glad_debug_glGetProgramPipelineInfoLog
GLAD_API_CALL PFNGLGETSTRINGPROC glad_glGetString;
GLAD_API_CALL PFNGLGETSTRINGPROC glad_debug_glGetString;
#define glGetString glad_debug_glGetString
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv;
#define glVertexAttribP2uiv glad_debug_glVertexAttribP2uiv
GLAD_API_CALL PFNGLDETACHSHADERPROC glad_glDetachShader;
GLAD_API_CALL PFNGLDETACHSHADERPROC glad_debug_glDetachShader;
#define glDetachShader glad_debug_glDetachShader
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4DVPROC glad_debug_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv glad_debug_glUniformMatrix3x4dv
GLAD_API_CALL PFNGLENDQUERYPROC glad_glEndQuery;
GLAD_API_CALL PFNGLENDQUERYPROC glad_debug_glEndQuery;
#define glEndQuery glad_debug_glEndQuery
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3DVPROC glad_debug_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv glad_debug_glUniformMatrix4x3dv
GLAD_API_CALL PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
GLAD_API_CALL PFNGLDEPTHRANGEARRAYVPROC glad_debug_glDepthRangeArrayv;
#define glDepthRangeArrayv glad_debug_glDepthRangeArrayv
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIPROC glad_debug_glVertexAttribI2ui;
#define glVertexAttribI2ui glad_debug_glVertexAttribI2ui
GLAD_API_CALL PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
GLAD_API_CALL PFNGLDELETETEXTURESPROC glad_debug_glDeleteTextures;
#define glDeleteTextures glad_debug_glDeleteTextures
GLAD_API_CALL PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
GLAD_API_CALL PFNGLSTENCILOPSEPARATEPROC glad_debug_glStencilOpSeparate;
#define glStencilOpSeparate glad_debug_glStencilOpSeparate
GLAD_API_CALL PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
GLAD_API_CALL PFNGLDELETEQUERIESPROC glad_debug_glDeleteQueries;
#define glDeleteQueries glad_debug_glDeleteQueries
GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC glad_debug_glVertexAttrib4f;
#define glVertexAttrib4f glad_debug_glVertexAttrib4f
GLAD_API_CALL PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
GLAD_API_CALL PFNGLVERTEXATTRIB4DPROC glad_debug_glVertexAttrib4d;
#define glVertexAttrib4d glad_debug_glVertexAttrib4d
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv;
#define glViewportIndexedfv glad_debug_glViewportIndexedfv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
GLAD_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC glad_debug_glGetBufferParameteri64v;
#define glGetBufferParameteri64v glad_debug_glGetBufferParameteri64v
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv;
#define glVertexAttribL4dv glad_debug_glVertexAttribL4dv
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC glad_debug_glGetTexParameteriv;
#define glGetTexParameteriv glad_debug_glGetTexParameteriv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVPROC glad_debug_glProgramUniform1dv;
#define glProgramUniform1dv glad_debug_glProgramUniform1dv
GLAD_API_CALL PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
GLAD_API_CALL PFNGLVERTEXATTRIB4SPROC glad_debug_glVertexAttrib4s;
#define glVertexAttrib4s glad_debug_glVertexAttrib4s
GLAD_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
GLAD_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC glad_debug_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex glad_debug_glDrawElementsBaseVertex
GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC glad_debug_glSampleCoverage;
#define glSampleCoverage glad_debug_glSampleCoverage
GLAD_API_CALL PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
GLAD_API_CALL PFNGLSAMPLERPARAMETERIPROC glad_debug_glSamplerParameteri;
#define glSamplerParameteri glad_debug_glSamplerParameteri
GLAD_API_CALL PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
GLAD_API_CALL PFNGLSAMPLERPARAMETERFPROC glad_debug_glSamplerParameterf;
#define glSamplerParameterf glad_debug_glSamplerParameterf
GLAD_API_CALL PFNGLUNIFORM1FPROC glad_glUniform1f;
GLAD_API_CALL PFNGLUNIFORM1FPROC glad_debug_glUniform1f;
#define glUniform1f glad_debug_glUniform1f
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC glad_debug_glGetVertexAttribfv;
#define glGetVertexAttribfv glad_debug_glGetVertexAttribfv
GLAD_API_CALL PFNGLUNIFORM1DPROC glad_glUniform1d;
GLAD_API_CALL PFNGLUNIFORM1DPROC glad_debug_glUniform1d;
#define glUniform1d glad_debug_glUniform1d
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_debug_glGetCompressedTexImage;
#define glGetCompressedTexImage glad_debug_glGetCompressedTexImage
GLAD_API_CALL PFNGLUNIFORM1IPROC glad_glUniform1i;
GLAD_API_CALL PFNGLUNIFORM1IPROC glad_debug_glUniform1i;
#define glUniform1i glad_debug_glUniform1i
GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC glad_debug_glGetActiveAttrib;
#define glGetActiveAttrib glad_debug_glGetActiveAttrib
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC glad_debug_glTexSubImage2D;
#define glTexSubImage2D glad_debug_glTexSubImage2D
GLAD_API_CALL PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
GLAD_API_CALL PFNGLGETUNIFORMIVPROC glad_debug_glGetUniformiv;
#define glGetUniformiv glad_debug_glGetUniformiv
GLAD_API_CALL PFNGLLOGICOPPROC glad_glLogicOp;
GLAD_API_CALL PFNGLLOGICOPPROC glad_debug_glLogicOp;
#define glLogicOp glad_debug_glLogicOp
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_debug_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv glad_debug_glProgramUniformMatrix3x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_debug_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv glad_debug_glProgramUniformMatrix4dv
GLAD_API_CALL PFNGLUNIFORM4UIPROC glad_glUniform4ui;
GLAD_API_CALL PFNGLUNIFORM4UIPROC glad_debug_glUniform4ui;
#define glUniform4ui glad_debug_glUniform4ui
GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer;
#define glBindFramebuffer glad_debug_glBindFramebuffer
GLAD_API_CALL PFNGLCULLFACEPROC glad_glCullFace;
GLAD_API_CALL PFNGLCULLFACEPROC glad_debug_glCullFace;
#define glCullFace glad_debug_glCullFace
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC glad_debug_glProgramUniform4i;
#define glProgramUniform4i glad_debug_glProgramUniform4i
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC glad_debug_glProgramUniform4f;
#define glProgramUniform4f glad_debug_glProgramUniform4f
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf;
#define glViewportIndexedf glad_debug_glViewportIndexedf
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DPROC glad_debug_glProgramUniform4d;
#define glProgramUniform4d glad_debug_glProgramUniform4d
GLAD_API_CALL PFNGLGETSTRINGIPROC glad_glGetStringi;
GLAD_API_CALL PFNGLGETSTRINGIPROC glad_debug_glGetStringi;
#define glGetStringi glad_debug_glGetStringi
GLAD_API_CALL PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
GLAD_API_CALL PFNGLSCISSORINDEXEDPROC glad_debug_glScissorIndexed;
#define glScissorIndexed glad_debug_glScissorIndexed
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_debug_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream glad_debug_glDrawTransformFeedbackStream
GLAD_API_CALL PFNGLATTACHSHADERPROC glad_glAttachShader;
GLAD_API_CALL PFNGLATTACHSHADERPROC glad_debug_glAttachShader;
#define glAttachShader glad_debug_glAttachShader
GLAD_API_CALL PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
GLAD_API_CALL PFNGLQUERYCOUNTERPROC glad_debug_glQueryCounter;
#define glQueryCounter glad_debug_glQueryCounter
GLAD_API_CALL PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
GLAD_API_CALL PFNGLPROVOKINGVERTEXPROC glad_debug_glProvokingVertex;
#define glProvokingVertex glad_debug_glProvokingVertex
GLAD_API_CALL PFNGLSHADERBINARYPROC glad_glShaderBinary;
GLAD_API_CALL PFNGLSHADERBINARYPROC glad_debug_glShaderBinary;
#define glShaderBinary glad_debug_glShaderBinary
GLAD_API_CALL PFNGLDRAWELEMENTSPROC glad_glDrawElements;
GLAD_API_CALL PFNGLDRAWELEMENTSPROC glad_debug_glDrawElements;
#define glDrawElements glad_debug_glDrawElements
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVPROC glad_debug_glVertexAttribI4sv;
#define glVertexAttribI4sv glad_debug_glVertexAttribI4sv
GLAD_API_CALL PFNGLUNIFORM1IVPROC glad_glUniform1iv;
GLAD_API_CALL PFNGLUNIFORM1IVPROC glad_debug_glUniform1iv;
#define glUniform1iv glad_debug_glUniform1iv
GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC glad_debug_glCreateShaderProgramv;
#define glCreateShaderProgramv glad_debug_glCreateShaderProgramv
GLAD_API_CALL PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
GLAD_API_CALL PFNGLGETQUERYOBJECTIVPROC glad_debug_glGetQueryObjectiv;
#define glGetQueryObjectiv glad_debug_glGetQueryObjectiv
GLAD_API_CALL PFNGLREADBUFFERPROC glad_glReadBuffer;
GLAD_API_CALL PFNGLREADBUFFERPROC glad_debug_glReadBuffer;
#define glReadBuffer glad_debug_glReadBuffer
GLAD_API_CALL PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
GLAD_API_CALL PFNGLTEXPARAMETERIUIVPROC glad_debug_glTexParameterIuiv;
#define glTexParameterIuiv glad_debug_glTexParameterIuiv
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC glad_debug_glDrawArraysInstanced;
#define glDrawArraysInstanced glad_debug_glDrawArraysInstanced
GLAD_API_CALL PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
GLAD_API_CALL PFNGLGENERATEMIPMAPPROC glad_debug_glGenerateMipmap;
#define glGenerateMipmap glad_debug_glGenerateMipmap
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_debug_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv glad_debug_glProgramUniformMatrix2fv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
GLAD_API_CALL PFNGLSAMPLERPARAMETERIVPROC glad_debug_glSamplerParameteriv;
#define glSamplerParameteriv glad_debug_glSamplerParameteriv
GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC glad_debug_glVertexAttrib3f;
#define glVertexAttrib3f glad_debug_glVertexAttrib3f
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVPROC glad_debug_glVertexAttrib4uiv;
#define glVertexAttrib4uiv glad_debug_glVertexAttrib4uiv
GLAD_API_CALL PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
GLAD_API_CALL PFNGLPOINTPARAMETERIPROC glad_debug_glPointParameteri;
#define glPointParameteri glad_debug_glPointParameteri
GLAD_API_CALL PFNGLBLENDCOLORPROC glad_glBlendColor;
GLAD_API_CALL PFNGLBLENDCOLORPROC glad_debug_glBlendColor;
#define glBlendColor glad_debug_glBlendColor
GLAD_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
GLAD_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC glad_debug_glSamplerParameterIuiv;
#define glSamplerParameterIuiv glad_debug_glSamplerParameterIuiv
GLAD_API_CALL PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
GLAD_API_CALL PFNGLUNMAPBUFFERPROC glad_debug_glUnmapBuffer;
#define glUnmapBuffer glad_debug_glUnmapBuffer
GLAD_API_CALL PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
GLAD_API_CALL PFNGLPOINTPARAMETERFPROC glad_debug_glPointParameterf;
#define glPointParameterf glad_debug_glPointParameterf
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC glad_debug_glProgramUniform1iv;
#define glProgramUniform1iv glad_debug_glProgramUniform1iv
GLAD_API_CALL PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
GLAD_API_CALL PFNGLVERTEXATTRIB3SPROC glad_debug_glVertexAttrib3s;
#define glVertexAttrib3s glad_debug_glVertexAttrib3s
GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer;
#define glBindRenderbuffer glad_debug_glBindRenderbuffer
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv;
#define glVertexAttribP4uiv glad_debug_glVertexAttribP4uiv
GLAD_API_CALL PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
GLAD_API_CALL PFNGLGETPROGRAMSTAGEIVPROC glad_debug_glGetProgramStageiv;
#define glGetProgramStageiv glad_debug_glGetProgramStageiv
GLAD_API_CALL PFNGLISPROGRAMPROC glad_glIsProgram;
GLAD_API_CALL PFNGLISPROGRAMPROC glad_debug_glIsProgram;
#define glIsProgram glad_debug_glIsProgram
GLAD_API_CALL PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
GLAD_API_CALL PFNGLPOINTPARAMETERFVPROC glad_debug_glPointParameterfv;
#define glPointParameterfv glad_debug_glPointParameterfv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2DVPROC glad_debug_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv glad_debug_glUniformMatrix3x2dv
GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC glad_debug_glVertexAttrib4fv;
#define glVertexAttrib4fv glad_debug_glVertexAttrib4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_debug_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv glad_debug_glProgramUniformMatrix2x3dv
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKPROC glad_debug_glIsTransformFeedback;
#define glIsTransformFeedback glad_debug_glIsTransformFeedback
GLAD_API_CALL PFNGLUNIFORM4IPROC glad_glUniform4i;
GLAD_API_CALL PFNGLUNIFORM4IPROC glad_debug_glUniform4i;
#define glUniform4i glad_debug_glUniform4i
GLAD_API_CALL PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
GLAD_API_CALL PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture;
#define glActiveTexture glad_debug_glActiveTexture
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC glad_debug_glEnableVertexAttribArray;
#define glEnableVertexAttribArray glad_debug_glEnableVertexAttribArray
GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC glad_debug_glIsProgramPipeline;
#define glIsProgramPipeline glad_debug_glIsProgramPipeline
GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC glad_debug_glVertexAttrib2fv;
#define glVertexAttrib2fv glad_debug_glVertexAttrib2fv
GLAD_API_CALL PFNGLUNIFORM4DPROC glad_glUniform4d;
GLAD_API_CALL PFNGLUNIFORM4DPROC glad_debug_glUniform4d;
#define glUniform4d glad_debug_glUniform4d
GLAD_API_CALL PFNGLUNIFORM4FPROC glad_glUniform4f;
GLAD_API_CALL PFNGLUNIFORM4FPROC glad_debug_glUniform4f;
#define glUniform4f glad_debug_glUniform4f
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample glad_debug_glRenderbufferStorageMultisample
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC glad_debug_glUniformMatrix3fv;
#define glUniformMatrix3fv glad_debug_glUniformMatrix3fv
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer;
#define glVertexAttribLPointer glad_debug_glVertexAttribLPointer
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_debug_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex glad_debug_glDrawElementsInstancedBaseVertex
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv;
#define glVertexAttribL2dv glad_debug_glVertexAttribL2dv
GLAD_API_CALL PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB;
GLAD_API_CALL PFNGLREADNPIXELSARBPROC glad_debug_glReadnPixelsARB;
#define glReadnPixelsARB glad_debug_glReadnPixelsARB
GLAD_API_CALL PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
GLAD_API_CALL PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d;
#define glVertexAttribL2d glad_debug_glVertexAttribL2d
GLAD_API_CALL PFNGLSTENCILFUNCPROC glad_glStencilFunc;
GLAD_API_CALL PFNGLSTENCILFUNCPROC glad_debug_glStencilFunc;
#define glStencilFunc glad_debug_glStencilFunc
GLAD_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
GLAD_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC glad_debug_glUniformBlockBinding;
#define glUniformBlockBinding glad_debug_glUniformBlockBinding
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC glad_debug_glProgramUniform3i;
#define glProgramUniform3i glad_debug_glProgramUniform3i
GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC glad_debug_glUseProgramStages;
#define glUseProgramStages glad_debug_glUseProgramStages
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC glad_debug_glProgramUniform3f;
#define glProgramUniform3f glad_debug_glProgramUniform3f
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB;
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_debug_glGetGraphicsResetStatusARB;
#define glGetGraphicsResetStatusARB glad_debug_glGetGraphicsResetStatusARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DPROC glad_debug_glProgramUniform3d;
#define glProgramUniform3d glad_debug_glProgramUniform3d
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVPROC glad_debug_glVertexAttribI4iv;
#define glVertexAttribI4iv glad_debug_glVertexAttribI4iv
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC glad_debug_glGetProgramPipelineiv;
#define glGetProgramPipelineiv glad_debug_glGetProgramPipelineiv
GLAD_API_CALL PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
GLAD_API_CALL PFNGLGETQUERYINDEXEDIVPROC glad_debug_glGetQueryIndexediv;
#define glGetQueryIndexediv glad_debug_glGetQueryIndexediv
GLAD_API_CALL PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
GLAD_API_CALL PFNGLGETSHADERINFOLOGPROC glad_debug_glGetShaderInfoLog;
#define glGetShaderInfoLog glad_debug_glGetShaderInfoLog
GLAD_API_CALL PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
GLAD_API_CALL PFNGLVERTEXATTRIBI4IPROC glad_debug_glVertexAttribI4i;
#define glVertexAttribI4i glad_debug_glVertexAttribI4i
GLAD_API_CALL PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
GLAD_API_CALL PFNGLGETBUFFERSUBDATAPROC glad_debug_glGetBufferSubData;
#define glGetBufferSubData glad_debug_glGetBufferSubData
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVPROC glad_debug_glGetVertexAttribLdv;
#define glGetVertexAttribLdv glad_debug_glGetVertexAttribLdv
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate;
#define glBlendEquationSeparate glad_debug_glBlendEquationSeparate
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIPROC glad_debug_glVertexAttribI1ui;
#define glVertexAttribI1ui glad_debug_glVertexAttribI1ui
GLAD_API_CALL PFNGLGENBUFFERSPROC glad_glGenBuffers;
GLAD_API_CALL PFNGLGENBUFFERSPROC glad_debug_glGenBuffers;
#define glGenBuffers glad_debug_glGenBuffers
GLAD_API_CALL PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
GLAD_API_CALL PFNGLGETSUBROUTINEINDEXPROC glad_debug_glGetSubroutineIndex;
#define glGetSubroutineIndex glad_debug_glGetSubroutineIndex
GLAD_API_CALL PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
GLAD_API_CALL PFNGLVERTEXATTRIB2SVPROC glad_debug_glVertexAttrib2sv;
#define glVertexAttrib2sv glad_debug_glVertexAttrib2sv
GLAD_API_CALL PFNGLBLENDFUNCPROC glad_glBlendFunc;
GLAD_API_CALL PFNGLBLENDFUNCPROC glad_debug_glBlendFunc;
#define glBlendFunc glad_debug_glBlendFunc
GLAD_API_CALL PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
GLAD_API_CALL PFNGLCREATEPROGRAMPROC glad_debug_glCreateProgram;
#define glCreateProgram glad_debug_glCreateProgram
GLAD_API_CALL PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
GLAD_API_CALL PFNGLTEXIMAGE3DPROC glad_debug_glTexImage3D;
#define glTexImage3D glad_debug_glTexImage3D
GLAD_API_CALL PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
GLAD_API_CALL PFNGLISFRAMEBUFFERPROC glad_debug_glIsFramebuffer;
#define glIsFramebuffer glad_debug_glIsFramebuffer
GLAD_API_CALL PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
GLAD_API_CALL PFNGLPRIMITIVERESTARTINDEXPROC glad_debug_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex glad_debug_glPrimitiveRestartIndex
GLAD_API_CALL PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB;
GLAD_API_CALL PFNGLGETNUNIFORMDVARBPROC glad_debug_glGetnUniformdvARB;
#define glGetnUniformdvARB glad_debug_glGetnUniformdvARB
GLAD_API_CALL PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
GLAD_API_CALL PFNGLGETINTEGER64VPROC glad_debug_glGetInteger64v;
#define glGetInteger64v glad_debug_glGetInteger64v
GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline;
#define glBindProgramPipeline glad_debug_glBindProgramPipeline
GLAD_API_CALL PFNGLSCISSORPROC glad_glScissor;
GLAD_API_CALL PFNGLSCISSORPROC glad_debug_glScissor;
#define glScissor glad_debug_glScissor
GLAD_API_CALL PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
GLAD_API_CALL PFNGLGETBOOLEANVPROC glad_debug_glGetBooleanv;
#define glGetBooleanv glad_debug_glGetBooleanv
GLAD_API_CALL PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
GLAD_API_CALL PFNGLUNIFORM3UIVPROC glad_debug_glUniform3uiv;
#define glUniform3uiv glad_debug_glUniform3uiv
GLAD_API_CALL PFNGLCLEARCOLORPROC glad_glClearColor;
GLAD_API_CALL PFNGLCLEARCOLORPROC glad_debug_glClearColor;
#define glClearColor glad_debug_glClearColor
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVPROC glad_debug_glVertexAttrib4Niv;
#define glVertexAttrib4Niv glad_debug_glVertexAttrib4Niv
GLAD_API_CALL PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
GLAD_API_CALL PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv;
#define glClearBufferiv glad_debug_glClearBufferiv
GLAD_API_CALL PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
GLAD_API_CALL PFNGLVERTEXATTRIB3DPROC glad_debug_glVertexAttrib3d;
#define glVertexAttrib3d glad_debug_glVertexAttrib3d
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVPROC glad_debug_glProgramUniform4dv;
#define glProgramUniform4dv glad_debug_glProgramUniform4dv
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVPROC glad_debug_glVertexAttribI2uiv;
#define glVertexAttribI2uiv glad_debug_glVertexAttribI2uiv
GLAD_API_CALL PFNGLUNIFORM3UIPROC glad_glUniform3ui;
GLAD_API_CALL PFNGLUNIFORM3UIPROC glad_debug_glUniform3ui;
#define glUniform3ui glad_debug_glUniform3ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC glad_debug_glProgramUniform3uiv;
#define glProgramUniform3uiv glad_debug_glProgramUniform3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVPROC glad_debug_glVertexAttribI4uiv;
#define glVertexAttribI4uiv glad_debug_glVertexAttribI4uiv
GLAD_API_CALL PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
GLAD_API_CALL PFNGLVERTEXATTRIB4BVPROC glad_debug_glVertexAttrib4bv;
#define glVertexAttrib4bv glad_debug_glVertexAttrib4bv
GLAD_API_CALL PFNGLUNIFORM2FVPROC glad_glUniform2fv;
GLAD_API_CALL PFNGLUNIFORM2FVPROC glad_debug_glUniform2fv;
#define glUniform2fv glad_debug_glUniform2fv
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_debug_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName glad_debug_glGetActiveSubroutineUniformName
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC glad_debug_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv glad_debug_glGetSamplerParameterIuiv
GLAD_API_CALL PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
GLAD_API_CALL PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange;
#define glBindBufferRange glad_debug_glBindBufferRange
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv;
#define glVertexAttribL3dv glad_debug_glVertexAttribL3dv
GLAD_API_CALL PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
GLAD_API_CALL PFNGLGETUNIFORMDVPROC glad_debug_glGetUniformdv;
#define glGetUniformdv glad_debug_glGetUniformdv
GLAD_API_CALL PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
GLAD_API_CALL PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf;
#define glClearDepthf glad_debug_glClearDepthf
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC glad_debug_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv glad_debug_glUniformMatrix2x3fv
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC glad_debug_glGenTransformFeedbacks;
#define glGenTransformFeedbacks glad_debug_glGenTransformFeedbacks
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC glad_debug_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv glad_debug_glGetVertexAttribIuiv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVPROC glad_debug_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv glad_debug_glVertexAttrib4Nusv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_debug_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv glad_debug_glProgramUniformMatrix4x3dv
GLAD_API_CALL PFNGLCOLORMASKPROC glad_glColorMask;
GLAD_API_CALL PFNGLCOLORMASKPROC glad_debug_glColorMask;
#define glColorMask glad_debug_glColorMask
GLAD_API_CALL PFNGLREADNPIXELSPROC glad_glReadnPixels;
GLAD_API_CALL PFNGLREADNPIXELSPROC glad_debug_glReadnPixels;
#define glReadnPixels glad_debug_glReadnPixels
GLAD_API_CALL PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
GLAD_API_CALL PFNGLPROGRAMBINARYPROC glad_debug_glProgramBinary;
#define glProgramBinary glad_debug_glProgramBinary
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVPROC glad_debug_glVertexAttribI4bv;
#define glVertexAttribI4bv glad_debug_glVertexAttribI4bv
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC glad_debug_glGetTexParameterfv;
#define glGetTexParameterfv glad_debug_glGetTexParameterfv
GLAD_API_CALL PFNGLBLENDFUNCIPROC glad_glBlendFunci;
GLAD_API_CALL PFNGLBLENDFUNCIPROC glad_debug_glBlendFunci;
#define glBlendFunci glad_debug_glBlendFunci
GLAD_API_CALL PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
GLAD_API_CALL PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync;
#define glClientWaitSync glad_debug_glClientWaitSync
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIPROC glad_debug_glVertexAttribI4ui;
#define glVertexAttribI4ui glad_debug_glVertexAttribI4ui
GLAD_API_CALL PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
GLAD_API_CALL PFNGLGETFLOATI_VPROC glad_debug_glGetFloati_v;
#define glGetFloati_v glad_debug_glGetFloati_v
GLAD_API_CALL PFNGLDEPTHFUNCPROC glad_glDepthFunc;
GLAD_API_CALL PFNGLDEPTHFUNCPROC glad_debug_glDepthFunc;
#define glDepthFunc glad_debug_glDepthFunc
GLAD_API_CALL PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
GLAD_API_CALL PFNGLTEXPARAMETERIIVPROC glad_debug_glTexParameterIiv;
#define glTexParameterIiv glad_debug_glTexParameterIiv
GLAD_API_CALL PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
GLAD_API_CALL PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation;
#define glBlendEquation glad_debug_glBlendEquation
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC glad_debug_glGetUniformLocation;
#define glGetUniformLocation glad_debug_glGetUniformLocation
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVPROC glad_debug_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv glad_debug_glVertexAttrib4Nsv
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D glad_debug_glCompressedTexSubImage2D
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC glad_debug_glEndTransformFeedback;
#define glEndTransformFeedback glad_debug_glEndTransformFeedback
GLAD_API_CALL PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
GLAD_API_CALL PFNGLVERTEXATTRIB4USVPROC glad_debug_glVertexAttrib4usv;
#define glVertexAttrib4usv glad_debug_glVertexAttrib4usv
GLAD_API_CALL PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
GLAD_API_CALL PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_debug_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv glad_debug_glGetUniformSubroutineuiv
GLAD_API_CALL PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
GLAD_API_CALL PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_debug_glTexImage2DMultisample;
#define glTexImage2DMultisample glad_debug_glTexImage2DMultisample
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback;
#define glBeginTransformFeedback glad_debug_glBeginTransformFeedback
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVPROC glad_debug_glVertexAttribI1iv;
#define glVertexAttribI1iv glad_debug_glVertexAttribI1iv
GLAD_API_CALL PFNGLISSAMPLERPROC glad_glIsSampler;
GLAD_API_CALL PFNGLISSAMPLERPROC glad_debug_glIsSampler;
#define glIsSampler glad_debug_glIsSampler
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORPROC glad_debug_glVertexAttribDivisor;
#define glVertexAttribDivisor glad_debug_glVertexAttribDivisor
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D;
#define glCompressedTexImage1D glad_debug_glCompressedTexImage1D
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC glad_debug_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks glad_debug_glDeleteTransformFeedbacks
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D;
#define glCopyTexSubImage1D glad_debug_glCopyTexSubImage1D
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_debug_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex glad_debug_glDrawRangeElementsBaseVertex
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus;
#define glCheckFramebufferStatus glad_debug_glCheckFramebufferStatus
GLAD_API_CALL PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
GLAD_API_CALL PFNGLENDCONDITIONALRENDERPROC glad_debug_glEndConditionalRender;
#define glEndConditionalRender glad_debug_glEndConditionalRender
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation;
#define glBindAttribLocation glad_debug_glBindAttribLocation
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC glad_debug_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv glad_debug_glUniformMatrix4x2fv
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_debug_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings glad_debug_glTransformFeedbackVaryings
GLAD_API_CALL PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
GLAD_API_CALL PFNGLVERTEXATTRIB1DVPROC glad_debug_glVertexAttrib1dv;
#define glVertexAttrib1dv glad_debug_glVertexAttrib1dv
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSPROC glad_debug_glDrawRangeElements;
#define glDrawRangeElements glad_debug_glDrawRangeElements
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVPROC glad_debug_glGetQueryObjectuiv;
#define glGetQueryObjectuiv glad_debug_glGetQueryObjectuiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
GLAD_API_CALL PFNGLSAMPLERPARAMETERIIVPROC glad_debug_glSamplerParameterIiv;
#define glSamplerParameterIiv glad_debug_glSamplerParameterIiv
GLAD_API_CALL PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
GLAD_API_CALL PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData;
#define glBufferSubData glad_debug_glBufferSubData
GLAD_API_CALL PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
GLAD_API_CALL PFNGLVERTEXATTRIB4IVPROC glad_debug_glVertexAttrib4iv;
#define glVertexAttrib4iv glad_debug_glVertexAttrib4iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC glad_debug_glProgramUniform1uiv;
#define glProgramUniform1uiv glad_debug_glProgramUniform1uiv
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC glad_debug_glFramebufferTexture;
#define glFramebufferTexture glad_debug_glFramebufferTexture
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIPROC glad_debug_glBlendFuncSeparatei;
#define glBlendFuncSeparatei glad_debug_glBlendFuncSeparatei
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_debug_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv glad_debug_glProgramUniformMatrix4x2fv
GLAD_API_CALL PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
GLAD_API_CALL PFNGLMULTIDRAWARRAYSPROC glad_debug_glMultiDrawArrays;
#define glMultiDrawArrays glad_debug_glMultiDrawArrays
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVPROC glad_debug_glVertexAttribI2iv;
#define glVertexAttribI2iv glad_debug_glVertexAttribI2iv
GLAD_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
GLAD_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC glad_debug_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat glad_debug_glGetShaderPrecisionFormat
GLAD_API_CALL PFNGLDISABLEIPROC glad_glDisablei;
GLAD_API_CALL PFNGLDISABLEIPROC glad_debug_glDisablei;
#define glDisablei glad_debug_glDisablei
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_debug_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv glad_debug_glProgramUniformMatrix2x4fv
GLAD_API_CALL PFNGLSHADERSOURCEPROC glad_glShaderSource;
GLAD_API_CALL PFNGLSHADERSOURCEPROC glad_debug_glShaderSource;
#define glShaderSource glad_debug_glShaderSource
GLAD_API_CALL PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
GLAD_API_CALL PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed;
#define glBeginQueryIndexed glad_debug_glBeginQueryIndexed
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVPROC glad_debug_glVertexAttribI3uiv;
#define glVertexAttribI3uiv glad_debug_glVertexAttribI3uiv
GLAD_API_CALL PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
GLAD_API_CALL PFNGLRELEASESHADERCOMPILERPROC glad_debug_glReleaseShaderCompiler;
#define glReleaseShaderCompiler glad_debug_glReleaseShaderCompiler
GLAD_API_CALL PFNGLGETSYNCIVPROC glad_glGetSynciv;
GLAD_API_CALL PFNGLGETSYNCIVPROC glad_debug_glGetSynciv;
#define glGetSynciv glad_debug_glGetSynciv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC glad_debug_glProgramUniform2uiv;
#define glProgramUniform2uiv glad_debug_glProgramUniform2uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVPROC glad_debug_glProgramUniform2dv;
#define glProgramUniform2dv glad_debug_glProgramUniform2dv
GLAD_API_CALL PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
GLAD_API_CALL PFNGLPATCHPARAMETERFVPROC glad_debug_glPatchParameterfv;
#define glPatchParameterfv glad_debug_glPatchParameterfv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC glad_debug_glProgramUniform2i;
#define glProgramUniform2i glad_debug_glProgramUniform2i
GLAD_API_CALL PFNGLBEGINQUERYPROC glad_glBeginQuery;
GLAD_API_CALL PFNGLBEGINQUERYPROC glad_debug_glBeginQuery;
#define glBeginQuery glad_debug_glBeginQuery
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC glad_debug_glUniformMatrix4fv;
#define glUniformMatrix4fv glad_debug_glUniformMatrix4fv
GLAD_API_CALL PFNGLBINDBUFFERPROC glad_glBindBuffer;
GLAD_API_CALL PFNGLBINDBUFFERPROC glad_debug_glBindBuffer;
#define glBindBuffer glad_debug_glBindBuffer
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DPROC glad_debug_glProgramUniform2d;
#define glProgramUniform2d glad_debug_glProgramUniform2d
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC glad_debug_glProgramUniform2f;
#define glProgramUniform2f glad_debug_glProgramUniform2f
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC glad_debug_glUniformMatrix2fv;
#define glUniformMatrix2fv glad_debug_glUniformMatrix2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC glad_debug_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv glad_debug_glUniformMatrix2x4fv
GLAD_API_CALL PFNGLBUFFERDATAPROC glad_glBufferData;
GLAD_API_CALL PFNGLBUFFERDATAPROC glad_debug_glBufferData;
#define glBufferData glad_debug_glBufferData
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVPROC glad_debug_glGetTexParameterIiv;
#define glGetTexParameterIiv glad_debug_glGetTexParameterIiv
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC glad_debug_glPauseTransformFeedback;
#define glPauseTransformFeedback glad_debug_glPauseTransformFeedback
GLAD_API_CALL PFNGLGETERRORPROC glad_glGetError;
GLAD_API_CALL PFNGLGETERRORPROC glad_debug_glGetError;
#define glGetError glad_debug_glGetError
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui;
#define glVertexAttribP2ui glad_debug_glVertexAttribP2ui
GLAD_API_CALL PFNGLGETFLOATVPROC glad_glGetFloatv;
GLAD_API_CALL PFNGLGETFLOATVPROC glad_debug_glGetFloatv;
#define glGetFloatv glad_debug_glGetFloatv
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC glad_debug_glTexSubImage1D;
#define glTexSubImage1D glad_debug_glTexSubImage1D
GLAD_API_CALL PFNGLREADPIXELSPROC glad_glReadPixels;
GLAD_API_CALL PFNGLREADPIXELSPROC glad_debug_glReadPixels;
#define glReadPixels glad_debug_glReadPixels
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC glad_debug_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv glad_debug_glGetTexLevelParameterfv
GLAD_API_CALL PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
GLAD_API_CALL PFNGLVERTEXATTRIBI1IPROC glad_debug_glVertexAttribI1i;
#define glVertexAttribI1i glad_debug_glVertexAttribI1i
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv;
#define glVertexAttribP3uiv glad_debug_glVertexAttribP3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVPROC glad_debug_glVertexAttribI3iv;
#define glVertexAttribI3iv glad_debug_glVertexAttribI3iv
GLAD_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB;
GLAD_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_debug_glGetnCompressedTexImageARB;
#define glGetnCompressedTexImageARB glad_debug_glGetnCompressedTexImageARB
GLAD_API_CALL PFNGLGETINTEGERVPROC glad_glGetIntegerv;
GLAD_API_CALL PFNGLGETINTEGERVPROC glad_debug_glGetIntegerv;
#define glGetIntegerv glad_debug_glGetIntegerv
GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC glad_debug_glGetBufferPointerv;
#define glGetBufferPointerv glad_debug_glGetBufferPointerv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_debug_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv glad_debug_glProgramUniformMatrix3dv
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC glad_debug_glFramebufferTexture3D;
#define glFramebufferTexture3D glad_debug_glFramebufferTexture3D
GLAD_API_CALL PFNGLISQUERYPROC glad_glIsQuery;
GLAD_API_CALL PFNGLISQUERYPROC glad_debug_glIsQuery;
#define glIsQuery glad_debug_glIsQuery
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv glad_debug_glGetFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC glad_debug_glProgramUniform4ui;
#define glProgramUniform4ui glad_debug_glProgramUniform4ui
GLAD_API_CALL PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
GLAD_API_CALL PFNGLVERTEXATTRIB4SVPROC glad_debug_glVertexAttrib4sv;
#define glVertexAttrib4sv glad_debug_glVertexAttrib4sv
GLAD_API_CALL PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
GLAD_API_CALL PFNGLTEXIMAGE2DPROC glad_debug_glTexImage2D;
#define glTexImage2D glad_debug_glTexImage2D
GLAD_API_CALL PFNGLSTENCILMASKPROC glad_glStencilMask;
GLAD_API_CALL PFNGLSTENCILMASKPROC glad_debug_glStencilMask;
#define glStencilMask glad_debug_glStencilMask
GLAD_API_CALL PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
GLAD_API_CALL PFNGLSAMPLERPARAMETERFVPROC glad_debug_glSamplerParameterfv;
#define glSamplerParameterfv glad_debug_glSamplerParameterfv
GLAD_API_CALL PFNGLISTEXTUREPROC glad_glIsTexture;
GLAD_API_CALL PFNGLISTEXTUREPROC glad_debug_glIsTexture;
#define glIsTexture glad_debug_glIsTexture
GLAD_API_CALL PFNGLUNIFORM1FVPROC glad_glUniform1fv;
GLAD_API_CALL PFNGLUNIFORM1FVPROC glad_debug_glUniform1fv;
#define glUniform1fv glad_debug_glUniform1fv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVPROC glad_debug_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv glad_debug_glVertexAttrib4Nubv
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC glad_debug_glTexParameterfv;
#define glTexParameterfv glad_debug_glTexParameterfv
GLAD_API_CALL PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
GLAD_API_CALL PFNGLSCISSORINDEXEDVPROC glad_debug_glScissorIndexedv;
#define glScissorIndexedv glad_debug_glScissorIndexedv
GLAD_API_CALL PFNGLUNIFORM3DVPROC glad_glUniform3dv;
GLAD_API_CALL PFNGLUNIFORM3DVPROC glad_debug_glUniform3dv;
#define glUniform3dv glad_debug_glUniform3dv
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONPROC glad_debug_glGetFragDataLocation;
#define glGetFragDataLocation glad_debug_glGetFragDataLocation
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC glad_debug_glProgramUniform3fv;
#define glProgramUniform3fv glad_debug_glProgramUniform3fv
GLAD_API_CALL PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
GLAD_API_CALL PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_debug_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation glad_debug_glGetSubroutineUniformLocation
GLAD_API_CALL PFNGLHINTPROC glad_glHint;
GLAD_API_CALL PFNGLHINTPROC glad_debug_glHint;
#define glHint glad_debug_glHint
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC glad_debug_glGetSamplerParameteriv;
#define glGetSamplerParameteriv glad_debug_glGetSamplerParameteriv
GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData;
#define glCopyBufferSubData glad_debug_glCopyBufferSubData
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVPROC glad_debug_glVertexAttribI1uiv;
#define glVertexAttribI1uiv glad_debug_glVertexAttribI1uiv
GLAD_API_CALL PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
GLAD_API_CALL PFNGLVERTEXATTRIB2DPROC glad_debug_glVertexAttrib2d;
#define glVertexAttrib2d glad_debug_glVertexAttrib2d
GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC glad_debug_glVertexAttrib2f;
#define glVertexAttrib2f glad_debug_glVertexAttrib2f
GLAD_API_CALL PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
GLAD_API_CALL PFNGLVERTEXATTRIB3DVPROC glad_debug_glVertexAttrib3dv;
#define glVertexAttrib3dv glad_debug_glVertexAttrib3dv
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VPROC glad_debug_glGetQueryObjectui64v;
#define glGetQueryObjectui64v glad_debug_glGetQueryObjectui64v
GLAD_API_CALL PFNGLDEPTHMASKPROC glad_glDepthMask;
GLAD_API_CALL PFNGLDEPTHMASKPROC glad_debug_glDepthMask;
#define glDepthMask glad_debug_glDepthMask
GLAD_API_CALL PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
GLAD_API_CALL PFNGLVERTEXATTRIB2SPROC glad_debug_glVertexAttrib2s;
#define glVertexAttrib2s glad_debug_glVertexAttrib2s
GLAD_API_CALL PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
GLAD_API_CALL PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_debug_glTexImage3DMultisample;
#define glTexImage3DMultisample glad_debug_glTexImage3DMultisample
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC glad_debug_glProgramUniform1fv;
#define glProgramUniform1fv glad_debug_glProgramUniform1fv
GLAD_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
GLAD_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC glad_debug_glGetUniformBlockIndex;
#define glGetUniformBlockIndex glad_debug_glGetUniformBlockIndex
GLAD_API_CALL PFNGLUNIFORM4FVPROC glad_glUniform4fv;
GLAD_API_CALL PFNGLUNIFORM4FVPROC glad_debug_glUniform4fv;
#define glUniform4fv glad_debug_glUniform4fv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC glad_debug_glGetActiveUniform;
#define glGetActiveUniform glad_debug_glGetActiveUniform
GLAD_API_CALL PFNGLFRONTFACEPROC glad_glFrontFace;
GLAD_API_CALL PFNGLFRONTFACEPROC glad_debug_glFrontFace;
#define glFrontFace glad_debug_glFrontFace
GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC glad_debug_glDeleteProgramPipelines;
#define glDeleteProgramPipelines glad_debug_glDeleteProgramPipelines


GLAD_API_CALL int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGL( GLADloadfunc load);



GLAD_API_CALL void gladSetGLPreCallback(GLADprecallback cb);
GLAD_API_CALL void gladSetGLPostCallback(GLADpostcallback cb);


#ifdef GLAD_GL

GLAD_API_CALL int gladLoaderLoadGL(void);

#endif

#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef GLAD_GL_IMPLEMENTATION
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */


int GLAD_GL_VERSION_1_0 = 0;
int GLAD_GL_VERSION_1_1 = 0;
int GLAD_GL_VERSION_1_2 = 0;
int GLAD_GL_VERSION_1_3 = 0;
int GLAD_GL_VERSION_1_4 = 0;
int GLAD_GL_VERSION_1_5 = 0;
int GLAD_GL_VERSION_2_0 = 0;
int GLAD_GL_VERSION_2_1 = 0;
int GLAD_GL_VERSION_3_0 = 0;
int GLAD_GL_VERSION_3_1 = 0;
int GLAD_GL_VERSION_3_2 = 0;
int GLAD_GL_VERSION_3_3 = 0;
int GLAD_GL_VERSION_4_0 = 0;
int GLAD_GL_VERSION_4_1 = 0;
int GLAD_GL_3DFX_multisample = 0;
int GLAD_GL_ARB_robustness = 0;


void _pre_call_gl_callback_default(const char *name, GLADapiproc apiproc, int len_args, ...) {
    (void) len_args;

    if (apiproc == NULL) {
        fprintf(stderr, "GLAD: ERROR %s is NULL!\n", name);
        return;
    }
    if (glad_glGetError == NULL) {
        fprintf(stderr, "GLAD: ERROR glGetError is NULL!\n");
        return;
    }

    (void) glad_glGetError();
}
void _post_call_gl_callback_default(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...) {
    GLenum error_code;

    (void) ret;
    (void) apiproc;
    (void) len_args;

    error_code = glad_glGetError();

    if (error_code != GL_NO_ERROR) {
        fprintf(stderr, "GLAD: ERROR %d in %s!\n", error_code, name);
    }
}

static GLADprecallback _pre_call_gl_callback = _pre_call_gl_callback_default;
void gladSetglPreCallback(GLADprecallback cb) {
    _pre_call_gl_callback = cb;
}
static GLADpostcallback _post_call_gl_callback = _post_call_gl_callback_default;
void gladSetglPostCallback(GLADpostcallback cb) {
    _post_call_gl_callback = cb;
}

PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexImage1D(GLenum arg0, GLint arg1, GLenum arg2, GLint arg3, GLint arg4, GLsizei arg5, GLint arg6) {
    _pre_call_gl_callback("glCopyTexImage1D", (GLADapiproc) glCopyTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glCopyTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glCopyTexImage1D", (GLADapiproc) glCopyTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D = glad_debug_impl_glCopyTexImage1D;
PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI3ui(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribI3ui", (GLADapiproc) glVertexAttribI3ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribI3ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribI3ui", (GLADapiproc) glVertexAttribI3ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBI3UIPROC glad_debug_glVertexAttribI3ui = glad_debug_impl_glVertexAttribI3ui;
PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilMaskSeparate(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glStencilMaskSeparate", (GLADapiproc) glStencilMaskSeparate, 2, arg0, arg1);
    glStencilMaskSeparate(arg0, arg1);
    _post_call_gl_callback(NULL, "glStencilMaskSeparate", (GLADapiproc) glStencilMaskSeparate, 2, arg0, arg1);
    
}
PFNGLSTENCILMASKSEPARATEPROC glad_debug_glStencilMaskSeparate = glad_debug_impl_glStencilMaskSeparate;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4fv", (GLADapiproc) glProgramUniformMatrix4fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4fv", (GLADapiproc) glProgramUniformMatrix4fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_debug_glProgramUniformMatrix4fv = glad_debug_impl_glProgramUniformMatrix4fv;
PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferRenderbuffer(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_gl_callback("glFramebufferRenderbuffer", (GLADapiproc) glFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);
    glFramebufferRenderbuffer(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glFramebufferRenderbuffer", (GLADapiproc) glFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_debug_glFramebufferRenderbuffer = glad_debug_impl_glFramebufferRenderbuffer;
PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformSubroutinesuiv(GLenum arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniformSubroutinesuiv", (GLADapiproc) glUniformSubroutinesuiv, 3, arg0, arg1, arg2);
    glUniformSubroutinesuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniformSubroutinesuiv", (GLADapiproc) glUniformSubroutinesuiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORMSUBROUTINESUIVPROC glad_debug_glUniformSubroutinesuiv = glad_debug_impl_glUniformSubroutinesuiv;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLsizei arg9, const void * arg10) {
    _pre_call_gl_callback("glCompressedTexSubImage3D", (GLADapiproc) glCompressedTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    glCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_gl_callback(NULL, "glCompressedTexSubImage3D", (GLADapiproc) glCompressedTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
}
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D = glad_debug_impl_glCompressedTexSubImage3D;
PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetDoublei_v(GLenum arg0, GLuint arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetDoublei_v", (GLADapiproc) glGetDoublei_v, 3, arg0, arg1, arg2);
    glGetDoublei_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetDoublei_v", (GLADapiproc) glGetDoublei_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETDOUBLEI_VPROC glad_debug_glGetDoublei_v = glad_debug_impl_glGetDoublei_v;
PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib1sv", (GLADapiproc) glVertexAttrib1sv, 2, arg0, arg1);
    glVertexAttrib1sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1sv", (GLADapiproc) glVertexAttrib1sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1SVPROC glad_debug_glVertexAttrib1sv = glad_debug_impl_glVertexAttrib1sv;
PFNGLBINDSAMPLERPROC glad_glBindSampler = NULL;
void GLAD_API_PTR glad_debug_impl_glBindSampler(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindSampler", (GLADapiproc) glBindSampler, 2, arg0, arg1);
    glBindSampler(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindSampler", (GLADapiproc) glBindSampler, 2, arg0, arg1);
    
}
PFNGLBINDSAMPLERPROC glad_debug_glBindSampler = glad_debug_impl_glBindSampler;
PFNGLLINEWIDTHPROC glad_glLineWidth = NULL;
void GLAD_API_PTR glad_debug_impl_glLineWidth(GLfloat arg0) {
    _pre_call_gl_callback("glLineWidth", (GLADapiproc) glLineWidth, 1, arg0);
    glLineWidth(arg0);
    _post_call_gl_callback(NULL, "glLineWidth", (GLADapiproc) glLineWidth, 1, arg0);
    
}
PFNGLLINEWIDTHPROC glad_debug_glLineWidth = glad_debug_impl_glLineWidth;
PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetIntegeri_v(GLenum arg0, GLuint arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetIntegeri_v", (GLADapiproc) glGetIntegeri_v, 3, arg0, arg1, arg2);
    glGetIntegeri_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetIntegeri_v", (GLADapiproc) glGetIntegeri_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETINTEGERI_VPROC glad_debug_glGetIntegeri_v = glad_debug_impl_glGetIntegeri_v;
PFNGLCOMPILESHADERPROC glad_glCompileShader = NULL;
void GLAD_API_PTR glad_debug_impl_glCompileShader(GLuint arg0) {
    _pre_call_gl_callback("glCompileShader", (GLADapiproc) glCompileShader, 1, arg0);
    glCompileShader(arg0);
    _post_call_gl_callback(NULL, "glCompileShader", (GLADapiproc) glCompileShader, 1, arg0);
    
}
PFNGLCOMPILESHADERPROC glad_debug_glCompileShader = glad_debug_impl_glCompileShader;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTransformFeedbackVarying(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLsizei * arg4, GLenum * arg5, GLchar * arg6) {
    _pre_call_gl_callback("glGetTransformFeedbackVarying", (GLADapiproc) glGetTransformFeedbackVarying, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glGetTransformFeedbackVarying", (GLADapiproc) glGetTransformFeedbackVarying, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_debug_glGetTransformFeedbackVarying = glad_debug_impl_glGetTransformFeedbackVarying;
PFNGLDEPTHRANGEFPROC glad_glDepthRangef = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthRangef(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glDepthRangef", (GLADapiproc) glDepthRangef, 2, arg0, arg1);
    glDepthRangef(arg0, arg1);
    _post_call_gl_callback(NULL, "glDepthRangef", (GLADapiproc) glDepthRangef, 2, arg0, arg1);
    
}
PFNGLDEPTHRANGEFPROC glad_debug_glDepthRangef = glad_debug_impl_glDepthRangef;
PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribIPointer(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void * arg4) {
    _pre_call_gl_callback("glVertexAttribIPointer", (GLADapiproc) glVertexAttribIPointer, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribIPointer", (GLADapiproc) glVertexAttribIPointer, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBIPOINTERPROC glad_debug_glVertexAttribIPointer = glad_debug_impl_glVertexAttribIPointer;
PFNGLENABLEIPROC glad_glEnablei = NULL;
void GLAD_API_PTR glad_debug_impl_glEnablei(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glEnablei", (GLADapiproc) glEnablei, 2, arg0, arg1);
    glEnablei(arg0, arg1);
    _post_call_gl_callback(NULL, "glEnablei", (GLADapiproc) glEnablei, 2, arg0, arg1);
    
}
PFNGLENABLEIPROC glad_debug_glEnablei = glad_debug_impl_glEnablei;
PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveSubroutineName(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, GLsizei * arg4, GLchar * arg5) {
    _pre_call_gl_callback("glGetActiveSubroutineName", (GLADapiproc) glGetActiveSubroutineName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetActiveSubroutineName(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetActiveSubroutineName", (GLADapiproc) glGetActiveSubroutineName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETACTIVESUBROUTINENAMEPROC glad_debug_glGetActiveSubroutineName = glad_debug_impl_glGetActiveSubroutineName;
PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP4ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribP4ui", (GLADapiproc) glVertexAttribP4ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP4ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP4ui", (GLADapiproc) glVertexAttribP4ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui = glad_debug_impl_glVertexAttribP4ui;
PFNGLCREATESHADERPROC glad_glCreateShader = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glCreateShader(GLenum arg0) {
    GLuint ret;
    _pre_call_gl_callback("glCreateShader", (GLADapiproc) glCreateShader, 1, arg0);
    ret = glCreateShader(arg0);
    _post_call_gl_callback((void*) &ret, "glCreateShader", (GLADapiproc) glCreateShader, 1, arg0);
    return ret;
}
PFNGLCREATESHADERPROC glad_debug_glCreateShader = glad_debug_impl_glCreateShader;
PFNGLISBUFFERPROC glad_glIsBuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsBuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsBuffer", (GLADapiproc) glIsBuffer, 1, arg0);
    ret = glIsBuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glIsBuffer", (GLADapiproc) glIsBuffer, 1, arg0);
    return ret;
}
PFNGLISBUFFERPROC glad_debug_glIsBuffer = glad_debug_impl_glIsBuffer;
PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetMultisamplefv(GLenum arg0, GLuint arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetMultisamplefv", (GLADapiproc) glGetMultisamplefv, 3, arg0, arg1, arg2);
    glGetMultisamplefv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetMultisamplefv", (GLADapiproc) glGetMultisamplefv, 3, arg0, arg1, arg2);
    
}
PFNGLGETMULTISAMPLEFVPROC glad_debug_glGetMultisamplefv = glad_debug_impl_glGetMultisamplefv;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2dv", (GLADapiproc) glProgramUniformMatrix2dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2dv", (GLADapiproc) glProgramUniformMatrix2dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_debug_glProgramUniformMatrix2dv = glad_debug_impl_glProgramUniformMatrix2dv;
PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glGenRenderbuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenRenderbuffers", (GLADapiproc) glGenRenderbuffers, 2, arg0, arg1);
    glGenRenderbuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenRenderbuffers", (GLADapiproc) glGenRenderbuffers, 2, arg0, arg1);
    
}
PFNGLGENRENDERBUFFERSPROC glad_debug_glGenRenderbuffers = glad_debug_impl_glGenRenderbuffers;
PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7) {
    _pre_call_gl_callback("glCopyTexSubImage2D", (GLADapiproc) glCopyTexSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glCopyTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glCopyTexSubImage2D", (GLADapiproc) glCopyTexSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D = glad_debug_impl_glCopyTexSubImage2D;
PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1d(GLuint arg0, GLdouble arg1) {
    _pre_call_gl_callback("glVertexAttrib1d", (GLADapiproc) glVertexAttrib1d, 2, arg0, arg1);
    glVertexAttrib1d(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1d", (GLADapiproc) glVertexAttrib1d, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1DPROC glad_debug_glVertexAttrib1d = glad_debug_impl_glVertexAttrib1d;
PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1f(GLuint arg0, GLfloat arg1) {
    _pre_call_gl_callback("glVertexAttrib1f", (GLADapiproc) glVertexAttrib1f, 2, arg0, arg1);
    glVertexAttrib1f(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1f", (GLADapiproc) glVertexAttrib1f, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1FPROC glad_debug_glVertexAttrib1f = glad_debug_impl_glVertexAttrib1f;
PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendFuncSeparate(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_gl_callback("glBlendFuncSeparate", (GLADapiproc) glBlendFuncSeparate, 4, arg0, arg1, arg2, arg3);
    glBlendFuncSeparate(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBlendFuncSeparate", (GLADapiproc) glBlendFuncSeparate, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate = glad_debug_impl_glBlendFuncSeparate;
PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading = NULL;
void GLAD_API_PTR glad_debug_impl_glMinSampleShading(GLfloat arg0) {
    _pre_call_gl_callback("glMinSampleShading", (GLADapiproc) glMinSampleShading, 1, arg0);
    glMinSampleShading(arg0);
    _post_call_gl_callback(NULL, "glMinSampleShading", (GLADapiproc) glMinSampleShading, 1, arg0);
    
}
PFNGLMINSAMPLESHADINGPROC glad_debug_glMinSampleShading = glad_debug_impl_glMinSampleShading;
PFNGLDRAWBUFFERSPROC glad_glDrawBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawBuffers(GLsizei arg0, const GLenum * arg1) {
    _pre_call_gl_callback("glDrawBuffers", (GLADapiproc) glDrawBuffers, 2, arg0, arg1);
    glDrawBuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDrawBuffers", (GLADapiproc) glDrawBuffers, 2, arg0, arg1);
    
}
PFNGLDRAWBUFFERSPROC glad_debug_glDrawBuffers = glad_debug_impl_glDrawBuffers;
PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1s(GLuint arg0, GLshort arg1) {
    _pre_call_gl_callback("glVertexAttrib1s", (GLADapiproc) glVertexAttrib1s, 2, arg0, arg1);
    glVertexAttrib1s(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1s", (GLADapiproc) glVertexAttrib1s, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1SPROC glad_debug_glVertexAttrib1s = glad_debug_impl_glVertexAttrib1s;
PFNGLSAMPLEMASKIPROC glad_glSampleMaski = NULL;
void GLAD_API_PTR glad_debug_impl_glSampleMaski(GLuint arg0, GLbitfield arg1) {
    _pre_call_gl_callback("glSampleMaski", (GLADapiproc) glSampleMaski, 2, arg0, arg1);
    glSampleMaski(arg0, arg1);
    _post_call_gl_callback(NULL, "glSampleMaski", (GLADapiproc) glSampleMaski, 2, arg0, arg1);
    
}
PFNGLSAMPLEMASKIPROC glad_debug_glSampleMaski = glad_debug_impl_glSampleMaski;
PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3x2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix3x2fv", (GLADapiproc) glUniformMatrix3x2fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3x2fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3x2fv", (GLADapiproc) glUniformMatrix3x2fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3X2FVPROC glad_debug_glUniformMatrix3x2fv = glad_debug_impl_glUniformMatrix3x2fv;
PFNGLPOINTSIZEPROC glad_glPointSize = NULL;
void GLAD_API_PTR glad_debug_impl_glPointSize(GLfloat arg0) {
    _pre_call_gl_callback("glPointSize", (GLADapiproc) glPointSize, 1, arg0);
    glPointSize(arg0);
    _post_call_gl_callback(NULL, "glPointSize", (GLADapiproc) glPointSize, 1, arg0);
    
}
PFNGLPOINTSIZEPROC glad_debug_glPointSize = glad_debug_impl_glPointSize;
PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttrib2dv", (GLADapiproc) glVertexAttrib2dv, 2, arg0, arg1);
    glVertexAttrib2dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib2dv", (GLADapiproc) glVertexAttrib2dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB2DVPROC glad_debug_glVertexAttrib2dv = glad_debug_impl_glVertexAttrib2dv;
PFNGLDELETEPROGRAMPROC glad_glDeleteProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteProgram(GLuint arg0) {
    _pre_call_gl_callback("glDeleteProgram", (GLADapiproc) glDeleteProgram, 1, arg0);
    glDeleteProgram(arg0);
    _post_call_gl_callback(NULL, "glDeleteProgram", (GLADapiproc) glDeleteProgram, 1, arg0);
    
}
PFNGLDELETEPROGRAMPROC glad_debug_glDeleteProgram = glad_debug_impl_glDeleteProgram;
PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nuiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nuiv", (GLADapiproc) glVertexAttrib4Nuiv, 2, arg0, arg1);
    glVertexAttrib4Nuiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nuiv", (GLADapiproc) glVertexAttrib4Nuiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NUIVPROC glad_debug_glVertexAttrib4Nuiv = glad_debug_impl_glVertexAttrib4Nuiv;
PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3x4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix3x4fv", (GLADapiproc) glUniformMatrix3x4fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3x4fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3x4fv", (GLADapiproc) glUniformMatrix3x4fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3X4FVPROC glad_debug_glUniformMatrix3x4fv = glad_debug_impl_glUniformMatrix3x4fv;
PFNGLWAITSYNCPROC glad_glWaitSync = NULL;
void GLAD_API_PTR glad_debug_impl_glWaitSync(GLsync arg0, GLbitfield arg1, GLuint64 arg2) {
    _pre_call_gl_callback("glWaitSync", (GLADapiproc) glWaitSync, 3, arg0, arg1, arg2);
    glWaitSync(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glWaitSync", (GLADapiproc) glWaitSync, 3, arg0, arg1, arg2);
    
}
PFNGLWAITSYNCPROC glad_debug_glWaitSync = glad_debug_impl_glWaitSync;
PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage = NULL;
void GLAD_API_PTR glad_debug_impl_glRenderbufferStorage(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glRenderbufferStorage", (GLADapiproc) glRenderbufferStorage, 4, arg0, arg1, arg2, arg3);
    glRenderbufferStorage(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glRenderbufferStorage", (GLADapiproc) glRenderbufferStorage, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLRENDERBUFFERSTORAGEPROC glad_debug_glRenderbufferStorage = glad_debug_impl_glRenderbufferStorage;
PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4x3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix4x3fv", (GLADapiproc) glUniformMatrix4x3fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4x3fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4x3fv", (GLADapiproc) glUniformMatrix4x3fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4X3FVPROC glad_debug_glUniformMatrix4x3fv = glad_debug_impl_glUniformMatrix4x3fv;
PFNGLUNIFORM3IPROC glad_glUniform3i = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3i(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glUniform3i", (GLADapiproc) glUniform3i, 4, arg0, arg1, arg2, arg3);
    glUniform3i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniform3i", (GLADapiproc) glUniform3i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORM3IPROC glad_debug_glUniform3i = glad_debug_impl_glUniform3i;
PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferfv(GLenum arg0, GLint arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glClearBufferfv", (GLADapiproc) glClearBufferfv, 3, arg0, arg1, arg2);
    glClearBufferfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glClearBufferfv", (GLADapiproc) glClearBufferfv, 3, arg0, arg1, arg2);
    
}
PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv = glad_debug_impl_glClearBufferfv;
PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1ui(GLuint arg0, GLint arg1, GLuint arg2) {
    _pre_call_gl_callback("glProgramUniform1ui", (GLADapiproc) glProgramUniform1ui, 3, arg0, arg1, arg2);
    glProgramUniform1ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramUniform1ui", (GLADapiproc) glProgramUniform1ui, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMUNIFORM1UIPROC glad_debug_glProgramUniform1ui = glad_debug_impl_glProgramUniform1ui;
PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendEquationSeparatei(GLuint arg0, GLenum arg1, GLenum arg2) {
    _pre_call_gl_callback("glBlendEquationSeparatei", (GLADapiproc) glBlendEquationSeparatei, 3, arg0, arg1, arg2);
    glBlendEquationSeparatei(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBlendEquationSeparatei", (GLADapiproc) glBlendEquationSeparatei, 3, arg0, arg1, arg2);
    
}
PFNGLBLENDEQUATIONSEPARATEIPROC glad_debug_glBlendEquationSeparatei = glad_debug_impl_glBlendEquationSeparatei;
PFNGLUNIFORM3DPROC glad_glUniform3d = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3d(GLint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glUniform3d", (GLADapiproc) glUniform3d, 4, arg0, arg1, arg2, arg3);
    glUniform3d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniform3d", (GLADapiproc) glUniform3d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORM3DPROC glad_debug_glUniform3d = glad_debug_impl_glUniform3d;
PFNGLUNIFORM3FPROC glad_glUniform3f = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3f(GLint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glUniform3f", (GLADapiproc) glUniform3f, 4, arg0, arg1, arg2, arg3);
    glUniform3f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniform3f", (GLADapiproc) glUniform3f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORM3FPROC glad_debug_glUniform3f = glad_debug_impl_glUniform3f;
PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4ubv(GLuint arg0, const GLubyte * arg1) {
    _pre_call_gl_callback("glVertexAttrib4ubv", (GLADapiproc) glVertexAttrib4ubv, 2, arg0, arg1);
    glVertexAttrib4ubv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4ubv", (GLADapiproc) glVertexAttrib4ubv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4UBVPROC glad_debug_glVertexAttrib4ubv = glad_debug_impl_glVertexAttrib4ubv;
PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBufferParameteriv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetBufferParameteriv", (GLADapiproc) glGetBufferParameteriv, 3, arg0, arg1, arg2);
    glGetBufferParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetBufferParameteriv", (GLADapiproc) glGetBufferParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETBUFFERPARAMETERIVPROC glad_debug_glGetBufferParameteriv = glad_debug_impl_glGetBufferParameteriv;
PFNGLCOLORMASKIPROC glad_glColorMaski = NULL;
void GLAD_API_PTR glad_debug_impl_glColorMaski(GLuint arg0, GLboolean arg1, GLboolean arg2, GLboolean arg3, GLboolean arg4) {
    _pre_call_gl_callback("glColorMaski", (GLADapiproc) glColorMaski, 5, arg0, arg1, arg2, arg3, arg4);
    glColorMaski(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glColorMaski", (GLADapiproc) glColorMaski, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCOLORMASKIPROC glad_debug_glColorMaski = glad_debug_impl_glColorMaski;
PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferfi(GLenum arg0, GLint arg1, GLfloat arg2, GLint arg3) {
    _pre_call_gl_callback("glClearBufferfi", (GLADapiproc) glClearBufferfi, 4, arg0, arg1, arg2, arg3);
    glClearBufferfi(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glClearBufferfi", (GLADapiproc) glClearBufferfi, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi = glad_debug_impl_glClearBufferfi;
PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawArraysIndirect(GLenum arg0, const void * arg1) {
    _pre_call_gl_callback("glDrawArraysIndirect", (GLADapiproc) glDrawArraysIndirect, 2, arg0, arg1);
    glDrawArraysIndirect(arg0, arg1);
    _post_call_gl_callback(NULL, "glDrawArraysIndirect", (GLADapiproc) glDrawArraysIndirect, 2, arg0, arg1);
    
}
PFNGLDRAWARRAYSINDIRECTPROC glad_debug_glDrawArraysIndirect = glad_debug_impl_glDrawArraysIndirect;
PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glGenVertexArrays(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenVertexArrays", (GLADapiproc) glGenVertexArrays, 2, arg0, arg1);
    glGenVertexArrays(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenVertexArrays", (GLADapiproc) glGenVertexArrays, 2, arg0, arg1);
    
}
PFNGLGENVERTEXARRAYSPROC glad_debug_glGenVertexArrays = glad_debug_impl_glGenVertexArrays;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3x2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3x2dv", (GLADapiproc) glProgramUniformMatrix3x2dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3x2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3x2dv", (GLADapiproc) glProgramUniformMatrix3x2dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_debug_glProgramUniformMatrix3x2dv = glad_debug_impl_glProgramUniformMatrix3x2dv;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3x2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3x2fv", (GLADapiproc) glProgramUniformMatrix3x2fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3x2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3x2fv", (GLADapiproc) glProgramUniformMatrix3x2fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_debug_glProgramUniformMatrix3x2fv = glad_debug_impl_glProgramUniformMatrix3x2fv;
PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSamplerParameterIiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetSamplerParameterIiv", (GLADapiproc) glGetSamplerParameterIiv, 3, arg0, arg1, arg2);
    glGetSamplerParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetSamplerParameterIiv", (GLADapiproc) glGetSamplerParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSAMPLERPARAMETERIIVPROC glad_debug_glGetSamplerParameterIiv = glad_debug_impl_glGetSamplerParameterIiv;
PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetFragDataIndex(GLuint arg0, const GLchar * arg1) {
    GLint ret;
    _pre_call_gl_callback("glGetFragDataIndex", (GLADapiproc) glGetFragDataIndex, 2, arg0, arg1);
    ret = glGetFragDataIndex(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetFragDataIndex", (GLADapiproc) glGetFragDataIndex, 2, arg0, arg1);
    return ret;
}
PFNGLGETFRAGDATAINDEXPROC glad_debug_glGetFragDataIndex = glad_debug_impl_glGetFragDataIndex;
PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL4d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glVertexAttribL4d", (GLADapiproc) glVertexAttribL4d, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribL4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribL4d", (GLADapiproc) glVertexAttribL4d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d = glad_debug_impl_glVertexAttribL4d;
PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribdv(GLuint arg0, GLenum arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetVertexAttribdv", (GLADapiproc) glGetVertexAttribdv, 3, arg0, arg1, arg2);
    glGetVertexAttribdv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribdv", (GLADapiproc) glGetVertexAttribdv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBDVPROC glad_debug_glGetVertexAttribdv = glad_debug_impl_glGetVertexAttribdv;
PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glActiveShaderProgram(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glActiveShaderProgram", (GLADapiproc) glActiveShaderProgram, 2, arg0, arg1);
    glActiveShaderProgram(arg0, arg1);
    _post_call_gl_callback(NULL, "glActiveShaderProgram", (GLADapiproc) glActiveShaderProgram, 2, arg0, arg1);
    
}
PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram = glad_debug_impl_glActiveShaderProgram;
PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix3dv", (GLADapiproc) glUniformMatrix3dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3dv", (GLADapiproc) glUniformMatrix3dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3DVPROC glad_debug_glUniformMatrix3dv = glad_debug_impl_glUniformMatrix3dv;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3x4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3x4dv", (GLADapiproc) glProgramUniformMatrix3x4dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3x4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3x4dv", (GLADapiproc) glProgramUniformMatrix3x4dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_debug_glProgramUniformMatrix3x4dv = glad_debug_impl_glProgramUniformMatrix3x4dv;
PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glResumeTransformFeedback(void) {
    _pre_call_gl_callback("glResumeTransformFeedback", (GLADapiproc) glResumeTransformFeedback, 0);
    glResumeTransformFeedback();
    _post_call_gl_callback(NULL, "glResumeTransformFeedback", (GLADapiproc) glResumeTransformFeedback, 0);
    
}
PFNGLRESUMETRANSFORMFEEDBACKPROC glad_debug_glResumeTransformFeedback = glad_debug_impl_glResumeTransformFeedback;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4x3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4x3fv", (GLADapiproc) glProgramUniformMatrix4x3fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4x3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4x3fv", (GLADapiproc) glProgramUniformMatrix4x3fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_debug_glProgramUniformMatrix4x3fv = glad_debug_impl_glProgramUniformMatrix4x3fv;
PFNGLGETQUERYIVPROC glad_glGetQueryiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryiv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetQueryiv", (GLADapiproc) glGetQueryiv, 3, arg0, arg1, arg2);
    glGetQueryiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryiv", (GLADapiproc) glGetQueryiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYIVPROC glad_debug_glGetQueryiv = glad_debug_impl_glGetQueryiv;
PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteFramebuffers(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteFramebuffers", (GLADapiproc) glDeleteFramebuffers, 2, arg0, arg1);
    glDeleteFramebuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteFramebuffers", (GLADapiproc) glDeleteFramebuffers, 2, arg0, arg1);
    
}
PFNGLDELETEFRAMEBUFFERSPROC glad_debug_glDeleteFramebuffers = glad_debug_impl_glDeleteFramebuffers;
PFNGLDRAWARRAYSPROC glad_glDrawArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawArrays(GLenum arg0, GLint arg1, GLsizei arg2) {
    _pre_call_gl_callback("glDrawArrays", (GLADapiproc) glDrawArrays, 3, arg0, arg1, arg2);
    glDrawArrays(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDrawArrays", (GLADapiproc) glDrawArrays, 3, arg0, arg1, arg2);
    
}
PFNGLDRAWARRAYSPROC glad_debug_glDrawArrays = glad_debug_impl_glDrawArrays;
PFNGLUNIFORM1UIPROC glad_glUniform1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1ui(GLint arg0, GLuint arg1) {
    _pre_call_gl_callback("glUniform1ui", (GLADapiproc) glUniform1ui, 2, arg0, arg1);
    glUniform1ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glUniform1ui", (GLADapiproc) glUniform1ui, 2, arg0, arg1);
    
}
PFNGLUNIFORM1UIPROC glad_debug_glUniform1ui = glad_debug_impl_glUniform1ui;
PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnTexImageARB(GLenum arg0, GLint arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void * arg5) {
    _pre_call_gl_callback("glGetnTexImageARB", (GLADapiproc) glGetnTexImageARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetnTexImageARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetnTexImageARB", (GLADapiproc) glGetnTexImageARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETNTEXIMAGEARBPROC glad_debug_glGetnTexImageARB = glad_debug_impl_glGetnTexImageARB;
PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI2i(GLuint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glVertexAttribI2i", (GLADapiproc) glVertexAttribI2i, 3, arg0, arg1, arg2);
    glVertexAttribI2i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttribI2i", (GLADapiproc) glVertexAttribI2i, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIBI2IPROC glad_debug_glVertexAttribI2i = glad_debug_impl_glVertexAttribI2i;
PFNGLCLEARPROC glad_glClear = NULL;
void GLAD_API_PTR glad_debug_impl_glClear(GLbitfield arg0) {
    _pre_call_gl_callback("glClear", (GLADapiproc) glClear, 1, arg0);
    glClear(arg0);
    _post_call_gl_callback(NULL, "glClear", (GLADapiproc) glClear, 1, arg0);
    
}
PFNGLCLEARPROC glad_debug_glClear = glad_debug_impl_glClear;
PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glProgramParameteri", (GLADapiproc) glProgramParameteri, 3, arg0, arg1, arg2);
    glProgramParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramParameteri", (GLADapiproc) glProgramParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMPARAMETERIPROC glad_debug_glProgramParameteri = glad_debug_impl_glProgramParameteri;
PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniformName(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLchar * arg4) {
    _pre_call_gl_callback("glGetActiveUniformName", (GLADapiproc) glGetActiveUniformName, 5, arg0, arg1, arg2, arg3, arg4);
    glGetActiveUniformName(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetActiveUniformName", (GLADapiproc) glGetActiveUniformName, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETACTIVEUNIFORMNAMEPROC glad_debug_glGetActiveUniformName = glad_debug_impl_glGetActiveUniformName;
PFNGLISENABLEDPROC glad_glIsEnabled = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsEnabled(GLenum arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsEnabled", (GLADapiproc) glIsEnabled, 1, arg0);
    ret = glIsEnabled(arg0);
    _post_call_gl_callback((void*) &ret, "glIsEnabled", (GLADapiproc) glIsEnabled, 1, arg0);
    return ret;
}
PFNGLISENABLEDPROC glad_debug_glIsEnabled = glad_debug_impl_glIsEnabled;
PFNGLSTENCILOPPROC glad_glStencilOp = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilOp(GLenum arg0, GLenum arg1, GLenum arg2) {
    _pre_call_gl_callback("glStencilOp", (GLADapiproc) glStencilOp, 3, arg0, arg1, arg2);
    glStencilOp(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glStencilOp", (GLADapiproc) glStencilOp, 3, arg0, arg1, arg2);
    
}
PFNGLSTENCILOPPROC glad_debug_glStencilOp = glad_debug_impl_glStencilOp;
PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTexture2D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_gl_callback("glFramebufferTexture2D", (GLADapiproc) glFramebufferTexture2D, 5, arg0, arg1, arg2, arg3, arg4);
    glFramebufferTexture2D(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glFramebufferTexture2D", (GLADapiproc) glFramebufferTexture2D, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLFRAMEBUFFERTEXTURE2DPROC glad_debug_glFramebufferTexture2D = glad_debug_impl_glFramebufferTexture2D;
PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_gl_callback("glProgramUniform2ui", (GLADapiproc) glProgramUniform2ui, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2ui", (GLADapiproc) glProgramUniform2ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2UIPROC glad_debug_glProgramUniform2ui = glad_debug_impl_glProgramUniform2ui;
PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nub(GLuint arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3, GLubyte arg4) {
    _pre_call_gl_callback("glVertexAttrib4Nub", (GLADapiproc) glVertexAttrib4Nub, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttrib4Nub(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nub", (GLADapiproc) glVertexAttrib4Nub, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIB4NUBPROC glad_debug_glVertexAttrib4Nub = glad_debug_impl_glVertexAttrib4Nub;
PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase = NULL;
void GLAD_API_PTR glad_debug_impl_glBindBufferBase(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glBindBufferBase", (GLADapiproc) glBindBufferBase, 3, arg0, arg1, arg2);
    glBindBufferBase(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindBufferBase", (GLADapiproc) glBindBufferBase, 3, arg0, arg1, arg2);
    
}
PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase = glad_debug_impl_glBindBufferBase;
PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsIndirect(GLenum arg0, GLenum arg1, const void * arg2) {
    _pre_call_gl_callback("glDrawElementsIndirect", (GLADapiproc) glDrawElementsIndirect, 3, arg0, arg1, arg2);
    glDrawElementsIndirect(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDrawElementsIndirect", (GLADapiproc) glDrawElementsIndirect, 3, arg0, arg1, arg2);
    
}
PFNGLDRAWELEMENTSINDIRECTPROC glad_debug_glDrawElementsIndirect = glad_debug_impl_glDrawElementsIndirect;
PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameteriv(GLenum arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glTexParameteriv", (GLADapiproc) glTexParameteriv, 3, arg0, arg1, arg2);
    glTexParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameteriv", (GLADapiproc) glTexParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERIVPROC glad_debug_glTexParameteriv = glad_debug_impl_glTexParameteriv;
PFNGLGETTEXIMAGEPROC glad_glGetTexImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexImage(GLenum arg0, GLint arg1, GLenum arg2, GLenum arg3, void * arg4) {
    _pre_call_gl_callback("glGetTexImage", (GLADapiproc) glGetTexImage, 5, arg0, arg1, arg2, arg3, arg4);
    glGetTexImage(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetTexImage", (GLADapiproc) glGetTexImage, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETTEXIMAGEPROC glad_debug_glGetTexImage = glad_debug_impl_glGetTexImage;
PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryObjecti64v(GLuint arg0, GLenum arg1, GLint64 * arg2) {
    _pre_call_gl_callback("glGetQueryObjecti64v", (GLADapiproc) glGetQueryObjecti64v, 3, arg0, arg1, arg2);
    glGetQueryObjecti64v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryObjecti64v", (GLADapiproc) glGetQueryObjecti64v, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYOBJECTI64VPROC glad_debug_glGetQueryObjecti64v = glad_debug_impl_glGetQueryObjecti64v;
PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glGenFramebuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenFramebuffers", (GLADapiproc) glGenFramebuffers, 2, arg0, arg1);
    glGenFramebuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenFramebuffers", (GLADapiproc) glGenFramebuffers, 2, arg0, arg1);
    
}
PFNGLGENFRAMEBUFFERSPROC glad_debug_glGenFramebuffers = glad_debug_impl_glGenFramebuffers;
PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders = NULL;
void GLAD_API_PTR glad_debug_impl_glGetAttachedShaders(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLuint * arg3) {
    _pre_call_gl_callback("glGetAttachedShaders", (GLADapiproc) glGetAttachedShaders, 4, arg0, arg1, arg2, arg3);
    glGetAttachedShaders(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetAttachedShaders", (GLADapiproc) glGetAttachedShaders, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETATTACHEDSHADERSPROC glad_debug_glGetAttachedShaders = glad_debug_impl_glGetAttachedShaders;
PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsRenderbuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsRenderbuffer", (GLADapiproc) glIsRenderbuffer, 1, arg0);
    ret = glIsRenderbuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glIsRenderbuffer", (GLADapiproc) glIsRenderbuffer, 1, arg0);
    return ret;
}
PFNGLISRENDERBUFFERPROC glad_debug_glIsRenderbuffer = glad_debug_impl_glIsRenderbuffer;
PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteVertexArrays(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteVertexArrays", (GLADapiproc) glDeleteVertexArrays, 2, arg0, arg1);
    glDeleteVertexArrays(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteVertexArrays", (GLADapiproc) glDeleteVertexArrays, 2, arg0, arg1);
    
}
PFNGLDELETEVERTEXARRAYSPROC glad_debug_glDeleteVertexArrays = glad_debug_impl_glDeleteVertexArrays;
PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange = NULL;
void * GLAD_API_PTR glad_debug_impl_glMapBufferRange(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, GLbitfield arg3) {
    void * ret;
    _pre_call_gl_callback("glMapBufferRange", (GLADapiproc) glMapBufferRange, 4, arg0, arg1, arg2, arg3);
    ret = glMapBufferRange(arg0, arg1, arg2, arg3);
    _post_call_gl_callback((void*) &ret, "glMapBufferRange", (GLADapiproc) glMapBufferRange, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLMAPBUFFERRANGEPROC glad_debug_glMapBufferRange = glad_debug_impl_glMapBufferRange;
PFNGLISVERTEXARRAYPROC glad_glIsVertexArray = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsVertexArray(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsVertexArray", (GLADapiproc) glIsVertexArray, 1, arg0);
    ret = glIsVertexArray(arg0);
    _post_call_gl_callback((void*) &ret, "glIsVertexArray", (GLADapiproc) glIsVertexArray, 1, arg0);
    return ret;
}
PFNGLISVERTEXARRAYPROC glad_debug_glIsVertexArray = glad_debug_impl_glIsVertexArray;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray = NULL;
void GLAD_API_PTR glad_debug_impl_glDisableVertexAttribArray(GLuint arg0) {
    _pre_call_gl_callback("glDisableVertexAttribArray", (GLADapiproc) glDisableVertexAttribArray, 1, arg0);
    glDisableVertexAttribArray(arg0);
    _post_call_gl_callback(NULL, "glDisableVertexAttribArray", (GLADapiproc) glDisableVertexAttribArray, 1, arg0);
    
}
PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_debug_glDisableVertexAttribArray = glad_debug_impl_glDisableVertexAttribArray;
PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint * arg3) {
    _pre_call_gl_callback("glProgramUniform2iv", (GLADapiproc) glProgramUniform2iv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2iv", (GLADapiproc) glProgramUniform2iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2IVPROC glad_debug_glProgramUniform2iv = glad_debug_impl_glProgramUniform2iv;
PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv = NULL;
void GLAD_API_PTR glad_debug_impl_glViewportArrayv(GLuint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glViewportArrayv", (GLADapiproc) glViewportArrayv, 3, arg0, arg1, arg2);
    glViewportArrayv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glViewportArrayv", (GLADapiproc) glViewportArrayv, 3, arg0, arg1, arg2);
    
}
PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv = glad_debug_impl_glViewportArrayv;
PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSamplerParameterfv(GLuint arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetSamplerParameterfv", (GLADapiproc) glGetSamplerParameterfv, 3, arg0, arg1, arg2);
    glGetSamplerParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetSamplerParameterfv", (GLADapiproc) glGetSamplerParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSAMPLERPARAMETERFVPROC glad_debug_glGetSamplerParameterfv = glad_debug_impl_glGetSamplerParameterfv;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4x2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4x2dv", (GLADapiproc) glProgramUniformMatrix4x2dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4x2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4x2dv", (GLADapiproc) glProgramUniformMatrix4x2dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_debug_glProgramUniformMatrix4x2dv = glad_debug_impl_glProgramUniformMatrix4x2dv;
PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformIndices(GLuint arg0, GLsizei arg1, const GLchar *const* arg2, GLuint * arg3) {
    _pre_call_gl_callback("glGetUniformIndices", (GLADapiproc) glGetUniformIndices, 4, arg0, arg1, arg2, arg3);
    glGetUniformIndices(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetUniformIndices", (GLADapiproc) glGetUniformIndices, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETUNIFORMINDICESPROC glad_debug_glGetUniformIndices = glad_debug_impl_glGetUniformIndices;
PFNGLISSHADERPROC glad_glIsShader = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsShader(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsShader", (GLADapiproc) glIsShader, 1, arg0);
    ret = glIsShader(arg0);
    _post_call_gl_callback((void*) &ret, "glIsShader", (GLADapiproc) glIsShader, 1, arg0);
    return ret;
}
PFNGLISSHADERPROC glad_debug_glIsShader = glad_debug_impl_glIsShader;
PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4ubv(GLuint arg0, const GLubyte * arg1) {
    _pre_call_gl_callback("glVertexAttribI4ubv", (GLADapiproc) glVertexAttribI4ubv, 2, arg0, arg1);
    glVertexAttribI4ubv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4ubv", (GLADapiproc) glVertexAttribI4ubv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4UBVPROC glad_debug_glVertexAttribI4ubv = glad_debug_impl_glVertexAttribI4ubv;
PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glPointParameteriv(GLenum arg0, const GLint * arg1) {
    _pre_call_gl_callback("glPointParameteriv", (GLADapiproc) glPointParameteriv, 2, arg0, arg1);
    glPointParameteriv(arg0, arg1);
    _post_call_gl_callback(NULL, "glPointParameteriv", (GLADapiproc) glPointParameteriv, 2, arg0, arg1);
    
}
PFNGLPOINTPARAMETERIVPROC glad_debug_glPointParameteriv = glad_debug_impl_glPointParameteriv;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2x3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2x3fv", (GLADapiproc) glProgramUniformMatrix2x3fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2x3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2x3fv", (GLADapiproc) glProgramUniformMatrix2x3fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_debug_glProgramUniformMatrix2x3fv = glad_debug_impl_glProgramUniformMatrix2x3fv;
PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniformsiv(GLuint arg0, GLsizei arg1, const GLuint * arg2, GLenum arg3, GLint * arg4) {
    _pre_call_gl_callback("glGetActiveUniformsiv", (GLADapiproc) glGetActiveUniformsiv, 5, arg0, arg1, arg2, arg3, arg4);
    glGetActiveUniformsiv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetActiveUniformsiv", (GLADapiproc) glGetActiveUniformsiv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETACTIVEUNIFORMSIVPROC glad_debug_glGetActiveUniformsiv = glad_debug_impl_glGetActiveUniformsiv;
PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendEquationi(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glBlendEquationi", (GLADapiproc) glBlendEquationi, 2, arg0, arg1);
    glBlendEquationi(arg0, arg1);
    _post_call_gl_callback(NULL, "glBlendEquationi", (GLADapiproc) glBlendEquationi, 2, arg0, arg1);
    
}
PFNGLBLENDEQUATIONIPROC glad_debug_glBlendEquationi = glad_debug_impl_glBlendEquationi;
PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetAttribLocation(GLuint arg0, const GLchar * arg1) {
    GLint ret;
    _pre_call_gl_callback("glGetAttribLocation", (GLADapiproc) glGetAttribLocation, 2, arg0, arg1);
    ret = glGetAttribLocation(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetAttribLocation", (GLADapiproc) glGetAttribLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETATTRIBLOCATIONPROC glad_debug_glGetAttribLocation = glad_debug_impl_glGetAttribLocation;
PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttrib4dv", (GLADapiproc) glVertexAttrib4dv, 2, arg0, arg1);
    glVertexAttrib4dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4dv", (GLADapiproc) glVertexAttrib4dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4DVPROC glad_debug_glVertexAttrib4dv = glad_debug_impl_glVertexAttrib4dv;
PFNGLUNIFORM2DVPROC glad_glUniform2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2dv(GLint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glUniform2dv", (GLADapiproc) glUniform2dv, 3, arg0, arg1, arg2);
    glUniform2dv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2dv", (GLADapiproc) glUniform2dv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2DVPROC glad_debug_glUniform2dv = glad_debug_impl_glUniform2dv;
PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP3ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribP3ui", (GLADapiproc) glVertexAttribP3ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP3ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP3ui", (GLADapiproc) glVertexAttribP3ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui = glad_debug_impl_glVertexAttribP3ui;
PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTexture1D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_gl_callback("glFramebufferTexture1D", (GLADapiproc) glFramebufferTexture1D, 5, arg0, arg1, arg2, arg3, arg4);
    glFramebufferTexture1D(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glFramebufferTexture1D", (GLADapiproc) glFramebufferTexture1D, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLFRAMEBUFFERTEXTURE1DPROC glad_debug_glFramebufferTexture1D = glad_debug_impl_glFramebufferTexture1D;
PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_gl_callback("glProgramUniform3ui", (GLADapiproc) glProgramUniform3ui, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniform3ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniform3ui", (GLADapiproc) glProgramUniform3ui, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORM3UIPROC glad_debug_glProgramUniform3ui = glad_debug_impl_glProgramUniform3ui;
PFNGLGETUNIFORMFVPROC glad_glGetUniformfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformfv(GLuint arg0, GLint arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetUniformfv", (GLADapiproc) glGetUniformfv, 3, arg0, arg1, arg2);
    glGetUniformfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformfv", (GLADapiproc) glGetUniformfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMFVPROC glad_debug_glGetUniformfv = glad_debug_impl_glGetUniformfv;
PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformuiv(GLuint arg0, GLint arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetUniformuiv", (GLADapiproc) glGetUniformuiv, 3, arg0, arg1, arg2);
    glGetUniformuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformuiv", (GLADapiproc) glGetUniformuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMUIVPROC glad_debug_glGetUniformuiv = glad_debug_impl_glGetUniformuiv;
PFNGLENABLEPROC glad_glEnable = NULL;
void GLAD_API_PTR glad_debug_impl_glEnable(GLenum arg0) {
    _pre_call_gl_callback("glEnable", (GLADapiproc) glEnable, 1, arg0);
    glEnable(arg0);
    _post_call_gl_callback(NULL, "glEnable", (GLADapiproc) glEnable, 1, arg0);
    
}
PFNGLENABLEPROC glad_debug_glEnable = glad_debug_impl_glEnable;
PFNGLDEPTHRANGEPROC glad_glDepthRange = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthRange(GLdouble arg0, GLdouble arg1) {
    _pre_call_gl_callback("glDepthRange", (GLADapiproc) glDepthRange, 2, arg0, arg1);
    glDepthRange(arg0, arg1);
    _post_call_gl_callback(NULL, "glDepthRange", (GLADapiproc) glDepthRange, 2, arg0, arg1);
    
}
PFNGLDEPTHRANGEPROC glad_debug_glDepthRange = glad_debug_impl_glDepthRange;
PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnUniformfvARB(GLuint arg0, GLint arg1, GLsizei arg2, GLfloat * arg3) {
    _pre_call_gl_callback("glGetnUniformfvARB", (GLADapiproc) glGetnUniformfvARB, 4, arg0, arg1, arg2, arg3);
    glGetnUniformfvARB(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnUniformfvARB", (GLADapiproc) glGetnUniformfvARB, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNUNIFORMFVARBPROC glad_debug_glGetnUniformfvARB = glad_debug_impl_glGetnUniformfvARB;
PFNGLDRAWBUFFERPROC glad_glDrawBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawBuffer(GLenum arg0) {
    _pre_call_gl_callback("glDrawBuffer", (GLADapiproc) glDrawBuffer, 1, arg0);
    glDrawBuffer(arg0);
    _post_call_gl_callback(NULL, "glDrawBuffer", (GLADapiproc) glDrawBuffer, 1, arg0);
    
}
PFNGLDRAWBUFFERPROC glad_debug_glDrawBuffer = glad_debug_impl_glDrawBuffer;
PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glEndQueryIndexed(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glEndQueryIndexed", (GLADapiproc) glEndQueryIndexed, 2, arg0, arg1);
    glEndQueryIndexed(arg0, arg1);
    _post_call_gl_callback(NULL, "glEndQueryIndexed", (GLADapiproc) glEndQueryIndexed, 2, arg0, arg1);
    
}
PFNGLENDQUERYINDEXEDPROC glad_debug_glEndQueryIndexed = glad_debug_impl_glEndQueryIndexed;
PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferuiv(GLenum arg0, GLint arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glClearBufferuiv", (GLADapiproc) glClearBufferuiv, 3, arg0, arg1, arg2);
    glClearBufferuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glClearBufferuiv", (GLADapiproc) glClearBufferuiv, 3, arg0, arg1, arg2);
    
}
PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv = glad_debug_impl_glClearBufferuiv;
PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsInstanced(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3, GLsizei arg4) {
    _pre_call_gl_callback("glDrawElementsInstanced", (GLADapiproc) glDrawElementsInstanced, 5, arg0, arg1, arg2, arg3, arg4);
    glDrawElementsInstanced(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glDrawElementsInstanced", (GLADapiproc) glDrawElementsInstanced, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLDRAWELEMENTSINSTANCEDPROC glad_debug_glDrawElementsInstanced = glad_debug_impl_glDrawElementsInstanced;
PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1i(GLuint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glProgramUniform1i", (GLADapiproc) glProgramUniform1i, 3, arg0, arg1, arg2);
    glProgramUniform1i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramUniform1i", (GLADapiproc) glProgramUniform1i, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMUNIFORM1IPROC glad_debug_glProgramUniform1i = glad_debug_impl_glProgramUniform1i;
PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glPatchParameteri(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glPatchParameteri", (GLADapiproc) glPatchParameteri, 2, arg0, arg1);
    glPatchParameteri(arg0, arg1);
    _post_call_gl_callback(NULL, "glPatchParameteri", (GLADapiproc) glPatchParameteri, 2, arg0, arg1);
    
}
PFNGLPATCHPARAMETERIPROC glad_debug_glPatchParameteri = glad_debug_impl_glPatchParameteri;
PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1d(GLuint arg0, GLint arg1, GLdouble arg2) {
    _pre_call_gl_callback("glProgramUniform1d", (GLADapiproc) glProgramUniform1d, 3, arg0, arg1, arg2);
    glProgramUniform1d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramUniform1d", (GLADapiproc) glProgramUniform1d, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMUNIFORM1DPROC glad_debug_glProgramUniform1d = glad_debug_impl_glProgramUniform1d;
PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1f(GLuint arg0, GLint arg1, GLfloat arg2) {
    _pre_call_gl_callback("glProgramUniform1f", (GLADapiproc) glProgramUniform1f, 3, arg0, arg1, arg2);
    glProgramUniform1f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glProgramUniform1f", (GLADapiproc) glProgramUniform1f, 3, arg0, arg1, arg2);
    
}
PFNGLPROGRAMUNIFORM1FPROC glad_debug_glProgramUniform1f = glad_debug_impl_glProgramUniform1f;
PFNGLFLUSHPROC glad_glFlush = NULL;
void GLAD_API_PTR glad_debug_impl_glFlush(void) {
    _pre_call_gl_callback("glFlush", (GLADapiproc) glFlush, 0);
    glFlush();
    _post_call_gl_callback(NULL, "glFlush", (GLADapiproc) glFlush, 0);
    
}
PFNGLFLUSHPROC glad_debug_glFlush = glad_debug_impl_glFlush;
PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetRenderbufferParameteriv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetRenderbufferParameteriv", (GLADapiproc) glGetRenderbufferParameteriv, 3, arg0, arg1, arg2);
    glGetRenderbufferParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetRenderbufferParameteriv", (GLADapiproc) glGetRenderbufferParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_debug_glGetRenderbufferParameteriv = glad_debug_impl_glGetRenderbufferParameteriv;
PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint * arg3) {
    _pre_call_gl_callback("glProgramUniform3iv", (GLADapiproc) glProgramUniform3iv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform3iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform3iv", (GLADapiproc) glProgramUniform3iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM3IVPROC glad_debug_glProgramUniform3iv = glad_debug_impl_glProgramUniform3iv;
PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribPointerv(GLuint arg0, GLenum arg1, void ** arg2) {
    _pre_call_gl_callback("glGetVertexAttribPointerv", (GLADapiproc) glGetVertexAttribPointerv, 3, arg0, arg1, arg2);
    glGetVertexAttribPointerv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribPointerv", (GLADapiproc) glGetVertexAttribPointerv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBPOINTERVPROC glad_debug_glGetVertexAttribPointerv = glad_debug_impl_glGetVertexAttribPointerv;
PFNGLFENCESYNCPROC glad_glFenceSync = NULL;
GLsync GLAD_API_PTR glad_debug_impl_glFenceSync(GLenum arg0, GLbitfield arg1) {
    GLsync ret;
    _pre_call_gl_callback("glFenceSync", (GLADapiproc) glFenceSync, 2, arg0, arg1);
    ret = glFenceSync(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glFenceSync", (GLADapiproc) glFenceSync, 2, arg0, arg1);
    return ret;
}
PFNGLFENCESYNCPROC glad_debug_glFenceSync = glad_debug_impl_glFenceSync;
PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib3sv", (GLADapiproc) glVertexAttrib3sv, 2, arg0, arg1);
    glVertexAttrib3sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib3sv", (GLADapiproc) glVertexAttrib3sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB3SVPROC glad_debug_glVertexAttrib3sv = glad_debug_impl_glVertexAttrib3sv;
PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender = NULL;
void GLAD_API_PTR glad_debug_impl_glBeginConditionalRender(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glBeginConditionalRender", (GLADapiproc) glBeginConditionalRender, 2, arg0, arg1);
    glBeginConditionalRender(arg0, arg1);
    _post_call_gl_callback(NULL, "glBeginConditionalRender", (GLADapiproc) glBeginConditionalRender, 2, arg0, arg1);
    
}
PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender = glad_debug_impl_glBeginConditionalRender;
PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline = NULL;
void GLAD_API_PTR glad_debug_impl_glValidateProgramPipeline(GLuint arg0) {
    _pre_call_gl_callback("glValidateProgramPipeline", (GLADapiproc) glValidateProgramPipeline, 1, arg0);
    glValidateProgramPipeline(arg0);
    _post_call_gl_callback(NULL, "glValidateProgramPipeline", (GLADapiproc) glValidateProgramPipeline, 1, arg0);
    
}
PFNGLVALIDATEPROGRAMPIPELINEPROC glad_debug_glValidateProgramPipeline = glad_debug_impl_glValidateProgramPipeline;
PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexLevelParameteriv(GLenum arg0, GLint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetTexLevelParameteriv", (GLADapiproc) glGetTexLevelParameteriv, 4, arg0, arg1, arg2, arg3);
    glGetTexLevelParameteriv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetTexLevelParameteriv", (GLADapiproc) glGetTexLevelParameteriv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETTEXLEVELPARAMETERIVPROC glad_debug_glGetTexLevelParameteriv = glad_debug_impl_glGetTexLevelParameteriv;
PFNGLTEXIMAGE1DPROC glad_glTexImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLint arg4, GLenum arg5, GLenum arg6, const void * arg7) {
    _pre_call_gl_callback("glTexImage1D", (GLADapiproc) glTexImage1D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glTexImage1D", (GLADapiproc) glTexImage1D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLTEXIMAGE1DPROC glad_debug_glTexImage1D = glad_debug_impl_glTexImage1D;
PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilFuncSeparate(GLenum arg0, GLenum arg1, GLint arg2, GLuint arg3) {
    _pre_call_gl_callback("glStencilFuncSeparate", (GLADapiproc) glStencilFuncSeparate, 4, arg0, arg1, arg2, arg3);
    glStencilFuncSeparate(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glStencilFuncSeparate", (GLADapiproc) glStencilFuncSeparate, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSTENCILFUNCSEPARATEPROC glad_debug_glStencilFuncSeparate = glad_debug_impl_glStencilFuncSeparate;
PFNGLGENSAMPLERSPROC glad_glGenSamplers = NULL;
void GLAD_API_PTR glad_debug_impl_glGenSamplers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenSamplers", (GLADapiproc) glGenSamplers, 2, arg0, arg1);
    glGenSamplers(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenSamplers", (GLADapiproc) glGenSamplers, 2, arg0, arg1);
    
}
PFNGLGENSAMPLERSPROC glad_debug_glGenSamplers = glad_debug_impl_glGenSamplers;
PFNGLCLAMPCOLORPROC glad_glClampColor = NULL;
void GLAD_API_PTR glad_debug_impl_glClampColor(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glClampColor", (GLADapiproc) glClampColor, 2, arg0, arg1);
    glClampColor(arg0, arg1);
    _post_call_gl_callback(NULL, "glClampColor", (GLADapiproc) glClampColor, 2, arg0, arg1);
    
}
PFNGLCLAMPCOLORPROC glad_debug_glClampColor = glad_debug_impl_glClampColor;
PFNGLUNIFORM4IVPROC glad_glUniform4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4iv(GLint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glUniform4iv", (GLADapiproc) glUniform4iv, 3, arg0, arg1, arg2);
    glUniform4iv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform4iv", (GLADapiproc) glUniform4iv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM4IVPROC glad_debug_glUniform4iv = glad_debug_impl_glUniform4iv;
PFNGLCLEARSTENCILPROC glad_glClearStencil = NULL;
void GLAD_API_PTR glad_debug_impl_glClearStencil(GLint arg0) {
    _pre_call_gl_callback("glClearStencil", (GLADapiproc) glClearStencil, 1, arg0);
    glClearStencil(arg0);
    _post_call_gl_callback(NULL, "glClearStencil", (GLADapiproc) glClearStencil, 1, arg0);
    
}
PFNGLCLEARSTENCILPROC glad_debug_glClearStencil = glad_debug_impl_glClearStencil;
PFNGLGENTEXTURESPROC glad_glGenTextures = NULL;
void GLAD_API_PTR glad_debug_impl_glGenTextures(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenTextures", (GLADapiproc) glGenTextures, 2, arg0, arg1);
    glGenTextures(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenTextures", (GLADapiproc) glGenTextures, 2, arg0, arg1);
    
}
PFNGLGENTEXTURESPROC glad_debug_glGenTextures = glad_debug_impl_glGenTextures;
PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawTransformFeedback(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glDrawTransformFeedback", (GLADapiproc) glDrawTransformFeedback, 2, arg0, arg1);
    glDrawTransformFeedback(arg0, arg1);
    _post_call_gl_callback(NULL, "glDrawTransformFeedback", (GLADapiproc) glDrawTransformFeedback, 2, arg0, arg1);
    
}
PFNGLDRAWTRANSFORMFEEDBACKPROC glad_debug_glDrawTransformFeedback = glad_debug_impl_glDrawTransformFeedback;
PFNGLGETDOUBLEVPROC glad_glGetDoublev = NULL;
void GLAD_API_PTR glad_debug_impl_glGetDoublev(GLenum arg0, GLdouble * arg1) {
    _pre_call_gl_callback("glGetDoublev", (GLADapiproc) glGetDoublev, 2, arg0, arg1);
    glGetDoublev(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetDoublev", (GLADapiproc) glGetDoublev, 2, arg0, arg1);
    
}
PFNGLGETDOUBLEVPROC glad_debug_glGetDoublev = glad_debug_impl_glGetDoublev;
PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexParameterIuiv(GLenum arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetTexParameterIuiv", (GLADapiproc) glGetTexParameterIuiv, 3, arg0, arg1, arg2);
    glGetTexParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexParameterIuiv", (GLADapiproc) glGetTexParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXPARAMETERIUIVPROC glad_debug_glGetTexParameterIuiv = glad_debug_impl_glGetTexParameterIuiv;
PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nbv(GLuint arg0, const GLbyte * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nbv", (GLADapiproc) glVertexAttrib4Nbv, 2, arg0, arg1);
    glVertexAttrib4Nbv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nbv", (GLADapiproc) glVertexAttrib4Nbv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NBVPROC glad_debug_glVertexAttrib4Nbv = glad_debug_impl_glVertexAttrib4Nbv;
PFNGLISSYNCPROC glad_glIsSync = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsSync(GLsync arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsSync", (GLADapiproc) glIsSync, 1, arg0);
    ret = glIsSync(arg0);
    _post_call_gl_callback((void*) &ret, "glIsSync", (GLADapiproc) glIsSync, 1, arg0);
    return ret;
}
PFNGLISSYNCPROC glad_debug_glIsSync = glad_debug_impl_glIsSync;
PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteRenderbuffers(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteRenderbuffers", (GLADapiproc) glDeleteRenderbuffers, 2, arg0, arg1);
    glDeleteRenderbuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteRenderbuffers", (GLADapiproc) glDeleteRenderbuffers, 2, arg0, arg1);
    
}
PFNGLDELETERENDERBUFFERSPROC glad_debug_glDeleteRenderbuffers = glad_debug_impl_glDeleteRenderbuffers;
PFNGLUNIFORM2IPROC glad_glUniform2i = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_gl_callback("glUniform2i", (GLADapiproc) glUniform2i, 3, arg0, arg1, arg2);
    glUniform2i(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2i", (GLADapiproc) glUniform2i, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2IPROC glad_debug_glUniform2i = glad_debug_impl_glUniform2i;
PFNGLUNIFORM2FPROC glad_glUniform2f = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2f(GLint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glUniform2f", (GLADapiproc) glUniform2f, 3, arg0, arg1, arg2);
    glUniform2f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2f", (GLADapiproc) glUniform2f, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2FPROC glad_debug_glUniform2f = glad_debug_impl_glUniform2f;
PFNGLUNIFORM2DPROC glad_glUniform2d = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2d(GLint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glUniform2d", (GLADapiproc) glUniform2d, 3, arg0, arg1, arg2);
    glUniform2d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2d", (GLADapiproc) glUniform2d, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2DPROC glad_debug_glUniform2d = glad_debug_impl_glUniform2d;
PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL1d(GLuint arg0, GLdouble arg1) {
    _pre_call_gl_callback("glVertexAttribL1d", (GLADapiproc) glVertexAttribL1d, 2, arg0, arg1);
    glVertexAttribL1d(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL1d", (GLADapiproc) glVertexAttribL1d, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL1DPROC glad_debug_glVertexAttribL1d = glad_debug_impl_glVertexAttribL1d;
PFNGLGETPROGRAMIVPROC glad_glGetProgramiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetProgramiv", (GLADapiproc) glGetProgramiv, 3, arg0, arg1, arg2);
    glGetProgramiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetProgramiv", (GLADapiproc) glGetProgramiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETPROGRAMIVPROC glad_debug_glGetProgramiv = glad_debug_impl_glGetProgramiv;
PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribPointer(GLuint arg0, GLint arg1, GLenum arg2, GLboolean arg3, GLsizei arg4, const void * arg5) {
    _pre_call_gl_callback("glVertexAttribPointer", (GLADapiproc) glVertexAttribPointer, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glVertexAttribPointer", (GLADapiproc) glVertexAttribPointer, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer = glad_debug_impl_glVertexAttribPointer;
PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTextureLayer(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glFramebufferTextureLayer", (GLADapiproc) glFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);
    glFramebufferTextureLayer(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glFramebufferTextureLayer", (GLADapiproc) glFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_debug_glFramebufferTextureLayer = glad_debug_impl_glFramebufferTextureLayer;
PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glProgramUniform4fv", (GLADapiproc) glProgramUniform4fv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform4fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform4fv", (GLADapiproc) glProgramUniform4fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM4FVPROC glad_debug_glProgramUniform4fv = glad_debug_impl_glProgramUniform4fv;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange = NULL;
void GLAD_API_PTR glad_debug_impl_glFlushMappedBufferRange(GLenum arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_gl_callback("glFlushMappedBufferRange", (GLADapiproc) glFlushMappedBufferRange, 3, arg0, arg1, arg2);
    glFlushMappedBufferRange(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glFlushMappedBufferRange", (GLADapiproc) glFlushMappedBufferRange, 3, arg0, arg1, arg2);
    
}
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_debug_glFlushMappedBufferRange = glad_debug_impl_glFlushMappedBufferRange;
PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glProgramUniform2fv", (GLADapiproc) glProgramUniform2fv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2fv", (GLADapiproc) glProgramUniform2fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2FVPROC glad_debug_glProgramUniform2fv = glad_debug_impl_glProgramUniform2fv;
PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2x3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix2x3dv", (GLADapiproc) glUniformMatrix2x3dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2x3dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2x3dv", (GLADapiproc) glUniformMatrix2x3dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2X3DVPROC glad_debug_glUniformMatrix2x3dv = glad_debug_impl_glUniformMatrix2x3dv;
PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL3d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glVertexAttribL3d", (GLADapiproc) glVertexAttribL3d, 4, arg0, arg1, arg2, arg3);
    glVertexAttribL3d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribL3d", (GLADapiproc) glVertexAttribL3d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d = glad_debug_impl_glVertexAttribL3d;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2x4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2x4dv", (GLADapiproc) glProgramUniformMatrix2x4dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2x4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2x4dv", (GLADapiproc) glProgramUniformMatrix2x4dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_debug_glProgramUniformMatrix2x4dv = glad_debug_impl_glProgramUniformMatrix2x4dv;
PFNGLGENQUERIESPROC glad_glGenQueries = NULL;
void GLAD_API_PTR glad_debug_impl_glGenQueries(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenQueries", (GLADapiproc) glGenQueries, 2, arg0, arg1);
    glGenQueries(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenQueries", (GLADapiproc) glGenQueries, 2, arg0, arg1);
    
}
PFNGLGENQUERIESPROC glad_debug_glGenQueries = glad_debug_impl_glGenQueries;
PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnUniformivARB(GLuint arg0, GLint arg1, GLsizei arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetnUniformivARB", (GLADapiproc) glGetnUniformivARB, 4, arg0, arg1, arg2, arg3);
    glGetnUniformivARB(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnUniformivARB", (GLADapiproc) glGetnUniformivARB, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNUNIFORMIVARBPROC glad_debug_glGetnUniformivARB = glad_debug_impl_glGetnUniformivARB;
PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP1ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribP1ui", (GLADapiproc) glVertexAttribP1ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP1ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP1ui", (GLADapiproc) glVertexAttribP1ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui = glad_debug_impl_glVertexAttribP1ui;
PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, const void * arg10) {
    _pre_call_gl_callback("glTexSubImage3D", (GLADapiproc) glTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_gl_callback(NULL, "glTexSubImage3D", (GLADapiproc) glTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    
}
PFNGLTEXSUBIMAGE3DPROC glad_debug_glTexSubImage3D = glad_debug_impl_glTexSubImage3D;
PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetInteger64i_v(GLenum arg0, GLuint arg1, GLint64 * arg2) {
    _pre_call_gl_callback("glGetInteger64i_v", (GLADapiproc) glGetInteger64i_v, 3, arg0, arg1, arg2);
    glGetInteger64i_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetInteger64i_v", (GLADapiproc) glGetInteger64i_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETINTEGER64I_VPROC glad_debug_glGetInteger64i_v = glad_debug_impl_glGetInteger64i_v;
PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteSamplers(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteSamplers", (GLADapiproc) glDeleteSamplers, 2, arg0, arg1);
    glDeleteSamplers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteSamplers", (GLADapiproc) glDeleteSamplers, 2, arg0, arg1);
    
}
PFNGLDELETESAMPLERSPROC glad_debug_glDeleteSamplers = glad_debug_impl_glDeleteSamplers;
PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexImage2D(GLenum arg0, GLint arg1, GLenum arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLint arg7) {
    _pre_call_gl_callback("glCopyTexImage2D", (GLADapiproc) glCopyTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glCopyTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glCopyTexImage2D", (GLADapiproc) glCopyTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D = glad_debug_impl_glCopyTexImage2D;
PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBlitFramebuffer(GLint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLint arg7, GLbitfield arg8, GLenum arg9) {
    _pre_call_gl_callback("glBlitFramebuffer", (GLADapiproc) glBlitFramebuffer, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    glBlitFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_gl_callback(NULL, "glBlitFramebuffer", (GLADapiproc) glBlitFramebuffer, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
}
PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer = glad_debug_impl_glBlitFramebuffer;
PFNGLISENABLEDIPROC glad_glIsEnabledi = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsEnabledi(GLenum arg0, GLuint arg1) {
    GLboolean ret;
    _pre_call_gl_callback("glIsEnabledi", (GLADapiproc) glIsEnabledi, 2, arg0, arg1);
    ret = glIsEnabledi(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glIsEnabledi", (GLADapiproc) glIsEnabledi, 2, arg0, arg1);
    return ret;
}
PFNGLISENABLEDIPROC glad_debug_glIsEnabledi = glad_debug_impl_glIsEnabledi;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glBindFragDataLocationIndexed(GLuint arg0, GLuint arg1, GLuint arg2, const GLchar * arg3) {
    _pre_call_gl_callback("glBindFragDataLocationIndexed", (GLADapiproc) glBindFragDataLocationIndexed, 4, arg0, arg1, arg2, arg3);
    glBindFragDataLocationIndexed(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBindFragDataLocationIndexed", (GLADapiproc) glBindFragDataLocationIndexed, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed = glad_debug_impl_glBindFragDataLocationIndexed;
PFNGLUNIFORM2IVPROC glad_glUniform2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2iv(GLint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glUniform2iv", (GLADapiproc) glUniform2iv, 3, arg0, arg1, arg2);
    glUniform2iv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2iv", (GLADapiproc) glUniform2iv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2IVPROC glad_debug_glUniform2iv = glad_debug_impl_glUniform2iv;
PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1fv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glVertexAttrib1fv", (GLADapiproc) glVertexAttrib1fv, 2, arg0, arg1);
    glVertexAttrib1fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1fv", (GLADapiproc) glVertexAttrib1fv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1FVPROC glad_debug_glVertexAttrib1fv = glad_debug_impl_glVertexAttrib1fv;
PFNGLUNIFORM4UIVPROC glad_glUniform4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4uiv(GLint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniform4uiv", (GLADapiproc) glUniform4uiv, 3, arg0, arg1, arg2);
    glUniform4uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform4uiv", (GLADapiproc) glUniform4uiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM4UIVPROC glad_debug_glUniform4uiv = glad_debug_impl_glUniform4uiv;
PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL1dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttribL1dv", (GLADapiproc) glVertexAttribL1dv, 2, arg0, arg1);
    glVertexAttribL1dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL1dv", (GLADapiproc) glVertexAttribL1dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv = glad_debug_impl_glVertexAttribL1dv;
PFNGLGETSHADERIVPROC glad_glGetShaderiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetShaderiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetShaderiv", (GLADapiproc) glGetShaderiv, 3, arg0, arg1, arg2);
    glGetShaderiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetShaderiv", (GLADapiproc) glGetShaderiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSHADERIVPROC glad_debug_glGetShaderiv = glad_debug_impl_glGetShaderiv;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3fv", (GLADapiproc) glProgramUniformMatrix3fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3fv", (GLADapiproc) glProgramUniformMatrix3fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_debug_glProgramUniformMatrix3fv = glad_debug_impl_glProgramUniformMatrix3fv;
PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation = NULL;
void GLAD_API_PTR glad_debug_impl_glBindFragDataLocation(GLuint arg0, GLuint arg1, const GLchar * arg2) {
    _pre_call_gl_callback("glBindFragDataLocation", (GLADapiproc) glBindFragDataLocation, 3, arg0, arg1, arg2);
    glBindFragDataLocation(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindFragDataLocation", (GLADapiproc) glBindFragDataLocation, 3, arg0, arg1, arg2);
    
}
PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation = glad_debug_impl_glBindFragDataLocation;
PFNGLSCISSORARRAYVPROC glad_glScissorArrayv = NULL;
void GLAD_API_PTR glad_debug_impl_glScissorArrayv(GLuint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glScissorArrayv", (GLADapiproc) glScissorArrayv, 3, arg0, arg1, arg2);
    glScissorArrayv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glScissorArrayv", (GLADapiproc) glScissorArrayv, 3, arg0, arg1, arg2);
    
}
PFNGLSCISSORARRAYVPROC glad_debug_glScissorArrayv = glad_debug_impl_glScissorArrayv;
PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset = NULL;
void GLAD_API_PTR glad_debug_impl_glPolygonOffset(GLfloat arg0, GLfloat arg1) {
    _pre_call_gl_callback("glPolygonOffset", (GLADapiproc) glPolygonOffset, 2, arg0, arg1);
    glPolygonOffset(arg0, arg1);
    _post_call_gl_callback(NULL, "glPolygonOffset", (GLADapiproc) glPolygonOffset, 2, arg0, arg1);
    
}
PFNGLPOLYGONOFFSETPROC glad_debug_glPolygonOffset = glad_debug_impl_glPolygonOffset;
PFNGLUNIFORM1DVPROC glad_glUniform1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1dv(GLint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glUniform1dv", (GLADapiproc) glUniform1dv, 3, arg0, arg1, arg2);
    glUniform1dv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform1dv", (GLADapiproc) glUniform1dv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM1DVPROC glad_debug_glUniform1dv = glad_debug_impl_glUniform1dv;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexImage2D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLint arg5, GLsizei arg6, const void * arg7) {
    _pre_call_gl_callback("glCompressedTexImage2D", (GLADapiproc) glCompressedTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glCompressedTexImage2D", (GLADapiproc) glCompressedTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D = glad_debug_impl_glCompressedTexImage2D;
PFNGLUNIFORM4DVPROC glad_glUniform4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4dv(GLint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glUniform4dv", (GLADapiproc) glUniform4dv, 3, arg0, arg1, arg2);
    glUniform4dv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform4dv", (GLADapiproc) glUniform4dv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM4DVPROC glad_debug_glUniform4dv = glad_debug_impl_glUniform4dv;
PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glProgramUniform3dv", (GLADapiproc) glProgramUniform3dv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform3dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform3dv", (GLADapiproc) glProgramUniform3dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM3DVPROC glad_debug_glProgramUniform3dv = glad_debug_impl_glProgramUniform3dv;
PFNGLDISABLEPROC glad_glDisable = NULL;
void GLAD_API_PTR glad_debug_impl_glDisable(GLenum arg0) {
    _pre_call_gl_callback("glDisable", (GLADapiproc) glDisable, 1, arg0);
    glDisable(arg0);
    _post_call_gl_callback(NULL, "glDisable", (GLADapiproc) glDisable, 1, arg0);
    
}
PFNGLDISABLEPROC glad_debug_glDisable = glad_debug_impl_glDisable;
PFNGLUNIFORM3FVPROC glad_glUniform3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3fv(GLint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glUniform3fv", (GLADapiproc) glUniform3fv, 3, arg0, arg1, arg2);
    glUniform3fv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform3fv", (GLADapiproc) glUniform3fv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM3FVPROC glad_debug_glUniform3fv = glad_debug_impl_glUniform3fv;
PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribIiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetVertexAttribIiv", (GLADapiproc) glGetVertexAttribIiv, 3, arg0, arg1, arg2);
    glGetVertexAttribIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribIiv", (GLADapiproc) glGetVertexAttribIiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBIIVPROC glad_debug_glGetVertexAttribIiv = glad_debug_impl_glGetVertexAttribIiv;
PFNGLMAPBUFFERPROC glad_glMapBuffer = NULL;
void * GLAD_API_PTR glad_debug_impl_glMapBuffer(GLenum arg0, GLenum arg1) {
    void * ret;
    _pre_call_gl_callback("glMapBuffer", (GLADapiproc) glMapBuffer, 2, arg0, arg1);
    ret = glMapBuffer(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glMapBuffer", (GLADapiproc) glMapBuffer, 2, arg0, arg1);
    return ret;
}
PFNGLMAPBUFFERPROC glad_debug_glMapBuffer = glad_debug_impl_glMapBuffer;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexImage3D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLsizei arg7, const void * arg8) {
    _pre_call_gl_callback("glCompressedTexImage3D", (GLADapiproc) glCompressedTexImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glCompressedTexImage3D", (GLADapiproc) glCompressedTexImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D = glad_debug_impl_glCompressedTexImage3D;
PFNGLDELETESYNCPROC glad_glDeleteSync = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteSync(GLsync arg0) {
    _pre_call_gl_callback("glDeleteSync", (GLADapiproc) glDeleteSync, 1, arg0);
    glDeleteSync(arg0);
    _post_call_gl_callback(NULL, "glDeleteSync", (GLADapiproc) glDeleteSync, 1, arg0);
    
}
PFNGLDELETESYNCPROC glad_debug_glDeleteSync = glad_debug_impl_glDeleteSync;
PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLsizei arg7, GLsizei arg8) {
    _pre_call_gl_callback("glCopyTexSubImage3D", (GLADapiproc) glCopyTexSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glCopyTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glCopyTexSubImage3D", (GLADapiproc) glCopyTexSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D = glad_debug_impl_glCopyTexSubImage3D;
PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix4dv", (GLADapiproc) glUniformMatrix4dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4dv", (GLADapiproc) glUniformMatrix4dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4DVPROC glad_debug_glUniformMatrix4dv = glad_debug_impl_glUniformMatrix4dv;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniformBlockName(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLchar * arg4) {
    _pre_call_gl_callback("glGetActiveUniformBlockName", (GLADapiproc) glGetActiveUniformBlockName, 5, arg0, arg1, arg2, arg3, arg4);
    glGetActiveUniformBlockName(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetActiveUniformBlockName", (GLADapiproc) glGetActiveUniformBlockName, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_debug_glGetActiveUniformBlockName = glad_debug_impl_glGetActiveUniformBlockName;
PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetVertexAttribiv", (GLADapiproc) glGetVertexAttribiv, 3, arg0, arg1, arg2);
    glGetVertexAttribiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribiv", (GLADapiproc) glGetVertexAttribiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBIVPROC glad_debug_glGetVertexAttribiv = glad_debug_impl_glGetVertexAttribiv;
PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4x2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix4x2dv", (GLADapiproc) glUniformMatrix4x2dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4x2dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4x2dv", (GLADapiproc) glUniformMatrix4x2dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4X2DVPROC glad_debug_glUniformMatrix4x2dv = glad_debug_impl_glUniformMatrix4x2dv;
PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawElements(GLenum arg0, const GLsizei * arg1, GLenum arg2, const void *const* arg3, GLsizei arg4) {
    _pre_call_gl_callback("glMultiDrawElements", (GLADapiproc) glMultiDrawElements, 5, arg0, arg1, arg2, arg3, arg4);
    glMultiDrawElements(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glMultiDrawElements", (GLADapiproc) glMultiDrawElements, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLMULTIDRAWELEMENTSPROC glad_debug_glMultiDrawElements = glad_debug_impl_glMultiDrawElements;
PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3fv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glVertexAttrib3fv", (GLADapiproc) glVertexAttrib3fv, 2, arg0, arg1);
    glVertexAttrib3fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib3fv", (GLADapiproc) glVertexAttrib3fv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB3FVPROC glad_debug_glVertexAttrib3fv = glad_debug_impl_glVertexAttrib3fv;
PFNGLUNIFORM3IVPROC glad_glUniform3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3iv(GLint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glUniform3iv", (GLADapiproc) glUniform3iv, 3, arg0, arg1, arg2);
    glUniform3iv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform3iv", (GLADapiproc) glUniform3iv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM3IVPROC glad_debug_glUniform3iv = glad_debug_impl_glUniform3iv;
PFNGLPOLYGONMODEPROC glad_glPolygonMode = NULL;
void GLAD_API_PTR glad_debug_impl_glPolygonMode(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glPolygonMode", (GLADapiproc) glPolygonMode, 2, arg0, arg1);
    glPolygonMode(arg0, arg1);
    _post_call_gl_callback(NULL, "glPolygonMode", (GLADapiproc) glPolygonMode, 2, arg0, arg1);
    
}
PFNGLPOLYGONMODEPROC glad_debug_glPolygonMode = glad_debug_impl_glPolygonMode;
PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glProgramUniform4uiv", (GLADapiproc) glProgramUniform4uiv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform4uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform4uiv", (GLADapiproc) glProgramUniform4uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM4UIVPROC glad_debug_glProgramUniform4uiv = glad_debug_impl_glProgramUniform4uiv;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniformBlockiv(GLuint arg0, GLuint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetActiveUniformBlockiv", (GLADapiproc) glGetActiveUniformBlockiv, 4, arg0, arg1, arg2, arg3);
    glGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetActiveUniformBlockiv", (GLADapiproc) glGetActiveUniformBlockiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_debug_glGetActiveUniformBlockiv = glad_debug_impl_glGetActiveUniformBlockiv;
PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint * arg3) {
    _pre_call_gl_callback("glProgramUniform4iv", (GLADapiproc) glProgramUniform4iv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform4iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform4iv", (GLADapiproc) glProgramUniform4iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM4IVPROC glad_debug_glProgramUniform4iv = glad_debug_impl_glProgramUniform4iv;
PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramBinary(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLenum * arg3, void * arg4) {
    _pre_call_gl_callback("glGetProgramBinary", (GLADapiproc) glGetProgramBinary, 5, arg0, arg1, arg2, arg3, arg4);
    glGetProgramBinary(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetProgramBinary", (GLADapiproc) glGetProgramBinary, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETPROGRAMBINARYPROC glad_debug_glGetProgramBinary = glad_debug_impl_glGetProgramBinary;
PFNGLUSEPROGRAMPROC glad_glUseProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glUseProgram(GLuint arg0) {
    _pre_call_gl_callback("glUseProgram", (GLADapiproc) glUseProgram, 1, arg0);
    glUseProgram(arg0);
    _post_call_gl_callback(NULL, "glUseProgram", (GLADapiproc) glUseProgram, 1, arg0);
    
}
PFNGLUSEPROGRAMPROC glad_debug_glUseProgram = glad_debug_impl_glUseProgram;
PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramInfoLog(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetProgramInfoLog", (GLADapiproc) glGetProgramInfoLog, 4, arg0, arg1, arg2, arg3);
    glGetProgramInfoLog(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetProgramInfoLog", (GLADapiproc) glGetProgramInfoLog, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETPROGRAMINFOLOGPROC glad_debug_glGetProgramInfoLog = glad_debug_impl_glGetProgramInfoLog;
PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glBindTransformFeedback(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindTransformFeedback", (GLADapiproc) glBindTransformFeedback, 2, arg0, arg1);
    glBindTransformFeedback(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindTransformFeedback", (GLADapiproc) glBindTransformFeedback, 2, arg0, arg1);
    
}
PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback = glad_debug_impl_glBindTransformFeedback;
PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray = NULL;
void GLAD_API_PTR glad_debug_impl_glBindVertexArray(GLuint arg0) {
    _pre_call_gl_callback("glBindVertexArray", (GLADapiproc) glBindVertexArray, 1, arg0);
    glBindVertexArray(arg0);
    _post_call_gl_callback(NULL, "glBindVertexArray", (GLADapiproc) glBindVertexArray, 1, arg0);
    
}
PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray = glad_debug_impl_glBindVertexArray;
PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteBuffers(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteBuffers", (GLADapiproc) glDeleteBuffers, 2, arg0, arg1);
    glDeleteBuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteBuffers", (GLADapiproc) glDeleteBuffers, 2, arg0, arg1);
    
}
PFNGLDELETEBUFFERSPROC glad_debug_glDeleteBuffers = glad_debug_impl_glDeleteBuffers;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawElementsBaseVertex(GLenum arg0, const GLsizei * arg1, GLenum arg2, const void *const* arg3, GLsizei arg4, const GLint * arg5) {
    _pre_call_gl_callback("glMultiDrawElementsBaseVertex", (GLADapiproc) glMultiDrawElementsBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glMultiDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glMultiDrawElementsBaseVertex", (GLADapiproc) glMultiDrawElementsBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_debug_glMultiDrawElementsBaseVertex = glad_debug_impl_glMultiDrawElementsBaseVertex;
PFNGLUNIFORM2UIVPROC glad_glUniform2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2uiv(GLint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniform2uiv", (GLADapiproc) glUniform2uiv, 3, arg0, arg1, arg2);
    glUniform2uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2uiv", (GLADapiproc) glUniform2uiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2UIVPROC glad_debug_glUniform2uiv = glad_debug_impl_glUniform2uiv;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLsizei arg5, const void * arg6) {
    _pre_call_gl_callback("glCompressedTexSubImage1D", (GLADapiproc) glCompressedTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glCompressedTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glCompressedTexSubImage1D", (GLADapiproc) glCompressedTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D = glad_debug_impl_glCompressedTexSubImage1D;
PFNGLFINISHPROC glad_glFinish = NULL;
void GLAD_API_PTR glad_debug_impl_glFinish(void) {
    _pre_call_gl_callback("glFinish", (GLADapiproc) glFinish, 0);
    glFinish();
    _post_call_gl_callback(NULL, "glFinish", (GLADapiproc) glFinish, 0);
    
}
PFNGLFINISHPROC glad_debug_glFinish = glad_debug_impl_glFinish;
PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthRangeIndexed(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glDepthRangeIndexed", (GLADapiproc) glDepthRangeIndexed, 3, arg0, arg1, arg2);
    glDepthRangeIndexed(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDepthRangeIndexed", (GLADapiproc) glDepthRangeIndexed, 3, arg0, arg1, arg2);
    
}
PFNGLDEPTHRANGEINDEXEDPROC glad_debug_glDepthRangeIndexed = glad_debug_impl_glDepthRangeIndexed;
PFNGLDELETESHADERPROC glad_glDeleteShader = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteShader(GLuint arg0) {
    _pre_call_gl_callback("glDeleteShader", (GLADapiproc) glDeleteShader, 1, arg0);
    glDeleteShader(arg0);
    _post_call_gl_callback(NULL, "glDeleteShader", (GLADapiproc) glDeleteShader, 1, arg0);
    
}
PFNGLDELETESHADERPROC glad_debug_glDeleteShader = glad_debug_impl_glDeleteShader;
PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2x4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix2x4dv", (GLADapiproc) glUniformMatrix2x4dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2x4dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2x4dv", (GLADapiproc) glUniformMatrix2x4dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2X4DVPROC glad_debug_glUniformMatrix2x4dv = glad_debug_impl_glUniformMatrix2x4dv;
PFNGLVIEWPORTPROC glad_glViewport = NULL;
void GLAD_API_PTR glad_debug_impl_glViewport(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glViewport", (GLADapiproc) glViewport, 4, arg0, arg1, arg2, arg3);
    glViewport(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glViewport", (GLADapiproc) glViewport, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVIEWPORTPROC glad_debug_glViewport = glad_debug_impl_glViewport;
PFNGLUNIFORM1UIVPROC glad_glUniform1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1uiv(GLint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniform1uiv", (GLADapiproc) glUniform1uiv, 3, arg0, arg1, arg2);
    glUniform1uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform1uiv", (GLADapiproc) glUniform1uiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM1UIVPROC glad_debug_glUniform1uiv = glad_debug_impl_glUniform1uiv;
PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix2dv", (GLADapiproc) glUniformMatrix2dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2dv", (GLADapiproc) glUniformMatrix2dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2DVPROC glad_debug_glUniformMatrix2dv = glad_debug_impl_glUniformMatrix2dv;
PFNGLUNIFORM2UIPROC glad_glUniform2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2ui(GLint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glUniform2ui", (GLADapiproc) glUniform2ui, 3, arg0, arg1, arg2);
    glUniform2ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2ui", (GLADapiproc) glUniform2ui, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2UIPROC glad_debug_glUniform2ui = glad_debug_impl_glUniform2ui;
PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI3i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glVertexAttribI3i", (GLADapiproc) glVertexAttribI3i, 4, arg0, arg1, arg2, arg3);
    glVertexAttribI3i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribI3i", (GLADapiproc) glVertexAttribI3i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBI3IPROC glad_debug_glVertexAttribI3i = glad_debug_impl_glVertexAttribI3i;
PFNGLCLEARDEPTHPROC glad_glClearDepth = NULL;
void GLAD_API_PTR glad_debug_impl_glClearDepth(GLdouble arg0) {
    _pre_call_gl_callback("glClearDepth", (GLADapiproc) glClearDepth, 1, arg0);
    glClearDepth(arg0);
    _post_call_gl_callback(NULL, "glClearDepth", (GLADapiproc) glClearDepth, 1, arg0);
    
}
PFNGLCLEARDEPTHPROC glad_debug_glClearDepth = glad_debug_impl_glClearDepth;
PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4usv(GLuint arg0, const GLushort * arg1) {
    _pre_call_gl_callback("glVertexAttribI4usv", (GLADapiproc) glVertexAttribI4usv, 2, arg0, arg1);
    glVertexAttribI4usv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4usv", (GLADapiproc) glVertexAttribI4usv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4USVPROC glad_debug_glVertexAttribI4usv = glad_debug_impl_glVertexAttribI4usv;
PFNGLTEXPARAMETERFPROC glad_glTexParameterf = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameterf(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glTexParameterf", (GLADapiproc) glTexParameterf, 3, arg0, arg1, arg2);
    glTexParameterf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameterf", (GLADapiproc) glTexParameterf, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERFPROC glad_debug_glTexParameterf = glad_debug_impl_glTexParameterf;
PFNGLTEXPARAMETERIPROC glad_glTexParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameteri(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glTexParameteri", (GLADapiproc) glTexParameteri, 3, arg0, arg1, arg2);
    glTexParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameteri", (GLADapiproc) glTexParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERIPROC glad_debug_glTexParameteri = glad_debug_impl_glTexParameteri;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveSubroutineUniformiv(GLuint arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLint * arg4) {
    _pre_call_gl_callback("glGetActiveSubroutineUniformiv", (GLADapiproc) glGetActiveSubroutineUniformiv, 5, arg0, arg1, arg2, arg3, arg4);
    glGetActiveSubroutineUniformiv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetActiveSubroutineUniformiv", (GLADapiproc) glGetActiveSubroutineUniformiv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_debug_glGetActiveSubroutineUniformiv = glad_debug_impl_glGetActiveSubroutineUniformiv;
PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource = NULL;
void GLAD_API_PTR glad_debug_impl_glGetShaderSource(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetShaderSource", (GLADapiproc) glGetShaderSource, 4, arg0, arg1, arg2, arg3);
    glGetShaderSource(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetShaderSource", (GLADapiproc) glGetShaderSource, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETSHADERSOURCEPROC glad_debug_glGetShaderSource = glad_debug_impl_glGetShaderSource;
PFNGLTEXBUFFERPROC glad_glTexBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glTexBuffer(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_gl_callback("glTexBuffer", (GLADapiproc) glTexBuffer, 3, arg0, arg1, arg2);
    glTexBuffer(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexBuffer", (GLADapiproc) glTexBuffer, 3, arg0, arg1, arg2);
    
}
PFNGLTEXBUFFERPROC glad_debug_glTexBuffer = glad_debug_impl_glTexBuffer;
PFNGLPIXELSTOREIPROC glad_glPixelStorei = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelStorei(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glPixelStorei", (GLADapiproc) glPixelStorei, 2, arg0, arg1);
    glPixelStorei(arg0, arg1);
    _post_call_gl_callback(NULL, "glPixelStorei", (GLADapiproc) glPixelStorei, 2, arg0, arg1);
    
}
PFNGLPIXELSTOREIPROC glad_debug_glPixelStorei = glad_debug_impl_glPixelStorei;
PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glValidateProgram(GLuint arg0) {
    _pre_call_gl_callback("glValidateProgram", (GLADapiproc) glValidateProgram, 1, arg0);
    glValidateProgram(arg0);
    _post_call_gl_callback(NULL, "glValidateProgram", (GLADapiproc) glValidateProgram, 1, arg0);
    
}
PFNGLVALIDATEPROGRAMPROC glad_debug_glValidateProgram = glad_debug_impl_glValidateProgram;
PFNGLPIXELSTOREFPROC glad_glPixelStoref = NULL;
void GLAD_API_PTR glad_debug_impl_glPixelStoref(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glPixelStoref", (GLADapiproc) glPixelStoref, 2, arg0, arg1);
    glPixelStoref(arg0, arg1);
    _post_call_gl_callback(NULL, "glPixelStoref", (GLADapiproc) glPixelStoref, 2, arg0, arg1);
    
}
PFNGLPIXELSTOREFPROC glad_debug_glPixelStoref = glad_debug_impl_glPixelStoref;
PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBooleani_v(GLenum arg0, GLuint arg1, GLboolean * arg2) {
    _pre_call_gl_callback("glGetBooleani_v", (GLADapiproc) glGetBooleani_v, 3, arg0, arg1, arg2);
    glGetBooleani_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetBooleani_v", (GLADapiproc) glGetBooleani_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETBOOLEANI_VPROC glad_debug_glGetBooleani_v = glad_debug_impl_glGetBooleani_v;
PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines = NULL;
void GLAD_API_PTR glad_debug_impl_glGenProgramPipelines(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenProgramPipelines", (GLADapiproc) glGenProgramPipelines, 2, arg0, arg1);
    glGenProgramPipelines(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenProgramPipelines", (GLADapiproc) glGenProgramPipelines, 2, arg0, arg1);
    
}
PFNGLGENPROGRAMPIPELINESPROC glad_debug_glGenProgramPipelines = glad_debug_impl_glGenProgramPipelines;
PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP1uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glVertexAttribP1uiv", (GLADapiproc) glVertexAttribP1uiv, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP1uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP1uiv", (GLADapiproc) glVertexAttribP1uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv = glad_debug_impl_glVertexAttribP1uiv;
PFNGLLINKPROGRAMPROC glad_glLinkProgram = NULL;
void GLAD_API_PTR glad_debug_impl_glLinkProgram(GLuint arg0) {
    _pre_call_gl_callback("glLinkProgram", (GLADapiproc) glLinkProgram, 1, arg0);
    glLinkProgram(arg0);
    _post_call_gl_callback(NULL, "glLinkProgram", (GLADapiproc) glLinkProgram, 1, arg0);
    
}
PFNGLLINKPROGRAMPROC glad_debug_glLinkProgram = glad_debug_impl_glLinkProgram;
PFNGLBINDTEXTUREPROC glad_glBindTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glBindTexture(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindTexture", (GLADapiproc) glBindTexture, 2, arg0, arg1);
    glBindTexture(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindTexture", (GLADapiproc) glBindTexture, 2, arg0, arg1);
    
}
PFNGLBINDTEXTUREPROC glad_debug_glBindTexture = glad_debug_impl_glBindTexture;
PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnUniformuivARB(GLuint arg0, GLint arg1, GLsizei arg2, GLuint * arg3) {
    _pre_call_gl_callback("glGetnUniformuivARB", (GLADapiproc) glGetnUniformuivARB, 4, arg0, arg1, arg2, arg3);
    glGetnUniformuivARB(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnUniformuivARB", (GLADapiproc) glGetnUniformuivARB, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNUNIFORMUIVARBPROC glad_debug_glGetnUniformuivARB = glad_debug_impl_glGetnUniformuivARB;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramPipelineInfoLog(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetProgramPipelineInfoLog", (GLADapiproc) glGetProgramPipelineInfoLog, 4, arg0, arg1, arg2, arg3);
    glGetProgramPipelineInfoLog(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetProgramPipelineInfoLog", (GLADapiproc) glGetProgramPipelineInfoLog, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_debug_glGetProgramPipelineInfoLog = glad_debug_impl_glGetProgramPipelineInfoLog;
PFNGLGETSTRINGPROC glad_glGetString = NULL;
const GLubyte * GLAD_API_PTR glad_debug_impl_glGetString(GLenum arg0) {
    const GLubyte * ret;
    _pre_call_gl_callback("glGetString", (GLADapiproc) glGetString, 1, arg0);
    ret = glGetString(arg0);
    _post_call_gl_callback((void*) &ret, "glGetString", (GLADapiproc) glGetString, 1, arg0);
    return ret;
}
PFNGLGETSTRINGPROC glad_debug_glGetString = glad_debug_impl_glGetString;
PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP2uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glVertexAttribP2uiv", (GLADapiproc) glVertexAttribP2uiv, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP2uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP2uiv", (GLADapiproc) glVertexAttribP2uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv = glad_debug_impl_glVertexAttribP2uiv;
PFNGLDETACHSHADERPROC glad_glDetachShader = NULL;
void GLAD_API_PTR glad_debug_impl_glDetachShader(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glDetachShader", (GLADapiproc) glDetachShader, 2, arg0, arg1);
    glDetachShader(arg0, arg1);
    _post_call_gl_callback(NULL, "glDetachShader", (GLADapiproc) glDetachShader, 2, arg0, arg1);
    
}
PFNGLDETACHSHADERPROC glad_debug_glDetachShader = glad_debug_impl_glDetachShader;
PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3x4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix3x4dv", (GLADapiproc) glUniformMatrix3x4dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3x4dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3x4dv", (GLADapiproc) glUniformMatrix3x4dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3X4DVPROC glad_debug_glUniformMatrix3x4dv = glad_debug_impl_glUniformMatrix3x4dv;
PFNGLENDQUERYPROC glad_glEndQuery = NULL;
void GLAD_API_PTR glad_debug_impl_glEndQuery(GLenum arg0) {
    _pre_call_gl_callback("glEndQuery", (GLADapiproc) glEndQuery, 1, arg0);
    glEndQuery(arg0);
    _post_call_gl_callback(NULL, "glEndQuery", (GLADapiproc) glEndQuery, 1, arg0);
    
}
PFNGLENDQUERYPROC glad_debug_glEndQuery = glad_debug_impl_glEndQuery;
PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4x3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix4x3dv", (GLADapiproc) glUniformMatrix4x3dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4x3dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4x3dv", (GLADapiproc) glUniformMatrix4x3dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4X3DVPROC glad_debug_glUniformMatrix4x3dv = glad_debug_impl_glUniformMatrix4x3dv;
PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthRangeArrayv(GLuint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glDepthRangeArrayv", (GLADapiproc) glDepthRangeArrayv, 3, arg0, arg1, arg2);
    glDepthRangeArrayv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDepthRangeArrayv", (GLADapiproc) glDepthRangeArrayv, 3, arg0, arg1, arg2);
    
}
PFNGLDEPTHRANGEARRAYVPROC glad_debug_glDepthRangeArrayv = glad_debug_impl_glDepthRangeArrayv;
PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI2ui(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glVertexAttribI2ui", (GLADapiproc) glVertexAttribI2ui, 3, arg0, arg1, arg2);
    glVertexAttribI2ui(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttribI2ui", (GLADapiproc) glVertexAttribI2ui, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIBI2UIPROC glad_debug_glVertexAttribI2ui = glad_debug_impl_glVertexAttribI2ui;
PFNGLDELETETEXTURESPROC glad_glDeleteTextures = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteTextures(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteTextures", (GLADapiproc) glDeleteTextures, 2, arg0, arg1);
    glDeleteTextures(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteTextures", (GLADapiproc) glDeleteTextures, 2, arg0, arg1);
    
}
PFNGLDELETETEXTURESPROC glad_debug_glDeleteTextures = glad_debug_impl_glDeleteTextures;
PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilOpSeparate(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_gl_callback("glStencilOpSeparate", (GLADapiproc) glStencilOpSeparate, 4, arg0, arg1, arg2, arg3);
    glStencilOpSeparate(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glStencilOpSeparate", (GLADapiproc) glStencilOpSeparate, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSTENCILOPSEPARATEPROC glad_debug_glStencilOpSeparate = glad_debug_impl_glStencilOpSeparate;
PFNGLDELETEQUERIESPROC glad_glDeleteQueries = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteQueries(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteQueries", (GLADapiproc) glDeleteQueries, 2, arg0, arg1);
    glDeleteQueries(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteQueries", (GLADapiproc) glDeleteQueries, 2, arg0, arg1);
    
}
PFNGLDELETEQUERIESPROC glad_debug_glDeleteQueries = glad_debug_impl_glDeleteQueries;
PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4f(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glVertexAttrib4f", (GLADapiproc) glVertexAttrib4f, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttrib4f(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttrib4f", (GLADapiproc) glVertexAttrib4f, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIB4FPROC glad_debug_glVertexAttrib4f = glad_debug_impl_glVertexAttrib4f;
PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glVertexAttrib4d", (GLADapiproc) glVertexAttrib4d, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttrib4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttrib4d", (GLADapiproc) glVertexAttrib4d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIB4DPROC glad_debug_glVertexAttrib4d = glad_debug_impl_glVertexAttrib4d;
PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv = NULL;
void GLAD_API_PTR glad_debug_impl_glViewportIndexedfv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glViewportIndexedfv", (GLADapiproc) glViewportIndexedfv, 2, arg0, arg1);
    glViewportIndexedfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glViewportIndexedfv", (GLADapiproc) glViewportIndexedfv, 2, arg0, arg1);
    
}
PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv = glad_debug_impl_glViewportIndexedfv;
PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBufferParameteri64v(GLenum arg0, GLenum arg1, GLint64 * arg2) {
    _pre_call_gl_callback("glGetBufferParameteri64v", (GLADapiproc) glGetBufferParameteri64v, 3, arg0, arg1, arg2);
    glGetBufferParameteri64v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetBufferParameteri64v", (GLADapiproc) glGetBufferParameteri64v, 3, arg0, arg1, arg2);
    
}
PFNGLGETBUFFERPARAMETERI64VPROC glad_debug_glGetBufferParameteri64v = glad_debug_impl_glGetBufferParameteri64v;
PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL4dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttribL4dv", (GLADapiproc) glVertexAttribL4dv, 2, arg0, arg1);
    glVertexAttribL4dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL4dv", (GLADapiproc) glVertexAttribL4dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv = glad_debug_impl_glVertexAttribL4dv;
PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexParameteriv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTexParameteriv", (GLADapiproc) glGetTexParameteriv, 3, arg0, arg1, arg2);
    glGetTexParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexParameteriv", (GLADapiproc) glGetTexParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXPARAMETERIVPROC glad_debug_glGetTexParameteriv = glad_debug_impl_glGetTexParameteriv;
PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glProgramUniform1dv", (GLADapiproc) glProgramUniform1dv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform1dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform1dv", (GLADapiproc) glProgramUniform1dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM1DVPROC glad_debug_glProgramUniform1dv = glad_debug_impl_glProgramUniform1dv;
PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4s(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3, GLshort arg4) {
    _pre_call_gl_callback("glVertexAttrib4s", (GLADapiproc) glVertexAttrib4s, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttrib4s(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttrib4s", (GLADapiproc) glVertexAttrib4s, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIB4SPROC glad_debug_glVertexAttrib4s = glad_debug_impl_glVertexAttrib4s;
PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsBaseVertex(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3, GLint arg4) {
    _pre_call_gl_callback("glDrawElementsBaseVertex", (GLADapiproc) glDrawElementsBaseVertex, 5, arg0, arg1, arg2, arg3, arg4);
    glDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glDrawElementsBaseVertex", (GLADapiproc) glDrawElementsBaseVertex, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLDRAWELEMENTSBASEVERTEXPROC glad_debug_glDrawElementsBaseVertex = glad_debug_impl_glDrawElementsBaseVertex;
PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage = NULL;
void GLAD_API_PTR glad_debug_impl_glSampleCoverage(GLfloat arg0, GLboolean arg1) {
    _pre_call_gl_callback("glSampleCoverage", (GLADapiproc) glSampleCoverage, 2, arg0, arg1);
    glSampleCoverage(arg0, arg1);
    _post_call_gl_callback(NULL, "glSampleCoverage", (GLADapiproc) glSampleCoverage, 2, arg0, arg1);
    
}
PFNGLSAMPLECOVERAGEPROC glad_debug_glSampleCoverage = glad_debug_impl_glSampleCoverage;
PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_gl_callback("glSamplerParameteri", (GLADapiproc) glSamplerParameteri, 3, arg0, arg1, arg2);
    glSamplerParameteri(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameteri", (GLADapiproc) glSamplerParameteri, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERIPROC glad_debug_glSamplerParameteri = glad_debug_impl_glSamplerParameteri;
PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameterf(GLuint arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_gl_callback("glSamplerParameterf", (GLADapiproc) glSamplerParameterf, 3, arg0, arg1, arg2);
    glSamplerParameterf(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameterf", (GLADapiproc) glSamplerParameterf, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERFPROC glad_debug_glSamplerParameterf = glad_debug_impl_glSamplerParameterf;
PFNGLUNIFORM1FPROC glad_glUniform1f = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1f(GLint arg0, GLfloat arg1) {
    _pre_call_gl_callback("glUniform1f", (GLADapiproc) glUniform1f, 2, arg0, arg1);
    glUniform1f(arg0, arg1);
    _post_call_gl_callback(NULL, "glUniform1f", (GLADapiproc) glUniform1f, 2, arg0, arg1);
    
}
PFNGLUNIFORM1FPROC glad_debug_glUniform1f = glad_debug_impl_glUniform1f;
PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribfv(GLuint arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetVertexAttribfv", (GLADapiproc) glGetVertexAttribfv, 3, arg0, arg1, arg2);
    glGetVertexAttribfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribfv", (GLADapiproc) glGetVertexAttribfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBFVPROC glad_debug_glGetVertexAttribfv = glad_debug_impl_glGetVertexAttribfv;
PFNGLUNIFORM1DPROC glad_glUniform1d = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1d(GLint arg0, GLdouble arg1) {
    _pre_call_gl_callback("glUniform1d", (GLADapiproc) glUniform1d, 2, arg0, arg1);
    glUniform1d(arg0, arg1);
    _post_call_gl_callback(NULL, "glUniform1d", (GLADapiproc) glUniform1d, 2, arg0, arg1);
    
}
PFNGLUNIFORM1DPROC glad_debug_glUniform1d = glad_debug_impl_glUniform1d;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage = NULL;
void GLAD_API_PTR glad_debug_impl_glGetCompressedTexImage(GLenum arg0, GLint arg1, void * arg2) {
    _pre_call_gl_callback("glGetCompressedTexImage", (GLADapiproc) glGetCompressedTexImage, 3, arg0, arg1, arg2);
    glGetCompressedTexImage(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetCompressedTexImage", (GLADapiproc) glGetCompressedTexImage, 3, arg0, arg1, arg2);
    
}
PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_debug_glGetCompressedTexImage = glad_debug_impl_glGetCompressedTexImage;
PFNGLUNIFORM1IPROC glad_glUniform1i = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1i(GLint arg0, GLint arg1) {
    _pre_call_gl_callback("glUniform1i", (GLADapiproc) glUniform1i, 2, arg0, arg1);
    glUniform1i(arg0, arg1);
    _post_call_gl_callback(NULL, "glUniform1i", (GLADapiproc) glUniform1i, 2, arg0, arg1);
    
}
PFNGLUNIFORM1IPROC glad_debug_glUniform1i = glad_debug_impl_glUniform1i;
PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveAttrib(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLint * arg4, GLenum * arg5, GLchar * arg6) {
    _pre_call_gl_callback("glGetActiveAttrib", (GLADapiproc) glGetActiveAttrib, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glGetActiveAttrib", (GLADapiproc) glGetActiveAttrib, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLGETACTIVEATTRIBPROC glad_debug_glGetActiveAttrib = glad_debug_impl_glGetActiveAttrib;
PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLenum arg7, const void * arg8) {
    _pre_call_gl_callback("glTexSubImage2D", (GLADapiproc) glTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glTexSubImage2D", (GLADapiproc) glTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLTEXSUBIMAGE2DPROC glad_debug_glTexSubImage2D = glad_debug_impl_glTexSubImage2D;
PFNGLGETUNIFORMIVPROC glad_glGetUniformiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformiv(GLuint arg0, GLint arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetUniformiv", (GLADapiproc) glGetUniformiv, 3, arg0, arg1, arg2);
    glGetUniformiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformiv", (GLADapiproc) glGetUniformiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMIVPROC glad_debug_glGetUniformiv = glad_debug_impl_glGetUniformiv;
PFNGLLOGICOPPROC glad_glLogicOp = NULL;
void GLAD_API_PTR glad_debug_impl_glLogicOp(GLenum arg0) {
    _pre_call_gl_callback("glLogicOp", (GLADapiproc) glLogicOp, 1, arg0);
    glLogicOp(arg0);
    _post_call_gl_callback(NULL, "glLogicOp", (GLADapiproc) glLogicOp, 1, arg0);
    
}
PFNGLLOGICOPPROC glad_debug_glLogicOp = glad_debug_impl_glLogicOp;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3x4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3x4fv", (GLADapiproc) glProgramUniformMatrix3x4fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3x4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3x4fv", (GLADapiproc) glProgramUniformMatrix3x4fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_debug_glProgramUniformMatrix3x4fv = glad_debug_impl_glProgramUniformMatrix3x4fv;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4dv", (GLADapiproc) glProgramUniformMatrix4dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4dv", (GLADapiproc) glProgramUniformMatrix4dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_debug_glProgramUniformMatrix4dv = glad_debug_impl_glProgramUniformMatrix4dv;
PFNGLUNIFORM4UIPROC glad_glUniform4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4ui(GLint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_gl_callback("glUniform4ui", (GLADapiproc) glUniform4ui, 5, arg0, arg1, arg2, arg3, arg4);
    glUniform4ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glUniform4ui", (GLADapiproc) glUniform4ui, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLUNIFORM4UIPROC glad_debug_glUniform4ui = glad_debug_impl_glUniform4ui;
PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBindFramebuffer(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindFramebuffer", (GLADapiproc) glBindFramebuffer, 2, arg0, arg1);
    glBindFramebuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindFramebuffer", (GLADapiproc) glBindFramebuffer, 2, arg0, arg1);
    
}
PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer = glad_debug_impl_glBindFramebuffer;
PFNGLCULLFACEPROC glad_glCullFace = NULL;
void GLAD_API_PTR glad_debug_impl_glCullFace(GLenum arg0) {
    _pre_call_gl_callback("glCullFace", (GLADapiproc) glCullFace, 1, arg0);
    glCullFace(arg0);
    _post_call_gl_callback(NULL, "glCullFace", (GLADapiproc) glCullFace, 1, arg0);
    
}
PFNGLCULLFACEPROC glad_debug_glCullFace = glad_debug_impl_glCullFace;
PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5) {
    _pre_call_gl_callback("glProgramUniform4i", (GLADapiproc) glProgramUniform4i, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glProgramUniform4i(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glProgramUniform4i", (GLADapiproc) glProgramUniform4i, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLPROGRAMUNIFORM4IPROC glad_debug_glProgramUniform4i = glad_debug_impl_glProgramUniform4i;
PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_gl_callback("glProgramUniform4f", (GLADapiproc) glProgramUniform4f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glProgramUniform4f(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glProgramUniform4f", (GLADapiproc) glProgramUniform4f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLPROGRAMUNIFORM4FPROC glad_debug_glProgramUniform4f = glad_debug_impl_glProgramUniform4f;
PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf = NULL;
void GLAD_API_PTR glad_debug_impl_glViewportIndexedf(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glViewportIndexedf", (GLADapiproc) glViewportIndexedf, 5, arg0, arg1, arg2, arg3, arg4);
    glViewportIndexedf(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glViewportIndexedf", (GLADapiproc) glViewportIndexedf, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf = glad_debug_impl_glViewportIndexedf;
PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_gl_callback("glProgramUniform4d", (GLADapiproc) glProgramUniform4d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glProgramUniform4d(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glProgramUniform4d", (GLADapiproc) glProgramUniform4d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLPROGRAMUNIFORM4DPROC glad_debug_glProgramUniform4d = glad_debug_impl_glProgramUniform4d;
PFNGLGETSTRINGIPROC glad_glGetStringi = NULL;
const GLubyte * GLAD_API_PTR glad_debug_impl_glGetStringi(GLenum arg0, GLuint arg1) {
    const GLubyte * ret;
    _pre_call_gl_callback("glGetStringi", (GLADapiproc) glGetStringi, 2, arg0, arg1);
    ret = glGetStringi(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetStringi", (GLADapiproc) glGetStringi, 2, arg0, arg1);
    return ret;
}
PFNGLGETSTRINGIPROC glad_debug_glGetStringi = glad_debug_impl_glGetStringi;
PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glScissorIndexed(GLuint arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glScissorIndexed", (GLADapiproc) glScissorIndexed, 5, arg0, arg1, arg2, arg3, arg4);
    glScissorIndexed(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glScissorIndexed", (GLADapiproc) glScissorIndexed, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLSCISSORINDEXEDPROC glad_debug_glScissorIndexed = glad_debug_impl_glScissorIndexed;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawTransformFeedbackStream(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glDrawTransformFeedbackStream", (GLADapiproc) glDrawTransformFeedbackStream, 3, arg0, arg1, arg2);
    glDrawTransformFeedbackStream(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glDrawTransformFeedbackStream", (GLADapiproc) glDrawTransformFeedbackStream, 3, arg0, arg1, arg2);
    
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_debug_glDrawTransformFeedbackStream = glad_debug_impl_glDrawTransformFeedbackStream;
PFNGLATTACHSHADERPROC glad_glAttachShader = NULL;
void GLAD_API_PTR glad_debug_impl_glAttachShader(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glAttachShader", (GLADapiproc) glAttachShader, 2, arg0, arg1);
    glAttachShader(arg0, arg1);
    _post_call_gl_callback(NULL, "glAttachShader", (GLADapiproc) glAttachShader, 2, arg0, arg1);
    
}
PFNGLATTACHSHADERPROC glad_debug_glAttachShader = glad_debug_impl_glAttachShader;
PFNGLQUERYCOUNTERPROC glad_glQueryCounter = NULL;
void GLAD_API_PTR glad_debug_impl_glQueryCounter(GLuint arg0, GLenum arg1) {
    _pre_call_gl_callback("glQueryCounter", (GLADapiproc) glQueryCounter, 2, arg0, arg1);
    glQueryCounter(arg0, arg1);
    _post_call_gl_callback(NULL, "glQueryCounter", (GLADapiproc) glQueryCounter, 2, arg0, arg1);
    
}
PFNGLQUERYCOUNTERPROC glad_debug_glQueryCounter = glad_debug_impl_glQueryCounter;
PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glProvokingVertex(GLenum arg0) {
    _pre_call_gl_callback("glProvokingVertex", (GLADapiproc) glProvokingVertex, 1, arg0);
    glProvokingVertex(arg0);
    _post_call_gl_callback(NULL, "glProvokingVertex", (GLADapiproc) glProvokingVertex, 1, arg0);
    
}
PFNGLPROVOKINGVERTEXPROC glad_debug_glProvokingVertex = glad_debug_impl_glProvokingVertex;
PFNGLSHADERBINARYPROC glad_glShaderBinary = NULL;
void GLAD_API_PTR glad_debug_impl_glShaderBinary(GLsizei arg0, const GLuint * arg1, GLenum arg2, const void * arg3, GLsizei arg4) {
    _pre_call_gl_callback("glShaderBinary", (GLADapiproc) glShaderBinary, 5, arg0, arg1, arg2, arg3, arg4);
    glShaderBinary(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glShaderBinary", (GLADapiproc) glShaderBinary, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLSHADERBINARYPROC glad_debug_glShaderBinary = glad_debug_impl_glShaderBinary;
PFNGLDRAWELEMENTSPROC glad_glDrawElements = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElements(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3) {
    _pre_call_gl_callback("glDrawElements", (GLADapiproc) glDrawElements, 4, arg0, arg1, arg2, arg3);
    glDrawElements(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glDrawElements", (GLADapiproc) glDrawElements, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLDRAWELEMENTSPROC glad_debug_glDrawElements = glad_debug_impl_glDrawElements;
PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttribI4sv", (GLADapiproc) glVertexAttribI4sv, 2, arg0, arg1);
    glVertexAttribI4sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4sv", (GLADapiproc) glVertexAttribI4sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4SVPROC glad_debug_glVertexAttribI4sv = glad_debug_impl_glVertexAttribI4sv;
PFNGLUNIFORM1IVPROC glad_glUniform1iv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1iv(GLint arg0, GLsizei arg1, const GLint * arg2) {
    _pre_call_gl_callback("glUniform1iv", (GLADapiproc) glUniform1iv, 3, arg0, arg1, arg2);
    glUniform1iv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform1iv", (GLADapiproc) glUniform1iv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM1IVPROC glad_debug_glUniform1iv = glad_debug_impl_glUniform1iv;
PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glCreateShaderProgramv(GLenum arg0, GLsizei arg1, const GLchar *const* arg2) {
    GLuint ret;
    _pre_call_gl_callback("glCreateShaderProgramv", (GLADapiproc) glCreateShaderProgramv, 3, arg0, arg1, arg2);
    ret = glCreateShaderProgramv(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glCreateShaderProgramv", (GLADapiproc) glCreateShaderProgramv, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLCREATESHADERPROGRAMVPROC glad_debug_glCreateShaderProgramv = glad_debug_impl_glCreateShaderProgramv;
PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryObjectiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetQueryObjectiv", (GLADapiproc) glGetQueryObjectiv, 3, arg0, arg1, arg2);
    glGetQueryObjectiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryObjectiv", (GLADapiproc) glGetQueryObjectiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYOBJECTIVPROC glad_debug_glGetQueryObjectiv = glad_debug_impl_glGetQueryObjectiv;
PFNGLREADBUFFERPROC glad_glReadBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glReadBuffer(GLenum arg0) {
    _pre_call_gl_callback("glReadBuffer", (GLADapiproc) glReadBuffer, 1, arg0);
    glReadBuffer(arg0);
    _post_call_gl_callback(NULL, "glReadBuffer", (GLADapiproc) glReadBuffer, 1, arg0);
    
}
PFNGLREADBUFFERPROC glad_debug_glReadBuffer = glad_debug_impl_glReadBuffer;
PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameterIuiv(GLenum arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glTexParameterIuiv", (GLADapiproc) glTexParameterIuiv, 3, arg0, arg1, arg2);
    glTexParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameterIuiv", (GLADapiproc) glTexParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERIUIVPROC glad_debug_glTexParameterIuiv = glad_debug_impl_glTexParameterIuiv;
PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawArraysInstanced(GLenum arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glDrawArraysInstanced", (GLADapiproc) glDrawArraysInstanced, 4, arg0, arg1, arg2, arg3);
    glDrawArraysInstanced(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glDrawArraysInstanced", (GLADapiproc) glDrawArraysInstanced, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLDRAWARRAYSINSTANCEDPROC glad_debug_glDrawArraysInstanced = glad_debug_impl_glDrawArraysInstanced;
PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap = NULL;
void GLAD_API_PTR glad_debug_impl_glGenerateMipmap(GLenum arg0) {
    _pre_call_gl_callback("glGenerateMipmap", (GLADapiproc) glGenerateMipmap, 1, arg0);
    glGenerateMipmap(arg0);
    _post_call_gl_callback(NULL, "glGenerateMipmap", (GLADapiproc) glGenerateMipmap, 1, arg0);
    
}
PFNGLGENERATEMIPMAPPROC glad_debug_glGenerateMipmap = glad_debug_impl_glGenerateMipmap;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2fv", (GLADapiproc) glProgramUniformMatrix2fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2fv", (GLADapiproc) glProgramUniformMatrix2fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_debug_glProgramUniformMatrix2fv = glad_debug_impl_glProgramUniformMatrix2fv;
PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameteriv(GLuint arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glSamplerParameteriv", (GLADapiproc) glSamplerParameteriv, 3, arg0, arg1, arg2);
    glSamplerParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameteriv", (GLADapiproc) glSamplerParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERIVPROC glad_debug_glSamplerParameteriv = glad_debug_impl_glSamplerParameteriv;
PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3f(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glVertexAttrib3f", (GLADapiproc) glVertexAttrib3f, 4, arg0, arg1, arg2, arg3);
    glVertexAttrib3f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttrib3f", (GLADapiproc) glVertexAttrib3f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIB3FPROC glad_debug_glVertexAttrib3f = glad_debug_impl_glVertexAttrib3f;
PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttrib4uiv", (GLADapiproc) glVertexAttrib4uiv, 2, arg0, arg1);
    glVertexAttrib4uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4uiv", (GLADapiproc) glVertexAttrib4uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4UIVPROC glad_debug_glVertexAttrib4uiv = glad_debug_impl_glVertexAttrib4uiv;
PFNGLPOINTPARAMETERIPROC glad_glPointParameteri = NULL;
void GLAD_API_PTR glad_debug_impl_glPointParameteri(GLenum arg0, GLint arg1) {
    _pre_call_gl_callback("glPointParameteri", (GLADapiproc) glPointParameteri, 2, arg0, arg1);
    glPointParameteri(arg0, arg1);
    _post_call_gl_callback(NULL, "glPointParameteri", (GLADapiproc) glPointParameteri, 2, arg0, arg1);
    
}
PFNGLPOINTPARAMETERIPROC glad_debug_glPointParameteri = glad_debug_impl_glPointParameteri;
PFNGLBLENDCOLORPROC glad_glBlendColor = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendColor(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glBlendColor", (GLADapiproc) glBlendColor, 4, arg0, arg1, arg2, arg3);
    glBlendColor(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBlendColor", (GLADapiproc) glBlendColor, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBLENDCOLORPROC glad_debug_glBlendColor = glad_debug_impl_glBlendColor;
PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameterIuiv(GLuint arg0, GLenum arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glSamplerParameterIuiv", (GLADapiproc) glSamplerParameterIuiv, 3, arg0, arg1, arg2);
    glSamplerParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameterIuiv", (GLADapiproc) glSamplerParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERIUIVPROC glad_debug_glSamplerParameterIuiv = glad_debug_impl_glSamplerParameterIuiv;
PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glUnmapBuffer(GLenum arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glUnmapBuffer", (GLADapiproc) glUnmapBuffer, 1, arg0);
    ret = glUnmapBuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glUnmapBuffer", (GLADapiproc) glUnmapBuffer, 1, arg0);
    return ret;
}
PFNGLUNMAPBUFFERPROC glad_debug_glUnmapBuffer = glad_debug_impl_glUnmapBuffer;
PFNGLPOINTPARAMETERFPROC glad_glPointParameterf = NULL;
void GLAD_API_PTR glad_debug_impl_glPointParameterf(GLenum arg0, GLfloat arg1) {
    _pre_call_gl_callback("glPointParameterf", (GLADapiproc) glPointParameterf, 2, arg0, arg1);
    glPointParameterf(arg0, arg1);
    _post_call_gl_callback(NULL, "glPointParameterf", (GLADapiproc) glPointParameterf, 2, arg0, arg1);
    
}
PFNGLPOINTPARAMETERFPROC glad_debug_glPointParameterf = glad_debug_impl_glPointParameterf;
PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint * arg3) {
    _pre_call_gl_callback("glProgramUniform1iv", (GLADapiproc) glProgramUniform1iv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform1iv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform1iv", (GLADapiproc) glProgramUniform1iv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM1IVPROC glad_debug_glProgramUniform1iv = glad_debug_impl_glProgramUniform1iv;
PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3s(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_gl_callback("glVertexAttrib3s", (GLADapiproc) glVertexAttrib3s, 4, arg0, arg1, arg2, arg3);
    glVertexAttrib3s(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttrib3s", (GLADapiproc) glVertexAttrib3s, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIB3SPROC glad_debug_glVertexAttrib3s = glad_debug_impl_glVertexAttrib3s;
PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBindRenderbuffer(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindRenderbuffer", (GLADapiproc) glBindRenderbuffer, 2, arg0, arg1);
    glBindRenderbuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindRenderbuffer", (GLADapiproc) glBindRenderbuffer, 2, arg0, arg1);
    
}
PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer = glad_debug_impl_glBindRenderbuffer;
PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP4uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glVertexAttribP4uiv", (GLADapiproc) glVertexAttribP4uiv, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP4uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP4uiv", (GLADapiproc) glVertexAttribP4uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv = glad_debug_impl_glVertexAttribP4uiv;
PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramStageiv(GLuint arg0, GLenum arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetProgramStageiv", (GLADapiproc) glGetProgramStageiv, 4, arg0, arg1, arg2, arg3);
    glGetProgramStageiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetProgramStageiv", (GLADapiproc) glGetProgramStageiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETPROGRAMSTAGEIVPROC glad_debug_glGetProgramStageiv = glad_debug_impl_glGetProgramStageiv;
PFNGLISPROGRAMPROC glad_glIsProgram = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsProgram(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsProgram", (GLADapiproc) glIsProgram, 1, arg0);
    ret = glIsProgram(arg0);
    _post_call_gl_callback((void*) &ret, "glIsProgram", (GLADapiproc) glIsProgram, 1, arg0);
    return ret;
}
PFNGLISPROGRAMPROC glad_debug_glIsProgram = glad_debug_impl_glIsProgram;
PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glPointParameterfv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glPointParameterfv", (GLADapiproc) glPointParameterfv, 2, arg0, arg1);
    glPointParameterfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glPointParameterfv", (GLADapiproc) glPointParameterfv, 2, arg0, arg1);
    
}
PFNGLPOINTPARAMETERFVPROC glad_debug_glPointParameterfv = glad_debug_impl_glPointParameterfv;
PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3x2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glUniformMatrix3x2dv", (GLADapiproc) glUniformMatrix3x2dv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3x2dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3x2dv", (GLADapiproc) glUniformMatrix3x2dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3X2DVPROC glad_debug_glUniformMatrix3x2dv = glad_debug_impl_glUniformMatrix3x2dv;
PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4fv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glVertexAttrib4fv", (GLADapiproc) glVertexAttrib4fv, 2, arg0, arg1);
    glVertexAttrib4fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4fv", (GLADapiproc) glVertexAttrib4fv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4FVPROC glad_debug_glVertexAttrib4fv = glad_debug_impl_glVertexAttrib4fv;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2x3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2x3dv", (GLADapiproc) glProgramUniformMatrix2x3dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2x3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2x3dv", (GLADapiproc) glProgramUniformMatrix2x3dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_debug_glProgramUniformMatrix2x3dv = glad_debug_impl_glProgramUniformMatrix2x3dv;
PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsTransformFeedback(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsTransformFeedback", (GLADapiproc) glIsTransformFeedback, 1, arg0);
    ret = glIsTransformFeedback(arg0);
    _post_call_gl_callback((void*) &ret, "glIsTransformFeedback", (GLADapiproc) glIsTransformFeedback, 1, arg0);
    return ret;
}
PFNGLISTRANSFORMFEEDBACKPROC glad_debug_glIsTransformFeedback = glad_debug_impl_glIsTransformFeedback;
PFNGLUNIFORM4IPROC glad_glUniform4i = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4i(GLint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glUniform4i", (GLADapiproc) glUniform4i, 5, arg0, arg1, arg2, arg3, arg4);
    glUniform4i(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glUniform4i", (GLADapiproc) glUniform4i, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLUNIFORM4IPROC glad_debug_glUniform4i = glad_debug_impl_glUniform4i;
PFNGLACTIVETEXTUREPROC glad_glActiveTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glActiveTexture(GLenum arg0) {
    _pre_call_gl_callback("glActiveTexture", (GLADapiproc) glActiveTexture, 1, arg0);
    glActiveTexture(arg0);
    _post_call_gl_callback(NULL, "glActiveTexture", (GLADapiproc) glActiveTexture, 1, arg0);
    
}
PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture = glad_debug_impl_glActiveTexture;
PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray = NULL;
void GLAD_API_PTR glad_debug_impl_glEnableVertexAttribArray(GLuint arg0) {
    _pre_call_gl_callback("glEnableVertexAttribArray", (GLADapiproc) glEnableVertexAttribArray, 1, arg0);
    glEnableVertexAttribArray(arg0);
    _post_call_gl_callback(NULL, "glEnableVertexAttribArray", (GLADapiproc) glEnableVertexAttribArray, 1, arg0);
    
}
PFNGLENABLEVERTEXATTRIBARRAYPROC glad_debug_glEnableVertexAttribArray = glad_debug_impl_glEnableVertexAttribArray;
PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsProgramPipeline(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsProgramPipeline", (GLADapiproc) glIsProgramPipeline, 1, arg0);
    ret = glIsProgramPipeline(arg0);
    _post_call_gl_callback((void*) &ret, "glIsProgramPipeline", (GLADapiproc) glIsProgramPipeline, 1, arg0);
    return ret;
}
PFNGLISPROGRAMPIPELINEPROC glad_debug_glIsProgramPipeline = glad_debug_impl_glIsProgramPipeline;
PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2fv(GLuint arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glVertexAttrib2fv", (GLADapiproc) glVertexAttrib2fv, 2, arg0, arg1);
    glVertexAttrib2fv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib2fv", (GLADapiproc) glVertexAttrib2fv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB2FVPROC glad_debug_glVertexAttrib2fv = glad_debug_impl_glVertexAttrib2fv;
PFNGLUNIFORM4DPROC glad_glUniform4d = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4d(GLint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glUniform4d", (GLADapiproc) glUniform4d, 5, arg0, arg1, arg2, arg3, arg4);
    glUniform4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glUniform4d", (GLADapiproc) glUniform4d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLUNIFORM4DPROC glad_debug_glUniform4d = glad_debug_impl_glUniform4d;
PFNGLUNIFORM4FPROC glad_glUniform4f = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4f(GLint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glUniform4f", (GLADapiproc) glUniform4f, 5, arg0, arg1, arg2, arg3, arg4);
    glUniform4f(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glUniform4f", (GLADapiproc) glUniform4f, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLUNIFORM4FPROC glad_debug_glUniform4f = glad_debug_impl_glUniform4f;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glRenderbufferStorageMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_gl_callback("glRenderbufferStorageMultisample", (GLADapiproc) glRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);
    glRenderbufferStorageMultisample(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glRenderbufferStorageMultisample", (GLADapiproc) glRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glRenderbufferStorageMultisample = glad_debug_impl_glRenderbufferStorageMultisample;
PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix3fv", (GLADapiproc) glUniformMatrix3fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix3fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix3fv", (GLADapiproc) glUniformMatrix3fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX3FVPROC glad_debug_glUniformMatrix3fv = glad_debug_impl_glUniformMatrix3fv;
PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribLPointer(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void * arg4) {
    _pre_call_gl_callback("glVertexAttribLPointer", (GLADapiproc) glVertexAttribLPointer, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribLPointer(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribLPointer", (GLADapiproc) glVertexAttribLPointer, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer = glad_debug_impl_glVertexAttribLPointer;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawElementsInstancedBaseVertex(GLenum arg0, GLsizei arg1, GLenum arg2, const void * arg3, GLsizei arg4, GLint arg5) {
    _pre_call_gl_callback("glDrawElementsInstancedBaseVertex", (GLADapiproc) glDrawElementsInstancedBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glDrawElementsInstancedBaseVertex", (GLADapiproc) glDrawElementsInstancedBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_debug_glDrawElementsInstancedBaseVertex = glad_debug_impl_glDrawElementsInstancedBaseVertex;
PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL2dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttribL2dv", (GLADapiproc) glVertexAttribL2dv, 2, arg0, arg1);
    glVertexAttribL2dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL2dv", (GLADapiproc) glVertexAttribL2dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv = glad_debug_impl_glVertexAttribL2dv;
PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB = NULL;
void GLAD_API_PTR glad_debug_impl_glReadnPixelsARB(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, GLsizei arg6, void * arg7) {
    _pre_call_gl_callback("glReadnPixelsARB", (GLADapiproc) glReadnPixelsARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glReadnPixelsARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glReadnPixelsARB", (GLADapiproc) glReadnPixelsARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLREADNPIXELSARBPROC glad_debug_glReadnPixelsARB = glad_debug_impl_glReadnPixelsARB;
PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL2d(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glVertexAttribL2d", (GLADapiproc) glVertexAttribL2d, 3, arg0, arg1, arg2);
    glVertexAttribL2d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttribL2d", (GLADapiproc) glVertexAttribL2d, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d = glad_debug_impl_glVertexAttribL2d;
PFNGLSTENCILFUNCPROC glad_glStencilFunc = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilFunc(GLenum arg0, GLint arg1, GLuint arg2) {
    _pre_call_gl_callback("glStencilFunc", (GLADapiproc) glStencilFunc, 3, arg0, arg1, arg2);
    glStencilFunc(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glStencilFunc", (GLADapiproc) glStencilFunc, 3, arg0, arg1, arg2);
    
}
PFNGLSTENCILFUNCPROC glad_debug_glStencilFunc = glad_debug_impl_glStencilFunc;
PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformBlockBinding(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glUniformBlockBinding", (GLADapiproc) glUniformBlockBinding, 3, arg0, arg1, arg2);
    glUniformBlockBinding(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniformBlockBinding", (GLADapiproc) glUniformBlockBinding, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORMBLOCKBINDINGPROC glad_debug_glUniformBlockBinding = glad_debug_impl_glUniformBlockBinding;
PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glProgramUniform3i", (GLADapiproc) glProgramUniform3i, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniform3i(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniform3i", (GLADapiproc) glProgramUniform3i, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORM3IPROC glad_debug_glProgramUniform3i = glad_debug_impl_glProgramUniform3i;
PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages = NULL;
void GLAD_API_PTR glad_debug_impl_glUseProgramStages(GLuint arg0, GLbitfield arg1, GLuint arg2) {
    _pre_call_gl_callback("glUseProgramStages", (GLADapiproc) glUseProgramStages, 3, arg0, arg1, arg2);
    glUseProgramStages(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUseProgramStages", (GLADapiproc) glUseProgramStages, 3, arg0, arg1, arg2);
    
}
PFNGLUSEPROGRAMSTAGESPROC glad_debug_glUseProgramStages = glad_debug_impl_glUseProgramStages;
PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_gl_callback("glProgramUniform3f", (GLADapiproc) glProgramUniform3f, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniform3f(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniform3f", (GLADapiproc) glProgramUniform3f, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORM3FPROC glad_debug_glProgramUniform3f = glad_debug_impl_glProgramUniform3f;
PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glGetGraphicsResetStatusARB(void) {
    GLenum ret;
    _pre_call_gl_callback("glGetGraphicsResetStatusARB", (GLADapiproc) glGetGraphicsResetStatusARB, 0);
    ret = glGetGraphicsResetStatusARB();
    _post_call_gl_callback((void*) &ret, "glGetGraphicsResetStatusARB", (GLADapiproc) glGetGraphicsResetStatusARB, 0);
    return ret;
}
PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_debug_glGetGraphicsResetStatusARB = glad_debug_impl_glGetGraphicsResetStatusARB;
PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_gl_callback("glProgramUniform3d", (GLADapiproc) glProgramUniform3d, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniform3d(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniform3d", (GLADapiproc) glProgramUniform3d, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORM3DPROC glad_debug_glProgramUniform3d = glad_debug_impl_glProgramUniform3d;
PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttribI4iv", (GLADapiproc) glVertexAttribI4iv, 2, arg0, arg1);
    glVertexAttribI4iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4iv", (GLADapiproc) glVertexAttribI4iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4IVPROC glad_debug_glVertexAttribI4iv = glad_debug_impl_glVertexAttribI4iv;
PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetProgramPipelineiv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetProgramPipelineiv", (GLADapiproc) glGetProgramPipelineiv, 3, arg0, arg1, arg2);
    glGetProgramPipelineiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetProgramPipelineiv", (GLADapiproc) glGetProgramPipelineiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETPROGRAMPIPELINEIVPROC glad_debug_glGetProgramPipelineiv = glad_debug_impl_glGetProgramPipelineiv;
PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryIndexediv(GLenum arg0, GLuint arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetQueryIndexediv", (GLADapiproc) glGetQueryIndexediv, 4, arg0, arg1, arg2, arg3);
    glGetQueryIndexediv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetQueryIndexediv", (GLADapiproc) glGetQueryIndexediv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETQUERYINDEXEDIVPROC glad_debug_glGetQueryIndexediv = glad_debug_impl_glGetQueryIndexediv;
PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog = NULL;
void GLAD_API_PTR glad_debug_impl_glGetShaderInfoLog(GLuint arg0, GLsizei arg1, GLsizei * arg2, GLchar * arg3) {
    _pre_call_gl_callback("glGetShaderInfoLog", (GLADapiproc) glGetShaderInfoLog, 4, arg0, arg1, arg2, arg3);
    glGetShaderInfoLog(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetShaderInfoLog", (GLADapiproc) glGetShaderInfoLog, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETSHADERINFOLOGPROC glad_debug_glGetShaderInfoLog = glad_debug_impl_glGetShaderInfoLog;
PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_gl_callback("glVertexAttribI4i", (GLADapiproc) glVertexAttribI4i, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribI4i(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribI4i", (GLADapiproc) glVertexAttribI4i, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBI4IPROC glad_debug_glVertexAttribI4i = glad_debug_impl_glVertexAttribI4i;
PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBufferSubData(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, void * arg3) {
    _pre_call_gl_callback("glGetBufferSubData", (GLADapiproc) glGetBufferSubData, 4, arg0, arg1, arg2, arg3);
    glGetBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetBufferSubData", (GLADapiproc) glGetBufferSubData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETBUFFERSUBDATAPROC glad_debug_glGetBufferSubData = glad_debug_impl_glGetBufferSubData;
PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribLdv(GLuint arg0, GLenum arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetVertexAttribLdv", (GLADapiproc) glGetVertexAttribLdv, 3, arg0, arg1, arg2);
    glGetVertexAttribLdv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribLdv", (GLADapiproc) glGetVertexAttribLdv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBLDVPROC glad_debug_glGetVertexAttribLdv = glad_debug_impl_glGetVertexAttribLdv;
PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendEquationSeparate(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glBlendEquationSeparate", (GLADapiproc) glBlendEquationSeparate, 2, arg0, arg1);
    glBlendEquationSeparate(arg0, arg1);
    _post_call_gl_callback(NULL, "glBlendEquationSeparate", (GLADapiproc) glBlendEquationSeparate, 2, arg0, arg1);
    
}
PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate = glad_debug_impl_glBlendEquationSeparate;
PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI1ui(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexAttribI1ui", (GLADapiproc) glVertexAttribI1ui, 2, arg0, arg1);
    glVertexAttribI1ui(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI1ui", (GLADapiproc) glVertexAttribI1ui, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI1UIPROC glad_debug_glVertexAttribI1ui = glad_debug_impl_glVertexAttribI1ui;
PFNGLGENBUFFERSPROC glad_glGenBuffers = NULL;
void GLAD_API_PTR glad_debug_impl_glGenBuffers(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenBuffers", (GLADapiproc) glGenBuffers, 2, arg0, arg1);
    glGenBuffers(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenBuffers", (GLADapiproc) glGenBuffers, 2, arg0, arg1);
    
}
PFNGLGENBUFFERSPROC glad_debug_glGenBuffers = glad_debug_impl_glGenBuffers;
PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glGetSubroutineIndex(GLuint arg0, GLenum arg1, const GLchar * arg2) {
    GLuint ret;
    _pre_call_gl_callback("glGetSubroutineIndex", (GLADapiproc) glGetSubroutineIndex, 3, arg0, arg1, arg2);
    ret = glGetSubroutineIndex(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glGetSubroutineIndex", (GLADapiproc) glGetSubroutineIndex, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETSUBROUTINEINDEXPROC glad_debug_glGetSubroutineIndex = glad_debug_impl_glGetSubroutineIndex;
PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib2sv", (GLADapiproc) glVertexAttrib2sv, 2, arg0, arg1);
    glVertexAttrib2sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib2sv", (GLADapiproc) glVertexAttrib2sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB2SVPROC glad_debug_glVertexAttrib2sv = glad_debug_impl_glVertexAttrib2sv;
PFNGLBLENDFUNCPROC glad_glBlendFunc = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendFunc(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glBlendFunc", (GLADapiproc) glBlendFunc, 2, arg0, arg1);
    glBlendFunc(arg0, arg1);
    _post_call_gl_callback(NULL, "glBlendFunc", (GLADapiproc) glBlendFunc, 2, arg0, arg1);
    
}
PFNGLBLENDFUNCPROC glad_debug_glBlendFunc = glad_debug_impl_glBlendFunc;
PFNGLCREATEPROGRAMPROC glad_glCreateProgram = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glCreateProgram(void) {
    GLuint ret;
    _pre_call_gl_callback("glCreateProgram", (GLADapiproc) glCreateProgram, 0);
    ret = glCreateProgram();
    _post_call_gl_callback((void*) &ret, "glCreateProgram", (GLADapiproc) glCreateProgram, 0);
    return ret;
}
PFNGLCREATEPROGRAMPROC glad_debug_glCreateProgram = glad_debug_impl_glCreateProgram;
PFNGLTEXIMAGE3DPROC glad_glTexImage3D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage3D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLenum arg7, GLenum arg8, const void * arg9) {
    _pre_call_gl_callback("glTexImage3D", (GLADapiproc) glTexImage3D, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_gl_callback(NULL, "glTexImage3D", (GLADapiproc) glTexImage3D, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    
}
PFNGLTEXIMAGE3DPROC glad_debug_glTexImage3D = glad_debug_impl_glTexImage3D;
PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsFramebuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsFramebuffer", (GLADapiproc) glIsFramebuffer, 1, arg0);
    ret = glIsFramebuffer(arg0);
    _post_call_gl_callback((void*) &ret, "glIsFramebuffer", (GLADapiproc) glIsFramebuffer, 1, arg0);
    return ret;
}
PFNGLISFRAMEBUFFERPROC glad_debug_glIsFramebuffer = glad_debug_impl_glIsFramebuffer;
PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex = NULL;
void GLAD_API_PTR glad_debug_impl_glPrimitiveRestartIndex(GLuint arg0) {
    _pre_call_gl_callback("glPrimitiveRestartIndex", (GLADapiproc) glPrimitiveRestartIndex, 1, arg0);
    glPrimitiveRestartIndex(arg0);
    _post_call_gl_callback(NULL, "glPrimitiveRestartIndex", (GLADapiproc) glPrimitiveRestartIndex, 1, arg0);
    
}
PFNGLPRIMITIVERESTARTINDEXPROC glad_debug_glPrimitiveRestartIndex = glad_debug_impl_glPrimitiveRestartIndex;
PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnUniformdvARB(GLuint arg0, GLint arg1, GLsizei arg2, GLdouble * arg3) {
    _pre_call_gl_callback("glGetnUniformdvARB", (GLADapiproc) glGetnUniformdvARB, 4, arg0, arg1, arg2, arg3);
    glGetnUniformdvARB(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnUniformdvARB", (GLADapiproc) glGetnUniformdvARB, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNUNIFORMDVARBPROC glad_debug_glGetnUniformdvARB = glad_debug_impl_glGetnUniformdvARB;
PFNGLGETINTEGER64VPROC glad_glGetInteger64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetInteger64v(GLenum arg0, GLint64 * arg1) {
    _pre_call_gl_callback("glGetInteger64v", (GLADapiproc) glGetInteger64v, 2, arg0, arg1);
    glGetInteger64v(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetInteger64v", (GLADapiproc) glGetInteger64v, 2, arg0, arg1);
    
}
PFNGLGETINTEGER64VPROC glad_debug_glGetInteger64v = glad_debug_impl_glGetInteger64v;
PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline = NULL;
void GLAD_API_PTR glad_debug_impl_glBindProgramPipeline(GLuint arg0) {
    _pre_call_gl_callback("glBindProgramPipeline", (GLADapiproc) glBindProgramPipeline, 1, arg0);
    glBindProgramPipeline(arg0);
    _post_call_gl_callback(NULL, "glBindProgramPipeline", (GLADapiproc) glBindProgramPipeline, 1, arg0);
    
}
PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline = glad_debug_impl_glBindProgramPipeline;
PFNGLSCISSORPROC glad_glScissor = NULL;
void GLAD_API_PTR glad_debug_impl_glScissor(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_gl_callback("glScissor", (GLADapiproc) glScissor, 4, arg0, arg1, arg2, arg3);
    glScissor(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glScissor", (GLADapiproc) glScissor, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSCISSORPROC glad_debug_glScissor = glad_debug_impl_glScissor;
PFNGLGETBOOLEANVPROC glad_glGetBooleanv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBooleanv(GLenum arg0, GLboolean * arg1) {
    _pre_call_gl_callback("glGetBooleanv", (GLADapiproc) glGetBooleanv, 2, arg0, arg1);
    glGetBooleanv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetBooleanv", (GLADapiproc) glGetBooleanv, 2, arg0, arg1);
    
}
PFNGLGETBOOLEANVPROC glad_debug_glGetBooleanv = glad_debug_impl_glGetBooleanv;
PFNGLUNIFORM3UIVPROC glad_glUniform3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3uiv(GLint arg0, GLsizei arg1, const GLuint * arg2) {
    _pre_call_gl_callback("glUniform3uiv", (GLADapiproc) glUniform3uiv, 3, arg0, arg1, arg2);
    glUniform3uiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform3uiv", (GLADapiproc) glUniform3uiv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM3UIVPROC glad_debug_glUniform3uiv = glad_debug_impl_glUniform3uiv;
PFNGLCLEARCOLORPROC glad_glClearColor = NULL;
void GLAD_API_PTR glad_debug_impl_glClearColor(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glClearColor", (GLADapiproc) glClearColor, 4, arg0, arg1, arg2, arg3);
    glClearColor(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glClearColor", (GLADapiproc) glClearColor, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCLEARCOLORPROC glad_debug_glClearColor = glad_debug_impl_glClearColor;
PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Niv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Niv", (GLADapiproc) glVertexAttrib4Niv, 2, arg0, arg1);
    glVertexAttrib4Niv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Niv", (GLADapiproc) glVertexAttrib4Niv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NIVPROC glad_debug_glVertexAttrib4Niv = glad_debug_impl_glVertexAttrib4Niv;
PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv = NULL;
void GLAD_API_PTR glad_debug_impl_glClearBufferiv(GLenum arg0, GLint arg1, const GLint * arg2) {
    _pre_call_gl_callback("glClearBufferiv", (GLADapiproc) glClearBufferiv, 3, arg0, arg1, arg2);
    glClearBufferiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glClearBufferiv", (GLADapiproc) glClearBufferiv, 3, arg0, arg1, arg2);
    
}
PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv = glad_debug_impl_glClearBufferiv;
PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glVertexAttrib3d", (GLADapiproc) glVertexAttrib3d, 4, arg0, arg1, arg2, arg3);
    glVertexAttrib3d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttrib3d", (GLADapiproc) glVertexAttrib3d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIB3DPROC glad_debug_glVertexAttrib3d = glad_debug_impl_glVertexAttrib3d;
PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glProgramUniform4dv", (GLADapiproc) glProgramUniform4dv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform4dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform4dv", (GLADapiproc) glProgramUniform4dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM4DVPROC glad_debug_glProgramUniform4dv = glad_debug_impl_glProgramUniform4dv;
PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI2uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttribI2uiv", (GLADapiproc) glVertexAttribI2uiv, 2, arg0, arg1);
    glVertexAttribI2uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI2uiv", (GLADapiproc) glVertexAttribI2uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI2UIVPROC glad_debug_glVertexAttribI2uiv = glad_debug_impl_glVertexAttribI2uiv;
PFNGLUNIFORM3UIPROC glad_glUniform3ui = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3ui(GLint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_gl_callback("glUniform3ui", (GLADapiproc) glUniform3ui, 4, arg0, arg1, arg2, arg3);
    glUniform3ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniform3ui", (GLADapiproc) glUniform3ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORM3UIPROC glad_debug_glUniform3ui = glad_debug_impl_glUniform3ui;
PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glProgramUniform3uiv", (GLADapiproc) glProgramUniform3uiv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform3uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform3uiv", (GLADapiproc) glProgramUniform3uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM3UIVPROC glad_debug_glProgramUniform3uiv = glad_debug_impl_glProgramUniform3uiv;
PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttribI4uiv", (GLADapiproc) glVertexAttribI4uiv, 2, arg0, arg1);
    glVertexAttribI4uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4uiv", (GLADapiproc) glVertexAttribI4uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4UIVPROC glad_debug_glVertexAttribI4uiv = glad_debug_impl_glVertexAttribI4uiv;
PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4bv(GLuint arg0, const GLbyte * arg1) {
    _pre_call_gl_callback("glVertexAttrib4bv", (GLADapiproc) glVertexAttrib4bv, 2, arg0, arg1);
    glVertexAttrib4bv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4bv", (GLADapiproc) glVertexAttrib4bv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4BVPROC glad_debug_glVertexAttrib4bv = glad_debug_impl_glVertexAttrib4bv;
PFNGLUNIFORM2FVPROC glad_glUniform2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform2fv(GLint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glUniform2fv", (GLADapiproc) glUniform2fv, 3, arg0, arg1, arg2);
    glUniform2fv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform2fv", (GLADapiproc) glUniform2fv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM2FVPROC glad_debug_glUniform2fv = glad_debug_impl_glUniform2fv;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveSubroutineUniformName(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, GLsizei * arg4, GLchar * arg5) {
    _pre_call_gl_callback("glGetActiveSubroutineUniformName", (GLADapiproc) glGetActiveSubroutineUniformName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glGetActiveSubroutineUniformName(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glGetActiveSubroutineUniformName", (GLADapiproc) glGetActiveSubroutineUniformName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_debug_glGetActiveSubroutineUniformName = glad_debug_impl_glGetActiveSubroutineUniformName;
PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSamplerParameterIuiv(GLuint arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetSamplerParameterIuiv", (GLADapiproc) glGetSamplerParameterIuiv, 3, arg0, arg1, arg2);
    glGetSamplerParameterIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetSamplerParameterIuiv", (GLADapiproc) glGetSamplerParameterIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSAMPLERPARAMETERIUIVPROC glad_debug_glGetSamplerParameterIuiv = glad_debug_impl_glGetSamplerParameterIuiv;
PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange = NULL;
void GLAD_API_PTR glad_debug_impl_glBindBufferRange(GLenum arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_gl_callback("glBindBufferRange", (GLADapiproc) glBindBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    glBindBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glBindBufferRange", (GLADapiproc) glBindBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange = glad_debug_impl_glBindBufferRange;
PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribL3dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttribL3dv", (GLADapiproc) glVertexAttribL3dv, 2, arg0, arg1);
    glVertexAttribL3dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribL3dv", (GLADapiproc) glVertexAttribL3dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv = glad_debug_impl_glVertexAttribL3dv;
PFNGLGETUNIFORMDVPROC glad_glGetUniformdv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformdv(GLuint arg0, GLint arg1, GLdouble * arg2) {
    _pre_call_gl_callback("glGetUniformdv", (GLADapiproc) glGetUniformdv, 3, arg0, arg1, arg2);
    glGetUniformdv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformdv", (GLADapiproc) glGetUniformdv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMDVPROC glad_debug_glGetUniformdv = glad_debug_impl_glGetUniformdv;
PFNGLCLEARDEPTHFPROC glad_glClearDepthf = NULL;
void GLAD_API_PTR glad_debug_impl_glClearDepthf(GLfloat arg0) {
    _pre_call_gl_callback("glClearDepthf", (GLADapiproc) glClearDepthf, 1, arg0);
    glClearDepthf(arg0);
    _post_call_gl_callback(NULL, "glClearDepthf", (GLADapiproc) glClearDepthf, 1, arg0);
    
}
PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf = glad_debug_impl_glClearDepthf;
PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2x3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix2x3fv", (GLADapiproc) glUniformMatrix2x3fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2x3fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2x3fv", (GLADapiproc) glUniformMatrix2x3fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2X3FVPROC glad_debug_glUniformMatrix2x3fv = glad_debug_impl_glUniformMatrix2x3fv;
PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks = NULL;
void GLAD_API_PTR glad_debug_impl_glGenTransformFeedbacks(GLsizei arg0, GLuint * arg1) {
    _pre_call_gl_callback("glGenTransformFeedbacks", (GLADapiproc) glGenTransformFeedbacks, 2, arg0, arg1);
    glGenTransformFeedbacks(arg0, arg1);
    _post_call_gl_callback(NULL, "glGenTransformFeedbacks", (GLADapiproc) glGenTransformFeedbacks, 2, arg0, arg1);
    
}
PFNGLGENTRANSFORMFEEDBACKSPROC glad_debug_glGenTransformFeedbacks = glad_debug_impl_glGenTransformFeedbacks;
PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetVertexAttribIuiv(GLuint arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetVertexAttribIuiv", (GLADapiproc) glGetVertexAttribIuiv, 3, arg0, arg1, arg2);
    glGetVertexAttribIuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetVertexAttribIuiv", (GLADapiproc) glGetVertexAttribIuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETVERTEXATTRIBIUIVPROC glad_debug_glGetVertexAttribIuiv = glad_debug_impl_glGetVertexAttribIuiv;
PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nusv(GLuint arg0, const GLushort * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nusv", (GLADapiproc) glVertexAttrib4Nusv, 2, arg0, arg1);
    glVertexAttrib4Nusv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nusv", (GLADapiproc) glVertexAttrib4Nusv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NUSVPROC glad_debug_glVertexAttrib4Nusv = glad_debug_impl_glVertexAttrib4Nusv;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4x3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4x3dv", (GLADapiproc) glProgramUniformMatrix4x3dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4x3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4x3dv", (GLADapiproc) glProgramUniformMatrix4x3dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_debug_glProgramUniformMatrix4x3dv = glad_debug_impl_glProgramUniformMatrix4x3dv;
PFNGLCOLORMASKPROC glad_glColorMask = NULL;
void GLAD_API_PTR glad_debug_impl_glColorMask(GLboolean arg0, GLboolean arg1, GLboolean arg2, GLboolean arg3) {
    _pre_call_gl_callback("glColorMask", (GLADapiproc) glColorMask, 4, arg0, arg1, arg2, arg3);
    glColorMask(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glColorMask", (GLADapiproc) glColorMask, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLCOLORMASKPROC glad_debug_glColorMask = glad_debug_impl_glColorMask;
PFNGLREADNPIXELSPROC glad_glReadnPixels = NULL;
void GLAD_API_PTR glad_debug_impl_glReadnPixels(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, GLsizei arg6, void * arg7) {
    _pre_call_gl_callback("glReadnPixels", (GLADapiproc) glReadnPixels, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    glReadnPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_gl_callback(NULL, "glReadnPixels", (GLADapiproc) glReadnPixels, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    
}
PFNGLREADNPIXELSPROC glad_debug_glReadnPixels = glad_debug_impl_glReadnPixels;
PFNGLPROGRAMBINARYPROC glad_glProgramBinary = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramBinary(GLuint arg0, GLenum arg1, const void * arg2, GLsizei arg3) {
    _pre_call_gl_callback("glProgramBinary", (GLADapiproc) glProgramBinary, 4, arg0, arg1, arg2, arg3);
    glProgramBinary(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramBinary", (GLADapiproc) glProgramBinary, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMBINARYPROC glad_debug_glProgramBinary = glad_debug_impl_glProgramBinary;
PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4bv(GLuint arg0, const GLbyte * arg1) {
    _pre_call_gl_callback("glVertexAttribI4bv", (GLADapiproc) glVertexAttribI4bv, 2, arg0, arg1);
    glVertexAttribI4bv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI4bv", (GLADapiproc) glVertexAttribI4bv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI4BVPROC glad_debug_glVertexAttribI4bv = glad_debug_impl_glVertexAttribI4bv;
PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexParameterfv(GLenum arg0, GLenum arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetTexParameterfv", (GLADapiproc) glGetTexParameterfv, 3, arg0, arg1, arg2);
    glGetTexParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexParameterfv", (GLADapiproc) glGetTexParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXPARAMETERFVPROC glad_debug_glGetTexParameterfv = glad_debug_impl_glGetTexParameterfv;
PFNGLBLENDFUNCIPROC glad_glBlendFunci = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendFunci(GLuint arg0, GLenum arg1, GLenum arg2) {
    _pre_call_gl_callback("glBlendFunci", (GLADapiproc) glBlendFunci, 3, arg0, arg1, arg2);
    glBlendFunci(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBlendFunci", (GLADapiproc) glBlendFunci, 3, arg0, arg1, arg2);
    
}
PFNGLBLENDFUNCIPROC glad_debug_glBlendFunci = glad_debug_impl_glBlendFunci;
PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glClientWaitSync(GLsync arg0, GLbitfield arg1, GLuint64 arg2) {
    GLenum ret;
    _pre_call_gl_callback("glClientWaitSync", (GLADapiproc) glClientWaitSync, 3, arg0, arg1, arg2);
    ret = glClientWaitSync(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glClientWaitSync", (GLADapiproc) glClientWaitSync, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync = glad_debug_impl_glClientWaitSync;
PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI4ui(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_gl_callback("glVertexAttribI4ui", (GLADapiproc) glVertexAttribI4ui, 5, arg0, arg1, arg2, arg3, arg4);
    glVertexAttribI4ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glVertexAttribI4ui", (GLADapiproc) glVertexAttribI4ui, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLVERTEXATTRIBI4UIPROC glad_debug_glVertexAttribI4ui = glad_debug_impl_glVertexAttribI4ui;
PFNGLGETFLOATI_VPROC glad_glGetFloati_v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetFloati_v(GLenum arg0, GLuint arg1, GLfloat * arg2) {
    _pre_call_gl_callback("glGetFloati_v", (GLADapiproc) glGetFloati_v, 3, arg0, arg1, arg2);
    glGetFloati_v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetFloati_v", (GLADapiproc) glGetFloati_v, 3, arg0, arg1, arg2);
    
}
PFNGLGETFLOATI_VPROC glad_debug_glGetFloati_v = glad_debug_impl_glGetFloati_v;
PFNGLDEPTHFUNCPROC glad_glDepthFunc = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthFunc(GLenum arg0) {
    _pre_call_gl_callback("glDepthFunc", (GLADapiproc) glDepthFunc, 1, arg0);
    glDepthFunc(arg0);
    _post_call_gl_callback(NULL, "glDepthFunc", (GLADapiproc) glDepthFunc, 1, arg0);
    
}
PFNGLDEPTHFUNCPROC glad_debug_glDepthFunc = glad_debug_impl_glDepthFunc;
PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameterIiv(GLenum arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glTexParameterIiv", (GLADapiproc) glTexParameterIiv, 3, arg0, arg1, arg2);
    glTexParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameterIiv", (GLADapiproc) glTexParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERIIVPROC glad_debug_glTexParameterIiv = glad_debug_impl_glTexParameterIiv;
PFNGLBLENDEQUATIONPROC glad_glBlendEquation = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendEquation(GLenum arg0) {
    _pre_call_gl_callback("glBlendEquation", (GLADapiproc) glBlendEquation, 1, arg0);
    glBlendEquation(arg0);
    _post_call_gl_callback(NULL, "glBlendEquation", (GLADapiproc) glBlendEquation, 1, arg0);
    
}
PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation = glad_debug_impl_glBlendEquation;
PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetUniformLocation(GLuint arg0, const GLchar * arg1) {
    GLint ret;
    _pre_call_gl_callback("glGetUniformLocation", (GLADapiproc) glGetUniformLocation, 2, arg0, arg1);
    ret = glGetUniformLocation(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetUniformLocation", (GLADapiproc) glGetUniformLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMLOCATIONPROC glad_debug_glGetUniformLocation = glad_debug_impl_glGetUniformLocation;
PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nsv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nsv", (GLADapiproc) glVertexAttrib4Nsv, 2, arg0, arg1);
    glVertexAttrib4Nsv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nsv", (GLADapiproc) glVertexAttrib4Nsv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NSVPROC glad_debug_glVertexAttrib4Nsv = glad_debug_impl_glVertexAttrib4Nsv;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLsizei arg7, const void * arg8) {
    _pre_call_gl_callback("glCompressedTexSubImage2D", (GLADapiproc) glCompressedTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glCompressedTexSubImage2D", (GLADapiproc) glCompressedTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D = glad_debug_impl_glCompressedTexSubImage2D;
PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glEndTransformFeedback(void) {
    _pre_call_gl_callback("glEndTransformFeedback", (GLADapiproc) glEndTransformFeedback, 0);
    glEndTransformFeedback();
    _post_call_gl_callback(NULL, "glEndTransformFeedback", (GLADapiproc) glEndTransformFeedback, 0);
    
}
PFNGLENDTRANSFORMFEEDBACKPROC glad_debug_glEndTransformFeedback = glad_debug_impl_glEndTransformFeedback;
PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4usv(GLuint arg0, const GLushort * arg1) {
    _pre_call_gl_callback("glVertexAttrib4usv", (GLADapiproc) glVertexAttrib4usv, 2, arg0, arg1);
    glVertexAttrib4usv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4usv", (GLADapiproc) glVertexAttrib4usv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4USVPROC glad_debug_glVertexAttrib4usv = glad_debug_impl_glVertexAttrib4usv;
PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetUniformSubroutineuiv(GLenum arg0, GLint arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetUniformSubroutineuiv", (GLADapiproc) glGetUniformSubroutineuiv, 3, arg0, arg1, arg2);
    glGetUniformSubroutineuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetUniformSubroutineuiv", (GLADapiproc) glGetUniformSubroutineuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_debug_glGetUniformSubroutineuiv = glad_debug_impl_glGetUniformSubroutineuiv;
PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage2DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLboolean arg5) {
    _pre_call_gl_callback("glTexImage2DMultisample", (GLADapiproc) glTexImage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glTexImage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glTexImage2DMultisample", (GLADapiproc) glTexImage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_debug_glTexImage2DMultisample = glad_debug_impl_glTexImage2DMultisample;
PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glBeginTransformFeedback(GLenum arg0) {
    _pre_call_gl_callback("glBeginTransformFeedback", (GLADapiproc) glBeginTransformFeedback, 1, arg0);
    glBeginTransformFeedback(arg0);
    _post_call_gl_callback(NULL, "glBeginTransformFeedback", (GLADapiproc) glBeginTransformFeedback, 1, arg0);
    
}
PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback = glad_debug_impl_glBeginTransformFeedback;
PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI1iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttribI1iv", (GLADapiproc) glVertexAttribI1iv, 2, arg0, arg1);
    glVertexAttribI1iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI1iv", (GLADapiproc) glVertexAttribI1iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI1IVPROC glad_debug_glVertexAttribI1iv = glad_debug_impl_glVertexAttribI1iv;
PFNGLISSAMPLERPROC glad_glIsSampler = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsSampler(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsSampler", (GLADapiproc) glIsSampler, 1, arg0);
    ret = glIsSampler(arg0);
    _post_call_gl_callback((void*) &ret, "glIsSampler", (GLADapiproc) glIsSampler, 1, arg0);
    return ret;
}
PFNGLISSAMPLERPROC glad_debug_glIsSampler = glad_debug_impl_glIsSampler;
PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribDivisor(GLuint arg0, GLuint arg1) {
    _pre_call_gl_callback("glVertexAttribDivisor", (GLADapiproc) glVertexAttribDivisor, 2, arg0, arg1);
    glVertexAttribDivisor(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribDivisor", (GLADapiproc) glVertexAttribDivisor, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBDIVISORPROC glad_debug_glVertexAttribDivisor = glad_debug_impl_glVertexAttribDivisor;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCompressedTexImage1D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLint arg4, GLsizei arg5, const void * arg6) {
    _pre_call_gl_callback("glCompressedTexImage1D", (GLADapiproc) glCompressedTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glCompressedTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glCompressedTexImage1D", (GLADapiproc) glCompressedTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D = glad_debug_impl_glCompressedTexImage1D;
PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteTransformFeedbacks(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteTransformFeedbacks", (GLADapiproc) glDeleteTransformFeedbacks, 2, arg0, arg1);
    glDeleteTransformFeedbacks(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteTransformFeedbacks", (GLADapiproc) glDeleteTransformFeedbacks, 2, arg0, arg1);
    
}
PFNGLDELETETRANSFORMFEEDBACKSPROC glad_debug_glDeleteTransformFeedbacks = glad_debug_impl_glDeleteTransformFeedbacks;
PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5) {
    _pre_call_gl_callback("glCopyTexSubImage1D", (GLADapiproc) glCopyTexSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glCopyTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glCopyTexSubImage1D", (GLADapiproc) glCopyTexSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D = glad_debug_impl_glCopyTexSubImage1D;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawRangeElementsBaseVertex(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, GLenum arg4, const void * arg5, GLint arg6) {
    _pre_call_gl_callback("glDrawRangeElementsBaseVertex", (GLADapiproc) glDrawRangeElementsBaseVertex, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glDrawRangeElementsBaseVertex", (GLADapiproc) glDrawRangeElementsBaseVertex, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_debug_glDrawRangeElementsBaseVertex = glad_debug_impl_glDrawRangeElementsBaseVertex;
PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glCheckFramebufferStatus(GLenum arg0) {
    GLenum ret;
    _pre_call_gl_callback("glCheckFramebufferStatus", (GLADapiproc) glCheckFramebufferStatus, 1, arg0);
    ret = glCheckFramebufferStatus(arg0);
    _post_call_gl_callback((void*) &ret, "glCheckFramebufferStatus", (GLADapiproc) glCheckFramebufferStatus, 1, arg0);
    return ret;
}
PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus = glad_debug_impl_glCheckFramebufferStatus;
PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender = NULL;
void GLAD_API_PTR glad_debug_impl_glEndConditionalRender(void) {
    _pre_call_gl_callback("glEndConditionalRender", (GLADapiproc) glEndConditionalRender, 0);
    glEndConditionalRender();
    _post_call_gl_callback(NULL, "glEndConditionalRender", (GLADapiproc) glEndConditionalRender, 0);
    
}
PFNGLENDCONDITIONALRENDERPROC glad_debug_glEndConditionalRender = glad_debug_impl_glEndConditionalRender;
PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation = NULL;
void GLAD_API_PTR glad_debug_impl_glBindAttribLocation(GLuint arg0, GLuint arg1, const GLchar * arg2) {
    _pre_call_gl_callback("glBindAttribLocation", (GLADapiproc) glBindAttribLocation, 3, arg0, arg1, arg2);
    glBindAttribLocation(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBindAttribLocation", (GLADapiproc) glBindAttribLocation, 3, arg0, arg1, arg2);
    
}
PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation = glad_debug_impl_glBindAttribLocation;
PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4x2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix4x2fv", (GLADapiproc) glUniformMatrix4x2fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4x2fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4x2fv", (GLADapiproc) glUniformMatrix4x2fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4X2FVPROC glad_debug_glUniformMatrix4x2fv = glad_debug_impl_glUniformMatrix4x2fv;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings = NULL;
void GLAD_API_PTR glad_debug_impl_glTransformFeedbackVaryings(GLuint arg0, GLsizei arg1, const GLchar *const* arg2, GLenum arg3) {
    _pre_call_gl_callback("glTransformFeedbackVaryings", (GLADapiproc) glTransformFeedbackVaryings, 4, arg0, arg1, arg2, arg3);
    glTransformFeedbackVaryings(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glTransformFeedbackVaryings", (GLADapiproc) glTransformFeedbackVaryings, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_debug_glTransformFeedbackVaryings = glad_debug_impl_glTransformFeedbackVaryings;
PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib1dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttrib1dv", (GLADapiproc) glVertexAttrib1dv, 2, arg0, arg1);
    glVertexAttrib1dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib1dv", (GLADapiproc) glVertexAttrib1dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB1DVPROC glad_debug_glVertexAttrib1dv = glad_debug_impl_glVertexAttrib1dv;
PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements = NULL;
void GLAD_API_PTR glad_debug_impl_glDrawRangeElements(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, GLenum arg4, const void * arg5) {
    _pre_call_gl_callback("glDrawRangeElements", (GLADapiproc) glDrawRangeElements, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glDrawRangeElements(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glDrawRangeElements", (GLADapiproc) glDrawRangeElements, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLDRAWRANGEELEMENTSPROC glad_debug_glDrawRangeElements = glad_debug_impl_glDrawRangeElements;
PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryObjectuiv(GLuint arg0, GLenum arg1, GLuint * arg2) {
    _pre_call_gl_callback("glGetQueryObjectuiv", (GLADapiproc) glGetQueryObjectuiv, 3, arg0, arg1, arg2);
    glGetQueryObjectuiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryObjectuiv", (GLADapiproc) glGetQueryObjectuiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYOBJECTUIVPROC glad_debug_glGetQueryObjectuiv = glad_debug_impl_glGetQueryObjectuiv;
PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameterIiv(GLuint arg0, GLenum arg1, const GLint * arg2) {
    _pre_call_gl_callback("glSamplerParameterIiv", (GLADapiproc) glSamplerParameterIiv, 3, arg0, arg1, arg2);
    glSamplerParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameterIiv", (GLADapiproc) glSamplerParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERIIVPROC glad_debug_glSamplerParameterIiv = glad_debug_impl_glSamplerParameterIiv;
PFNGLBUFFERSUBDATAPROC glad_glBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glBufferSubData(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, const void * arg3) {
    _pre_call_gl_callback("glBufferSubData", (GLADapiproc) glBufferSubData, 4, arg0, arg1, arg2, arg3);
    glBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBufferSubData", (GLADapiproc) glBufferSubData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData = glad_debug_impl_glBufferSubData;
PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttrib4iv", (GLADapiproc) glVertexAttrib4iv, 2, arg0, arg1);
    glVertexAttrib4iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4iv", (GLADapiproc) glVertexAttrib4iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4IVPROC glad_debug_glVertexAttrib4iv = glad_debug_impl_glVertexAttrib4iv;
PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glProgramUniform1uiv", (GLADapiproc) glProgramUniform1uiv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform1uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform1uiv", (GLADapiproc) glProgramUniform1uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM1UIVPROC glad_debug_glProgramUniform1uiv = glad_debug_impl_glProgramUniform1uiv;
PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTexture(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3) {
    _pre_call_gl_callback("glFramebufferTexture", (GLADapiproc) glFramebufferTexture, 4, arg0, arg1, arg2, arg3);
    glFramebufferTexture(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glFramebufferTexture", (GLADapiproc) glFramebufferTexture, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLFRAMEBUFFERTEXTUREPROC glad_debug_glFramebufferTexture = glad_debug_impl_glFramebufferTexture;
PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei = NULL;
void GLAD_API_PTR glad_debug_impl_glBlendFuncSeparatei(GLuint arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLenum arg4) {
    _pre_call_gl_callback("glBlendFuncSeparatei", (GLADapiproc) glBlendFuncSeparatei, 5, arg0, arg1, arg2, arg3, arg4);
    glBlendFuncSeparatei(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glBlendFuncSeparatei", (GLADapiproc) glBlendFuncSeparatei, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLBLENDFUNCSEPARATEIPROC glad_debug_glBlendFuncSeparatei = glad_debug_impl_glBlendFuncSeparatei;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix4x2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix4x2fv", (GLADapiproc) glProgramUniformMatrix4x2fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix4x2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix4x2fv", (GLADapiproc) glProgramUniformMatrix4x2fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_debug_glProgramUniformMatrix4x2fv = glad_debug_impl_glProgramUniformMatrix4x2fv;
PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays = NULL;
void GLAD_API_PTR glad_debug_impl_glMultiDrawArrays(GLenum arg0, const GLint * arg1, const GLsizei * arg2, GLsizei arg3) {
    _pre_call_gl_callback("glMultiDrawArrays", (GLADapiproc) glMultiDrawArrays, 4, arg0, arg1, arg2, arg3);
    glMultiDrawArrays(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glMultiDrawArrays", (GLADapiproc) glMultiDrawArrays, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLMULTIDRAWARRAYSPROC glad_debug_glMultiDrawArrays = glad_debug_impl_glMultiDrawArrays;
PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI2iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttribI2iv", (GLADapiproc) glVertexAttribI2iv, 2, arg0, arg1);
    glVertexAttribI2iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI2iv", (GLADapiproc) glVertexAttribI2iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI2IVPROC glad_debug_glVertexAttribI2iv = glad_debug_impl_glVertexAttribI2iv;
PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat = NULL;
void GLAD_API_PTR glad_debug_impl_glGetShaderPrecisionFormat(GLenum arg0, GLenum arg1, GLint * arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetShaderPrecisionFormat", (GLADapiproc) glGetShaderPrecisionFormat, 4, arg0, arg1, arg2, arg3);
    glGetShaderPrecisionFormat(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetShaderPrecisionFormat", (GLADapiproc) glGetShaderPrecisionFormat, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETSHADERPRECISIONFORMATPROC glad_debug_glGetShaderPrecisionFormat = glad_debug_impl_glGetShaderPrecisionFormat;
PFNGLDISABLEIPROC glad_glDisablei = NULL;
void GLAD_API_PTR glad_debug_impl_glDisablei(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glDisablei", (GLADapiproc) glDisablei, 2, arg0, arg1);
    glDisablei(arg0, arg1);
    _post_call_gl_callback(NULL, "glDisablei", (GLADapiproc) glDisablei, 2, arg0, arg1);
    
}
PFNGLDISABLEIPROC glad_debug_glDisablei = glad_debug_impl_glDisablei;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix2x4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix2x4fv", (GLADapiproc) glProgramUniformMatrix2x4fv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix2x4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix2x4fv", (GLADapiproc) glProgramUniformMatrix2x4fv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_debug_glProgramUniformMatrix2x4fv = glad_debug_impl_glProgramUniformMatrix2x4fv;
PFNGLSHADERSOURCEPROC glad_glShaderSource = NULL;
void GLAD_API_PTR glad_debug_impl_glShaderSource(GLuint arg0, GLsizei arg1, const GLchar *const* arg2, const GLint * arg3) {
    _pre_call_gl_callback("glShaderSource", (GLADapiproc) glShaderSource, 4, arg0, arg1, arg2, arg3);
    glShaderSource(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glShaderSource", (GLADapiproc) glShaderSource, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLSHADERSOURCEPROC glad_debug_glShaderSource = glad_debug_impl_glShaderSource;
PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed = NULL;
void GLAD_API_PTR glad_debug_impl_glBeginQueryIndexed(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_gl_callback("glBeginQueryIndexed", (GLADapiproc) glBeginQueryIndexed, 3, arg0, arg1, arg2);
    glBeginQueryIndexed(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glBeginQueryIndexed", (GLADapiproc) glBeginQueryIndexed, 3, arg0, arg1, arg2);
    
}
PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed = glad_debug_impl_glBeginQueryIndexed;
PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI3uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttribI3uiv", (GLADapiproc) glVertexAttribI3uiv, 2, arg0, arg1);
    glVertexAttribI3uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI3uiv", (GLADapiproc) glVertexAttribI3uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI3UIVPROC glad_debug_glVertexAttribI3uiv = glad_debug_impl_glVertexAttribI3uiv;
PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler = NULL;
void GLAD_API_PTR glad_debug_impl_glReleaseShaderCompiler(void) {
    _pre_call_gl_callback("glReleaseShaderCompiler", (GLADapiproc) glReleaseShaderCompiler, 0);
    glReleaseShaderCompiler();
    _post_call_gl_callback(NULL, "glReleaseShaderCompiler", (GLADapiproc) glReleaseShaderCompiler, 0);
    
}
PFNGLRELEASESHADERCOMPILERPROC glad_debug_glReleaseShaderCompiler = glad_debug_impl_glReleaseShaderCompiler;
PFNGLGETSYNCIVPROC glad_glGetSynciv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSynciv(GLsync arg0, GLenum arg1, GLsizei arg2, GLsizei * arg3, GLint * arg4) {
    _pre_call_gl_callback("glGetSynciv", (GLADapiproc) glGetSynciv, 5, arg0, arg1, arg2, arg3, arg4);
    glGetSynciv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glGetSynciv", (GLADapiproc) glGetSynciv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLGETSYNCIVPROC glad_debug_glGetSynciv = glad_debug_impl_glGetSynciv;
PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glProgramUniform2uiv", (GLADapiproc) glProgramUniform2uiv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2uiv", (GLADapiproc) glProgramUniform2uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2UIVPROC glad_debug_glProgramUniform2uiv = glad_debug_impl_glProgramUniform2uiv;
PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble * arg3) {
    _pre_call_gl_callback("glProgramUniform2dv", (GLADapiproc) glProgramUniform2dv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2dv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2dv", (GLADapiproc) glProgramUniform2dv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2DVPROC glad_debug_glProgramUniform2dv = glad_debug_impl_glProgramUniform2dv;
PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glPatchParameterfv(GLenum arg0, const GLfloat * arg1) {
    _pre_call_gl_callback("glPatchParameterfv", (GLADapiproc) glPatchParameterfv, 2, arg0, arg1);
    glPatchParameterfv(arg0, arg1);
    _post_call_gl_callback(NULL, "glPatchParameterfv", (GLADapiproc) glPatchParameterfv, 2, arg0, arg1);
    
}
PFNGLPATCHPARAMETERFVPROC glad_debug_glPatchParameterfv = glad_debug_impl_glPatchParameterfv;
PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_gl_callback("glProgramUniform2i", (GLADapiproc) glProgramUniform2i, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2i(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2i", (GLADapiproc) glProgramUniform2i, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2IPROC glad_debug_glProgramUniform2i = glad_debug_impl_glProgramUniform2i;
PFNGLBEGINQUERYPROC glad_glBeginQuery = NULL;
void GLAD_API_PTR glad_debug_impl_glBeginQuery(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBeginQuery", (GLADapiproc) glBeginQuery, 2, arg0, arg1);
    glBeginQuery(arg0, arg1);
    _post_call_gl_callback(NULL, "glBeginQuery", (GLADapiproc) glBeginQuery, 2, arg0, arg1);
    
}
PFNGLBEGINQUERYPROC glad_debug_glBeginQuery = glad_debug_impl_glBeginQuery;
PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix4fv", (GLADapiproc) glUniformMatrix4fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix4fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix4fv", (GLADapiproc) glUniformMatrix4fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX4FVPROC glad_debug_glUniformMatrix4fv = glad_debug_impl_glUniformMatrix4fv;
PFNGLBINDBUFFERPROC glad_glBindBuffer = NULL;
void GLAD_API_PTR glad_debug_impl_glBindBuffer(GLenum arg0, GLuint arg1) {
    _pre_call_gl_callback("glBindBuffer", (GLADapiproc) glBindBuffer, 2, arg0, arg1);
    glBindBuffer(arg0, arg1);
    _post_call_gl_callback(NULL, "glBindBuffer", (GLADapiproc) glBindBuffer, 2, arg0, arg1);
    
}
PFNGLBINDBUFFERPROC glad_debug_glBindBuffer = glad_debug_impl_glBindBuffer;
PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_gl_callback("glProgramUniform2d", (GLADapiproc) glProgramUniform2d, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2d(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2d", (GLADapiproc) glProgramUniform2d, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2DPROC glad_debug_glProgramUniform2d = glad_debug_impl_glProgramUniform2d;
PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform2f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_gl_callback("glProgramUniform2f", (GLADapiproc) glProgramUniform2f, 4, arg0, arg1, arg2, arg3);
    glProgramUniform2f(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform2f", (GLADapiproc) glProgramUniform2f, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM2FPROC glad_debug_glProgramUniform2f = glad_debug_impl_glProgramUniform2f;
PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix2fv", (GLADapiproc) glUniformMatrix2fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2fv", (GLADapiproc) glUniformMatrix2fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2FVPROC glad_debug_glUniformMatrix2fv = glad_debug_impl_glUniformMatrix2fv;
PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniformMatrix2x4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glUniformMatrix2x4fv", (GLADapiproc) glUniformMatrix2x4fv, 4, arg0, arg1, arg2, arg3);
    glUniformMatrix2x4fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glUniformMatrix2x4fv", (GLADapiproc) glUniformMatrix2x4fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLUNIFORMMATRIX2X4FVPROC glad_debug_glUniformMatrix2x4fv = glad_debug_impl_glUniformMatrix2x4fv;
PFNGLBUFFERDATAPROC glad_glBufferData = NULL;
void GLAD_API_PTR glad_debug_impl_glBufferData(GLenum arg0, GLsizeiptr arg1, const void * arg2, GLenum arg3) {
    _pre_call_gl_callback("glBufferData", (GLADapiproc) glBufferData, 4, arg0, arg1, arg2, arg3);
    glBufferData(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glBufferData", (GLADapiproc) glBufferData, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLBUFFERDATAPROC glad_debug_glBufferData = glad_debug_impl_glBufferData;
PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexParameterIiv(GLenum arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetTexParameterIiv", (GLADapiproc) glGetTexParameterIiv, 3, arg0, arg1, arg2);
    glGetTexParameterIiv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetTexParameterIiv", (GLADapiproc) glGetTexParameterIiv, 3, arg0, arg1, arg2);
    
}
PFNGLGETTEXPARAMETERIIVPROC glad_debug_glGetTexParameterIiv = glad_debug_impl_glGetTexParameterIiv;
PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback = NULL;
void GLAD_API_PTR glad_debug_impl_glPauseTransformFeedback(void) {
    _pre_call_gl_callback("glPauseTransformFeedback", (GLADapiproc) glPauseTransformFeedback, 0);
    glPauseTransformFeedback();
    _post_call_gl_callback(NULL, "glPauseTransformFeedback", (GLADapiproc) glPauseTransformFeedback, 0);
    
}
PFNGLPAUSETRANSFORMFEEDBACKPROC glad_debug_glPauseTransformFeedback = glad_debug_impl_glPauseTransformFeedback;
PFNGLGETERRORPROC glad_glGetError = NULL;
GLenum GLAD_API_PTR glad_debug_impl_glGetError(void) {
    GLenum ret;
    _pre_call_gl_callback("glGetError", (GLADapiproc) glGetError, 0);
    ret = glGetError();
    _post_call_gl_callback((void*) &ret, "glGetError", (GLADapiproc) glGetError, 0);
    return ret;
}
PFNGLGETERRORPROC glad_debug_glGetError = glad_debug_impl_glGetError;
PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP2ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_gl_callback("glVertexAttribP2ui", (GLADapiproc) glVertexAttribP2ui, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP2ui(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP2ui", (GLADapiproc) glVertexAttribP2ui, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui = glad_debug_impl_glVertexAttribP2ui;
PFNGLGETFLOATVPROC glad_glGetFloatv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetFloatv(GLenum arg0, GLfloat * arg1) {
    _pre_call_gl_callback("glGetFloatv", (GLADapiproc) glGetFloatv, 2, arg0, arg1);
    glGetFloatv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetFloatv", (GLADapiproc) glGetFloatv, 2, arg0, arg1);
    
}
PFNGLGETFLOATVPROC glad_debug_glGetFloatv = glad_debug_impl_glGetFloatv;
PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void * arg6) {
    _pre_call_gl_callback("glTexSubImage1D", (GLADapiproc) glTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glTexSubImage1D", (GLADapiproc) glTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLTEXSUBIMAGE1DPROC glad_debug_glTexSubImage1D = glad_debug_impl_glTexSubImage1D;
PFNGLREADPIXELSPROC glad_glReadPixels = NULL;
void GLAD_API_PTR glad_debug_impl_glReadPixels(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, void * arg6) {
    _pre_call_gl_callback("glReadPixels", (GLADapiproc) glReadPixels, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glReadPixels", (GLADapiproc) glReadPixels, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLREADPIXELSPROC glad_debug_glReadPixels = glad_debug_impl_glReadPixels;
PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetTexLevelParameterfv(GLenum arg0, GLint arg1, GLenum arg2, GLfloat * arg3) {
    _pre_call_gl_callback("glGetTexLevelParameterfv", (GLADapiproc) glGetTexLevelParameterfv, 4, arg0, arg1, arg2, arg3);
    glGetTexLevelParameterfv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetTexLevelParameterfv", (GLADapiproc) glGetTexLevelParameterfv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETTEXLEVELPARAMETERFVPROC glad_debug_glGetTexLevelParameterfv = glad_debug_impl_glGetTexLevelParameterfv;
PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI1i(GLuint arg0, GLint arg1) {
    _pre_call_gl_callback("glVertexAttribI1i", (GLADapiproc) glVertexAttribI1i, 2, arg0, arg1);
    glVertexAttribI1i(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI1i", (GLADapiproc) glVertexAttribI1i, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI1IPROC glad_debug_glVertexAttribI1i = glad_debug_impl_glVertexAttribI1i;
PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribP3uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint * arg3) {
    _pre_call_gl_callback("glVertexAttribP3uiv", (GLADapiproc) glVertexAttribP3uiv, 4, arg0, arg1, arg2, arg3);
    glVertexAttribP3uiv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glVertexAttribP3uiv", (GLADapiproc) glVertexAttribP3uiv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv = glad_debug_impl_glVertexAttribP3uiv;
PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI3iv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glVertexAttribI3iv", (GLADapiproc) glVertexAttribI3iv, 2, arg0, arg1);
    glVertexAttribI3iv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI3iv", (GLADapiproc) glVertexAttribI3iv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI3IVPROC glad_debug_glVertexAttribI3iv = glad_debug_impl_glVertexAttribI3iv;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB = NULL;
void GLAD_API_PTR glad_debug_impl_glGetnCompressedTexImageARB(GLenum arg0, GLint arg1, GLsizei arg2, void * arg3) {
    _pre_call_gl_callback("glGetnCompressedTexImageARB", (GLADapiproc) glGetnCompressedTexImageARB, 4, arg0, arg1, arg2, arg3);
    glGetnCompressedTexImageARB(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetnCompressedTexImageARB", (GLADapiproc) glGetnCompressedTexImageARB, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_debug_glGetnCompressedTexImageARB = glad_debug_impl_glGetnCompressedTexImageARB;
PFNGLGETINTEGERVPROC glad_glGetIntegerv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetIntegerv(GLenum arg0, GLint * arg1) {
    _pre_call_gl_callback("glGetIntegerv", (GLADapiproc) glGetIntegerv, 2, arg0, arg1);
    glGetIntegerv(arg0, arg1);
    _post_call_gl_callback(NULL, "glGetIntegerv", (GLADapiproc) glGetIntegerv, 2, arg0, arg1);
    
}
PFNGLGETINTEGERVPROC glad_debug_glGetIntegerv = glad_debug_impl_glGetIntegerv;
PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetBufferPointerv(GLenum arg0, GLenum arg1, void ** arg2) {
    _pre_call_gl_callback("glGetBufferPointerv", (GLADapiproc) glGetBufferPointerv, 3, arg0, arg1, arg2);
    glGetBufferPointerv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetBufferPointerv", (GLADapiproc) glGetBufferPointerv, 3, arg0, arg1, arg2);
    
}
PFNGLGETBUFFERPOINTERVPROC glad_debug_glGetBufferPointerv = glad_debug_impl_glGetBufferPointerv;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniformMatrix3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble * arg4) {
    _pre_call_gl_callback("glProgramUniformMatrix3dv", (GLADapiproc) glProgramUniformMatrix3dv, 5, arg0, arg1, arg2, arg3, arg4);
    glProgramUniformMatrix3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glProgramUniformMatrix3dv", (GLADapiproc) glProgramUniformMatrix3dv, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_debug_glProgramUniformMatrix3dv = glad_debug_impl_glProgramUniformMatrix3dv;
PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D = NULL;
void GLAD_API_PTR glad_debug_impl_glFramebufferTexture3D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4, GLint arg5) {
    _pre_call_gl_callback("glFramebufferTexture3D", (GLADapiproc) glFramebufferTexture3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glFramebufferTexture3D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glFramebufferTexture3D", (GLADapiproc) glFramebufferTexture3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLFRAMEBUFFERTEXTURE3DPROC glad_debug_glFramebufferTexture3D = glad_debug_impl_glFramebufferTexture3D;
PFNGLISQUERYPROC glad_glIsQuery = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsQuery(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsQuery", (GLADapiproc) glIsQuery, 1, arg0);
    ret = glIsQuery(arg0);
    _post_call_gl_callback((void*) &ret, "glIsQuery", (GLADapiproc) glIsQuery, 1, arg0);
    return ret;
}
PFNGLISQUERYPROC glad_debug_glIsQuery = glad_debug_impl_glIsQuery;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetFramebufferAttachmentParameteriv(GLenum arg0, GLenum arg1, GLenum arg2, GLint * arg3) {
    _pre_call_gl_callback("glGetFramebufferAttachmentParameteriv", (GLADapiproc) glGetFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);
    glGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glGetFramebufferAttachmentParameteriv", (GLADapiproc) glGetFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetFramebufferAttachmentParameteriv = glad_debug_impl_glGetFramebufferAttachmentParameteriv;
PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform4ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5) {
    _pre_call_gl_callback("glProgramUniform4ui", (GLADapiproc) glProgramUniform4ui, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    glProgramUniform4ui(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_gl_callback(NULL, "glProgramUniform4ui", (GLADapiproc) glProgramUniform4ui, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    
}
PFNGLPROGRAMUNIFORM4UIPROC glad_debug_glProgramUniform4ui = glad_debug_impl_glProgramUniform4ui;
PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4sv(GLuint arg0, const GLshort * arg1) {
    _pre_call_gl_callback("glVertexAttrib4sv", (GLADapiproc) glVertexAttrib4sv, 2, arg0, arg1);
    glVertexAttrib4sv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4sv", (GLADapiproc) glVertexAttrib4sv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4SVPROC glad_debug_glVertexAttrib4sv = glad_debug_impl_glVertexAttrib4sv;
PFNGLTEXIMAGE2DPROC glad_glTexImage2D = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage2D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4, GLint arg5, GLenum arg6, GLenum arg7, const void * arg8) {
    _pre_call_gl_callback("glTexImage2D", (GLADapiproc) glTexImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_gl_callback(NULL, "glTexImage2D", (GLADapiproc) glTexImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    
}
PFNGLTEXIMAGE2DPROC glad_debug_glTexImage2D = glad_debug_impl_glTexImage2D;
PFNGLSTENCILMASKPROC glad_glStencilMask = NULL;
void GLAD_API_PTR glad_debug_impl_glStencilMask(GLuint arg0) {
    _pre_call_gl_callback("glStencilMask", (GLADapiproc) glStencilMask, 1, arg0);
    glStencilMask(arg0);
    _post_call_gl_callback(NULL, "glStencilMask", (GLADapiproc) glStencilMask, 1, arg0);
    
}
PFNGLSTENCILMASKPROC glad_debug_glStencilMask = glad_debug_impl_glStencilMask;
PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glSamplerParameterfv(GLuint arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glSamplerParameterfv", (GLADapiproc) glSamplerParameterfv, 3, arg0, arg1, arg2);
    glSamplerParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glSamplerParameterfv", (GLADapiproc) glSamplerParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLSAMPLERPARAMETERFVPROC glad_debug_glSamplerParameterfv = glad_debug_impl_glSamplerParameterfv;
PFNGLISTEXTUREPROC glad_glIsTexture = NULL;
GLboolean GLAD_API_PTR glad_debug_impl_glIsTexture(GLuint arg0) {
    GLboolean ret;
    _pre_call_gl_callback("glIsTexture", (GLADapiproc) glIsTexture, 1, arg0);
    ret = glIsTexture(arg0);
    _post_call_gl_callback((void*) &ret, "glIsTexture", (GLADapiproc) glIsTexture, 1, arg0);
    return ret;
}
PFNGLISTEXTUREPROC glad_debug_glIsTexture = glad_debug_impl_glIsTexture;
PFNGLUNIFORM1FVPROC glad_glUniform1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform1fv(GLint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glUniform1fv", (GLADapiproc) glUniform1fv, 3, arg0, arg1, arg2);
    glUniform1fv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform1fv", (GLADapiproc) glUniform1fv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM1FVPROC glad_debug_glUniform1fv = glad_debug_impl_glUniform1fv;
PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib4Nubv(GLuint arg0, const GLubyte * arg1) {
    _pre_call_gl_callback("glVertexAttrib4Nubv", (GLADapiproc) glVertexAttrib4Nubv, 2, arg0, arg1);
    glVertexAttrib4Nubv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib4Nubv", (GLADapiproc) glVertexAttrib4Nubv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB4NUBVPROC glad_debug_glVertexAttrib4Nubv = glad_debug_impl_glVertexAttrib4Nubv;
PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv = NULL;
void GLAD_API_PTR glad_debug_impl_glTexParameterfv(GLenum arg0, GLenum arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glTexParameterfv", (GLADapiproc) glTexParameterfv, 3, arg0, arg1, arg2);
    glTexParameterfv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glTexParameterfv", (GLADapiproc) glTexParameterfv, 3, arg0, arg1, arg2);
    
}
PFNGLTEXPARAMETERFVPROC glad_debug_glTexParameterfv = glad_debug_impl_glTexParameterfv;
PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv = NULL;
void GLAD_API_PTR glad_debug_impl_glScissorIndexedv(GLuint arg0, const GLint * arg1) {
    _pre_call_gl_callback("glScissorIndexedv", (GLADapiproc) glScissorIndexedv, 2, arg0, arg1);
    glScissorIndexedv(arg0, arg1);
    _post_call_gl_callback(NULL, "glScissorIndexedv", (GLADapiproc) glScissorIndexedv, 2, arg0, arg1);
    
}
PFNGLSCISSORINDEXEDVPROC glad_debug_glScissorIndexedv = glad_debug_impl_glScissorIndexedv;
PFNGLUNIFORM3DVPROC glad_glUniform3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform3dv(GLint arg0, GLsizei arg1, const GLdouble * arg2) {
    _pre_call_gl_callback("glUniform3dv", (GLADapiproc) glUniform3dv, 3, arg0, arg1, arg2);
    glUniform3dv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform3dv", (GLADapiproc) glUniform3dv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM3DVPROC glad_debug_glUniform3dv = glad_debug_impl_glUniform3dv;
PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetFragDataLocation(GLuint arg0, const GLchar * arg1) {
    GLint ret;
    _pre_call_gl_callback("glGetFragDataLocation", (GLADapiproc) glGetFragDataLocation, 2, arg0, arg1);
    ret = glGetFragDataLocation(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetFragDataLocation", (GLADapiproc) glGetFragDataLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETFRAGDATALOCATIONPROC glad_debug_glGetFragDataLocation = glad_debug_impl_glGetFragDataLocation;
PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform3fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glProgramUniform3fv", (GLADapiproc) glProgramUniform3fv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform3fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform3fv", (GLADapiproc) glProgramUniform3fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM3FVPROC glad_debug_glProgramUniform3fv = glad_debug_impl_glProgramUniform3fv;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation = NULL;
GLint GLAD_API_PTR glad_debug_impl_glGetSubroutineUniformLocation(GLuint arg0, GLenum arg1, const GLchar * arg2) {
    GLint ret;
    _pre_call_gl_callback("glGetSubroutineUniformLocation", (GLADapiproc) glGetSubroutineUniformLocation, 3, arg0, arg1, arg2);
    ret = glGetSubroutineUniformLocation(arg0, arg1, arg2);
    _post_call_gl_callback((void*) &ret, "glGetSubroutineUniformLocation", (GLADapiproc) glGetSubroutineUniformLocation, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_debug_glGetSubroutineUniformLocation = glad_debug_impl_glGetSubroutineUniformLocation;
PFNGLHINTPROC glad_glHint = NULL;
void GLAD_API_PTR glad_debug_impl_glHint(GLenum arg0, GLenum arg1) {
    _pre_call_gl_callback("glHint", (GLADapiproc) glHint, 2, arg0, arg1);
    glHint(arg0, arg1);
    _post_call_gl_callback(NULL, "glHint", (GLADapiproc) glHint, 2, arg0, arg1);
    
}
PFNGLHINTPROC glad_debug_glHint = glad_debug_impl_glHint;
PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv = NULL;
void GLAD_API_PTR glad_debug_impl_glGetSamplerParameteriv(GLuint arg0, GLenum arg1, GLint * arg2) {
    _pre_call_gl_callback("glGetSamplerParameteriv", (GLADapiproc) glGetSamplerParameteriv, 3, arg0, arg1, arg2);
    glGetSamplerParameteriv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetSamplerParameteriv", (GLADapiproc) glGetSamplerParameteriv, 3, arg0, arg1, arg2);
    
}
PFNGLGETSAMPLERPARAMETERIVPROC glad_debug_glGetSamplerParameteriv = glad_debug_impl_glGetSamplerParameteriv;
PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData = NULL;
void GLAD_API_PTR glad_debug_impl_glCopyBufferSubData(GLenum arg0, GLenum arg1, GLintptr arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_gl_callback("glCopyBufferSubData", (GLADapiproc) glCopyBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);
    glCopyBufferSubData(arg0, arg1, arg2, arg3, arg4);
    _post_call_gl_callback(NULL, "glCopyBufferSubData", (GLADapiproc) glCopyBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);
    
}
PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData = glad_debug_impl_glCopyBufferSubData;
PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttribI1uiv(GLuint arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glVertexAttribI1uiv", (GLADapiproc) glVertexAttribI1uiv, 2, arg0, arg1);
    glVertexAttribI1uiv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttribI1uiv", (GLADapiproc) glVertexAttribI1uiv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIBI1UIVPROC glad_debug_glVertexAttribI1uiv = glad_debug_impl_glVertexAttribI1uiv;
PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2d(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_gl_callback("glVertexAttrib2d", (GLADapiproc) glVertexAttrib2d, 3, arg0, arg1, arg2);
    glVertexAttrib2d(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttrib2d", (GLADapiproc) glVertexAttrib2d, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIB2DPROC glad_debug_glVertexAttrib2d = glad_debug_impl_glVertexAttrib2d;
PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2f(GLuint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_gl_callback("glVertexAttrib2f", (GLADapiproc) glVertexAttrib2f, 3, arg0, arg1, arg2);
    glVertexAttrib2f(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttrib2f", (GLADapiproc) glVertexAttrib2f, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIB2FPROC glad_debug_glVertexAttrib2f = glad_debug_impl_glVertexAttrib2f;
PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib3dv(GLuint arg0, const GLdouble * arg1) {
    _pre_call_gl_callback("glVertexAttrib3dv", (GLADapiproc) glVertexAttrib3dv, 2, arg0, arg1);
    glVertexAttrib3dv(arg0, arg1);
    _post_call_gl_callback(NULL, "glVertexAttrib3dv", (GLADapiproc) glVertexAttrib3dv, 2, arg0, arg1);
    
}
PFNGLVERTEXATTRIB3DVPROC glad_debug_glVertexAttrib3dv = glad_debug_impl_glVertexAttrib3dv;
PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v = NULL;
void GLAD_API_PTR glad_debug_impl_glGetQueryObjectui64v(GLuint arg0, GLenum arg1, GLuint64 * arg2) {
    _pre_call_gl_callback("glGetQueryObjectui64v", (GLADapiproc) glGetQueryObjectui64v, 3, arg0, arg1, arg2);
    glGetQueryObjectui64v(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glGetQueryObjectui64v", (GLADapiproc) glGetQueryObjectui64v, 3, arg0, arg1, arg2);
    
}
PFNGLGETQUERYOBJECTUI64VPROC glad_debug_glGetQueryObjectui64v = glad_debug_impl_glGetQueryObjectui64v;
PFNGLDEPTHMASKPROC glad_glDepthMask = NULL;
void GLAD_API_PTR glad_debug_impl_glDepthMask(GLboolean arg0) {
    _pre_call_gl_callback("glDepthMask", (GLADapiproc) glDepthMask, 1, arg0);
    glDepthMask(arg0);
    _post_call_gl_callback(NULL, "glDepthMask", (GLADapiproc) glDepthMask, 1, arg0);
    
}
PFNGLDEPTHMASKPROC glad_debug_glDepthMask = glad_debug_impl_glDepthMask;
PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s = NULL;
void GLAD_API_PTR glad_debug_impl_glVertexAttrib2s(GLuint arg0, GLshort arg1, GLshort arg2) {
    _pre_call_gl_callback("glVertexAttrib2s", (GLADapiproc) glVertexAttrib2s, 3, arg0, arg1, arg2);
    glVertexAttrib2s(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glVertexAttrib2s", (GLADapiproc) glVertexAttrib2s, 3, arg0, arg1, arg2);
    
}
PFNGLVERTEXATTRIB2SPROC glad_debug_glVertexAttrib2s = glad_debug_impl_glVertexAttrib2s;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample = NULL;
void GLAD_API_PTR glad_debug_impl_glTexImage3DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_gl_callback("glTexImage3DMultisample", (GLADapiproc) glTexImage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glTexImage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glTexImage3DMultisample", (GLADapiproc) glTexImage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_debug_glTexImage3DMultisample = glad_debug_impl_glTexImage3DMultisample;
PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv = NULL;
void GLAD_API_PTR glad_debug_impl_glProgramUniform1fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat * arg3) {
    _pre_call_gl_callback("glProgramUniform1fv", (GLADapiproc) glProgramUniform1fv, 4, arg0, arg1, arg2, arg3);
    glProgramUniform1fv(arg0, arg1, arg2, arg3);
    _post_call_gl_callback(NULL, "glProgramUniform1fv", (GLADapiproc) glProgramUniform1fv, 4, arg0, arg1, arg2, arg3);
    
}
PFNGLPROGRAMUNIFORM1FVPROC glad_debug_glProgramUniform1fv = glad_debug_impl_glProgramUniform1fv;
PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex = NULL;
GLuint GLAD_API_PTR glad_debug_impl_glGetUniformBlockIndex(GLuint arg0, const GLchar * arg1) {
    GLuint ret;
    _pre_call_gl_callback("glGetUniformBlockIndex", (GLADapiproc) glGetUniformBlockIndex, 2, arg0, arg1);
    ret = glGetUniformBlockIndex(arg0, arg1);
    _post_call_gl_callback((void*) &ret, "glGetUniformBlockIndex", (GLADapiproc) glGetUniformBlockIndex, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMBLOCKINDEXPROC glad_debug_glGetUniformBlockIndex = glad_debug_impl_glGetUniformBlockIndex;
PFNGLUNIFORM4FVPROC glad_glUniform4fv = NULL;
void GLAD_API_PTR glad_debug_impl_glUniform4fv(GLint arg0, GLsizei arg1, const GLfloat * arg2) {
    _pre_call_gl_callback("glUniform4fv", (GLADapiproc) glUniform4fv, 3, arg0, arg1, arg2);
    glUniform4fv(arg0, arg1, arg2);
    _post_call_gl_callback(NULL, "glUniform4fv", (GLADapiproc) glUniform4fv, 3, arg0, arg1, arg2);
    
}
PFNGLUNIFORM4FVPROC glad_debug_glUniform4fv = glad_debug_impl_glUniform4fv;
PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform = NULL;
void GLAD_API_PTR glad_debug_impl_glGetActiveUniform(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei * arg3, GLint * arg4, GLenum * arg5, GLchar * arg6) {
    _pre_call_gl_callback("glGetActiveUniform", (GLADapiproc) glGetActiveUniform, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    glGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_gl_callback(NULL, "glGetActiveUniform", (GLADapiproc) glGetActiveUniform, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    
}
PFNGLGETACTIVEUNIFORMPROC glad_debug_glGetActiveUniform = glad_debug_impl_glGetActiveUniform;
PFNGLFRONTFACEPROC glad_glFrontFace = NULL;
void GLAD_API_PTR glad_debug_impl_glFrontFace(GLenum arg0) {
    _pre_call_gl_callback("glFrontFace", (GLADapiproc) glFrontFace, 1, arg0);
    glFrontFace(arg0);
    _post_call_gl_callback(NULL, "glFrontFace", (GLADapiproc) glFrontFace, 1, arg0);
    
}
PFNGLFRONTFACEPROC glad_debug_glFrontFace = glad_debug_impl_glFrontFace;
PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines = NULL;
void GLAD_API_PTR glad_debug_impl_glDeleteProgramPipelines(GLsizei arg0, const GLuint * arg1) {
    _pre_call_gl_callback("glDeleteProgramPipelines", (GLADapiproc) glDeleteProgramPipelines, 2, arg0, arg1);
    glDeleteProgramPipelines(arg0, arg1);
    _post_call_gl_callback(NULL, "glDeleteProgramPipelines", (GLADapiproc) glDeleteProgramPipelines, 2, arg0, arg1);
    
}
PFNGLDELETEPROGRAMPIPELINESPROC glad_debug_glDeleteProgramPipelines = glad_debug_impl_glDeleteProgramPipelines;


static void glad_gl_load_GL_VERSION_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_0) return;
    glFlush = (PFNGLFLUSHPROC) load("glFlush", userptr);
    glTexImage2D = (PFNGLTEXIMAGE2DPROC) load("glTexImage2D", userptr);
    glDisable = (PFNGLDISABLEPROC) load("glDisable", userptr);
    glLogicOp = (PFNGLLOGICOPPROC) load("glLogicOp", userptr);
    glStencilMask = (PFNGLSTENCILMASKPROC) load("glStencilMask", userptr);
    glColorMask = (PFNGLCOLORMASKPROC) load("glColorMask", userptr);
    glGetDoublev = (PFNGLGETDOUBLEVPROC) load("glGetDoublev", userptr);
    glHint = (PFNGLHINTPROC) load("glHint", userptr);
    glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) load("glTexParameterfv", userptr);
    glClearColor = (PFNGLCLEARCOLORPROC) load("glClearColor", userptr);
    glCullFace = (PFNGLCULLFACEPROC) load("glCullFace", userptr);
    glGetString = (PFNGLGETSTRINGPROC) load("glGetString", userptr);
    glEnable = (PFNGLENABLEPROC) load("glEnable", userptr);
    glClear = (PFNGLCLEARPROC) load("glClear", userptr);
    glPointSize = (PFNGLPOINTSIZEPROC) load("glPointSize", userptr);
    glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) load("glGetTexLevelParameteriv", userptr);
    glLineWidth = (PFNGLLINEWIDTHPROC) load("glLineWidth", userptr);
    glFinish = (PFNGLFINISHPROC) load("glFinish", userptr);
    glIsEnabled = (PFNGLISENABLEDPROC) load("glIsEnabled", userptr);
    glStencilOp = (PFNGLSTENCILOPPROC) load("glStencilOp", userptr);
    glReadPixels = (PFNGLREADPIXELSPROC) load("glReadPixels", userptr);
    glDepthRange = (PFNGLDEPTHRANGEPROC) load("glDepthRange", userptr);
    glBlendFunc = (PFNGLBLENDFUNCPROC) load("glBlendFunc", userptr);
    glPolygonMode = (PFNGLPOLYGONMODEPROC) load("glPolygonMode", userptr);
    glViewport = (PFNGLVIEWPORTPROC) load("glViewport", userptr);
    glTexImage1D = (PFNGLTEXIMAGE1DPROC) load("glTexImage1D", userptr);
    glGetError = (PFNGLGETERRORPROC) load("glGetError", userptr);
    glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) load("glTexParameteriv", userptr);
    glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) load("glGetTexParameteriv", userptr);
    glClearStencil = (PFNGLCLEARSTENCILPROC) load("glClearStencil", userptr);
    glDepthMask = (PFNGLDEPTHMASKPROC) load("glDepthMask", userptr);
    glGetFloatv = (PFNGLGETFLOATVPROC) load("glGetFloatv", userptr);
    glGetTexImage = (PFNGLGETTEXIMAGEPROC) load("glGetTexImage", userptr);
    glClearDepth = (PFNGLCLEARDEPTHPROC) load("glClearDepth", userptr);
    glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) load("glGetTexLevelParameterfv", userptr);
    glTexParameterf = (PFNGLTEXPARAMETERFPROC) load("glTexParameterf", userptr);
    glTexParameteri = (PFNGLTEXPARAMETERIPROC) load("glTexParameteri", userptr);
    glFrontFace = (PFNGLFRONTFACEPROC) load("glFrontFace", userptr);
    glReadBuffer = (PFNGLREADBUFFERPROC) load("glReadBuffer", userptr);
    glStencilFunc = (PFNGLSTENCILFUNCPROC) load("glStencilFunc", userptr);
    glDepthFunc = (PFNGLDEPTHFUNCPROC) load("glDepthFunc", userptr);
    glGetIntegerv = (PFNGLGETINTEGERVPROC) load("glGetIntegerv", userptr);
    glScissor = (PFNGLSCISSORPROC) load("glScissor", userptr);
    glGetBooleanv = (PFNGLGETBOOLEANVPROC) load("glGetBooleanv", userptr);
    glPixelStorei = (PFNGLPIXELSTOREIPROC) load("glPixelStorei", userptr);
    glDrawBuffer = (PFNGLDRAWBUFFERPROC) load("glDrawBuffer", userptr);
    glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) load("glGetTexParameterfv", userptr);
    glPixelStoref = (PFNGLPIXELSTOREFPROC) load("glPixelStoref", userptr);
}
static void glad_gl_load_GL_VERSION_1_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_1) return;
    glDeleteTextures = (PFNGLDELETETEXTURESPROC) load("glDeleteTextures", userptr);
    glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) load("glCopyTexSubImage2D", userptr);
    glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) load("glCopyTexImage1D", userptr);
    glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) load("glTexSubImage2D", userptr);
    glGenTextures = (PFNGLGENTEXTURESPROC) load("glGenTextures", userptr);
    glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) load("glCopyTexImage2D", userptr);
    glIsTexture = (PFNGLISTEXTUREPROC) load("glIsTexture", userptr);
    glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) load("glTexSubImage1D", userptr);
    glDrawElements = (PFNGLDRAWELEMENTSPROC) load("glDrawElements", userptr);
    glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) load("glPolygonOffset", userptr);
    glBindTexture = (PFNGLBINDTEXTUREPROC) load("glBindTexture", userptr);
    glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) load("glCopyTexSubImage1D", userptr);
    glDrawArrays = (PFNGLDRAWARRAYSPROC) load("glDrawArrays", userptr);
}
static void glad_gl_load_GL_VERSION_1_2( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_2) return;
    glTexImage3D = (PFNGLTEXIMAGE3DPROC) load("glTexImage3D", userptr);
    glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) load("glCopyTexSubImage3D", userptr);
    glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) load("glDrawRangeElements", userptr);
    glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) load("glTexSubImage3D", userptr);
}
static void glad_gl_load_GL_VERSION_1_3( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_3) return;
    glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC) load("glCompressedTexImage1D", userptr);
    glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) load("glCompressedTexImage2D", userptr);
    glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) load("glSampleCoverage", userptr);
    glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) load("glCompressedTexSubImage3D", userptr);
    glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) load("glCompressedTexImage3D", userptr);
    glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) load("glCompressedTexSubImage2D", userptr);
    glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) load("glCompressedTexSubImage1D", userptr);
    glActiveTexture = (PFNGLACTIVETEXTUREPROC) load("glActiveTexture", userptr);
    glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC) load("glGetCompressedTexImage", userptr);
}
static void glad_gl_load_GL_VERSION_1_4( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_4) return;
    glPointParameteri = (PFNGLPOINTPARAMETERIPROC) load("glPointParameteri", userptr);
    glBlendColor = (PFNGLBLENDCOLORPROC) load("glBlendColor", userptr);
    glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) load("glBlendFuncSeparate", userptr);
    glPointParameterf = (PFNGLPOINTPARAMETERFPROC) load("glPointParameterf", userptr);
    glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) load("glPointParameterfv", userptr);
    glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC) load("glMultiDrawArrays", userptr);
    glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC) load("glMultiDrawElements", userptr);
    glBlendEquation = (PFNGLBLENDEQUATIONPROC) load("glBlendEquation", userptr);
    glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC) load("glPointParameteriv", userptr);
}
static void glad_gl_load_GL_VERSION_1_5( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_5) return;
    glMapBuffer = (PFNGLMAPBUFFERPROC) load("glMapBuffer", userptr);
    glGetQueryiv = (PFNGLGETQUERYIVPROC) load("glGetQueryiv", userptr);
    glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC) load("glGetQueryObjectiv", userptr);
    glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) load("glUnmapBuffer", userptr);
    glBufferData = (PFNGLBUFFERDATAPROC) load("glBufferData", userptr);
    glEndQuery = (PFNGLENDQUERYPROC) load("glEndQuery", userptr);
    glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) load("glGetBufferSubData", userptr);
    glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) load("glGetBufferParameteriv", userptr);
    glGenBuffers = (PFNGLGENBUFFERSPROC) load("glGenBuffers", userptr);
    glBeginQuery = (PFNGLBEGINQUERYPROC) load("glBeginQuery", userptr);
    glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) load("glGetBufferPointerv", userptr);
    glBindBuffer = (PFNGLBINDBUFFERPROC) load("glBindBuffer", userptr);
    glGenQueries = (PFNGLGENQUERIESPROC) load("glGenQueries", userptr);
    glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) load("glDeleteBuffers", userptr);
    glDeleteQueries = (PFNGLDELETEQUERIESPROC) load("glDeleteQueries", userptr);
    glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) load("glGetQueryObjectuiv", userptr);
    glIsBuffer = (PFNGLISBUFFERPROC) load("glIsBuffer", userptr);
    glIsQuery = (PFNGLISQUERYPROC) load("glIsQuery", userptr);
    glBufferSubData = (PFNGLBUFFERSUBDATAPROC) load("glBufferSubData", userptr);
}
static void glad_gl_load_GL_VERSION_2_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_2_0) return;
    glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) load("glVertexAttrib4Niv", userptr);
    glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) load("glStencilMaskSeparate", userptr);
    glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) load("glGetVertexAttribPointerv", userptr);
    glLinkProgram = (PFNGLLINKPROGRAMPROC) load("glLinkProgram", userptr);
    glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) load("glVertexAttrib3sv", userptr);
    glDetachShader = (PFNGLDETACHSHADERPROC) load("glDetachShader", userptr);
    glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) load("glVertexAttrib1sv", userptr);
    glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) load("glVertexAttrib4bv", userptr);
    glUniform2fv = (PFNGLUNIFORM2FVPROC) load("glUniform2fv", userptr);
    glCompileShader = (PFNGLCOMPILESHADERPROC) load("glCompileShader", userptr);
    glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) load("glStencilOpSeparate", userptr);
    glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) load("glStencilFuncSeparate", userptr);
    glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) load("glVertexAttrib4f", userptr);
    glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) load("glVertexAttrib4d", userptr);
    glUniform4iv = (PFNGLUNIFORM4IVPROC) load("glUniform4iv", userptr);
    glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) load("glVertexAttrib4s", userptr);
    glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) load("glVertexAttrib4Nusv", userptr);
    glUniform1f = (PFNGLUNIFORM1FPROC) load("glUniform1f", userptr);
    glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) load("glGetVertexAttribfv", userptr);
    glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) load("glVertexAttrib4Nbv", userptr);
    glCreateShader = (PFNGLCREATESHADERPROC) load("glCreateShader", userptr);
    glUniform1i = (PFNGLUNIFORM1IPROC) load("glUniform1i", userptr);
    glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) load("glGetActiveAttrib", userptr);
    glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) load("glVertexAttrib1d", userptr);
    glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) load("glVertexAttrib1f", userptr);
    glUniform2i = (PFNGLUNIFORM2IPROC) load("glUniform2i", userptr);
    glUniform2f = (PFNGLUNIFORM2FPROC) load("glUniform2f", userptr);
    glGetProgramiv = (PFNGLGETPROGRAMIVPROC) load("glGetProgramiv", userptr);
    glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) load("glVertexAttribPointer", userptr);
    glDrawBuffers = (PFNGLDRAWBUFFERSPROC) load("glDrawBuffers", userptr);
    glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) load("glVertexAttrib1s", userptr);
    glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) load("glGetUniformLocation", userptr);
    glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) load("glVertexAttrib4usv", userptr);
    glUniform4fv = (PFNGLUNIFORM4FVPROC) load("glUniform4fv", userptr);
    glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) load("glVertexAttrib2dv", userptr);
    glDeleteProgram = (PFNGLDELETEPROGRAMPROC) load("glDeleteProgram", userptr);
    glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) load("glVertexAttrib4Nuiv", userptr);
    glAttachShader = (PFNGLATTACHSHADERPROC) load("glAttachShader", userptr);
    glUniform3i = (PFNGLUNIFORM3IPROC) load("glUniform3i", userptr);
    glUniform3f = (PFNGLUNIFORM3FPROC) load("glUniform3f", userptr);
    glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) load("glVertexAttrib4ubv", userptr);
    glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) load("glBindAttribLocation", userptr);
    glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) load("glVertexAttrib1dv", userptr);
    glUniform2iv = (PFNGLUNIFORM2IVPROC) load("glUniform2iv", userptr);
    glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) load("glVertexAttrib1fv", userptr);
    glUniform1iv = (PFNGLUNIFORM1IVPROC) load("glUniform1iv", userptr);
    glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) load("glGetVertexAttribdv", userptr);
    glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) load("glVertexAttrib3f", userptr);
    glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) load("glVertexAttrib4uiv", userptr);
    glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) load("glVertexAttrib3d", userptr);
    glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) load("glDisableVertexAttribArray", userptr);
    glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) load("glVertexAttrib3s", userptr);
    glShaderSource = (PFNGLSHADERSOURCEPROC) load("glShaderSource", userptr);
    glIsProgram = (PFNGLISPROGRAMPROC) load("glIsProgram", userptr);
    glGetUniformiv = (PFNGLGETUNIFORMIVPROC) load("glGetUniformiv", userptr);
    glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) load("glVertexAttrib4fv", userptr);
    glUniform4i = (PFNGLUNIFORM4IPROC) load("glUniform4i", userptr);
    glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) load("glEnableVertexAttribArray", userptr);
    glUniform3fv = (PFNGLUNIFORM3FVPROC) load("glUniform3fv", userptr);
    glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) load("glVertexAttrib2fv", userptr);
    glUniform4f = (PFNGLUNIFORM4FPROC) load("glUniform4f", userptr);
    glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) load("glUniformMatrix2fv", userptr);
    glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) load("glVertexAttrib4Nub", userptr);
    glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) load("glUniformMatrix3fv", userptr);
    glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) load("glGetVertexAttribiv", userptr);
    glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) load("glVertexAttrib3fv", userptr);
    glUniform3iv = (PFNGLUNIFORM3IVPROC) load("glUniform3iv", userptr);
    glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) load("glVertexAttrib4iv", userptr);
    glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) load("glGetAttachedShaders", userptr);
    glIsShader = (PFNGLISSHADERPROC) load("glIsShader", userptr);
    glUseProgram = (PFNGLUSEPROGRAMPROC) load("glUseProgram", userptr);
    glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) load("glVertexAttrib4sv", userptr);
    glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) load("glGetProgramInfoLog", userptr);
    glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) load("glGetShaderInfoLog", userptr);
    glUniform1fv = (PFNGLUNIFORM1FVPROC) load("glUniform1fv", userptr);
    glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) load("glVertexAttrib4Nubv", userptr);
    glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) load("glBlendEquationSeparate", userptr);
    glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) load("glGetAttribLocation", userptr);
    glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) load("glVertexAttrib4dv", userptr);
    glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) load("glVertexAttrib2sv", userptr);
    glDeleteShader = (PFNGLDELETESHADERPROC) load("glDeleteShader", userptr);
    glCreateProgram = (PFNGLCREATEPROGRAMPROC) load("glCreateProgram", userptr);
    glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) load("glVertexAttrib4Nsv", userptr);
    glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) load("glVertexAttrib2d", userptr);
    glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) load("glVertexAttrib2f", userptr);
    glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) load("glVertexAttrib3dv", userptr);
    glGetUniformfv = (PFNGLGETUNIFORMFVPROC) load("glGetUniformfv", userptr);
    glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) load("glVertexAttrib2s", userptr);
    glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) load("glUniformMatrix4fv", userptr);
    glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) load("glGetActiveUniform", userptr);
    glGetShaderiv = (PFNGLGETSHADERIVPROC) load("glGetShaderiv", userptr);
    glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) load("glGetShaderSource", userptr);
    glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) load("glValidateProgram", userptr);
}
static void glad_gl_load_GL_VERSION_2_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_2_1) return;
    glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) load("glUniformMatrix3x2fv", userptr);
    glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) load("glUniformMatrix2x4fv", userptr);
    glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) load("glUniformMatrix4x2fv", userptr);
    glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) load("glUniformMatrix3x4fv", userptr);
    glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) load("glUniformMatrix2x3fv", userptr);
    glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) load("glUniformMatrix4x3fv", userptr);
}
static void glad_gl_load_GL_VERSION_3_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_0) return;
    glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) load("glGenRenderbuffers", userptr);
    glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) load("glVertexAttribI2iv", userptr);
    glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) load("glGetRenderbufferParameteriv", userptr);
    glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) load("glDeleteRenderbuffers", userptr);
    glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) load("glVertexAttribI4ubv", userptr);
    glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) load("glVertexAttribI3ui", userptr);
    glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) load("glVertexAttribI4ui", userptr);
    glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) load("glClearBufferiv", userptr);
    glDisablei = (PFNGLDISABLEIPROC) load("glDisablei", userptr);
    glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) load("glBindVertexArray", userptr);
    glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) load("glFramebufferTexture3D", userptr);
    glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) load("glFramebufferTextureLayer", userptr);
    glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) load("glTexParameterIiv", userptr);
    glUniform4ui = (PFNGLUNIFORM4UIPROC) load("glUniform4ui", userptr);
    glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) load("glBindRenderbuffer", userptr);
    glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) load("glVertexAttribI3uiv", userptr);
    glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load("glBindBufferBase", userptr);
    glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) load("glBindFramebuffer", userptr);
    glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) load("glVertexAttribI2uiv", userptr);
    glUniform1ui = (PFNGLUNIFORM1UIPROC) load("glUniform1ui", userptr);
    glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) load("glEndTransformFeedback", userptr);
    glUniform3ui = (PFNGLUNIFORM3UIPROC) load("glUniform3ui", userptr);
    glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) load("glFlushMappedBufferRange", userptr);
    glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) load("glVertexAttribI2i", userptr);
    glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) load("glDeleteFramebuffers", userptr);
    glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) load("glVertexAttribI4uiv", userptr);
    glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) load("glBeginTransformFeedback", userptr);
    glGetStringi = (PFNGLGETSTRINGIPROC) load("glGetStringi", userptr);
    glUniform2uiv = (PFNGLUNIFORM2UIVPROC) load("glUniform2uiv", userptr);
    glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) load("glVertexAttribI1ui", userptr);
    glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) load("glVertexAttribI1iv", userptr);
    glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) load("glRenderbufferStorage", userptr);
    glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load("glGetIntegeri_v", userptr);
    glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) load("glVertexAttribI4bv", userptr);
    glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) load("glVertexAttribI2ui", userptr);
    glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) load("glGetVertexAttribIuiv", userptr);
    glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) load("glVertexAttribI3iv", userptr);
    glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) load("glGetTransformFeedbackVarying", userptr);
    glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) load("glFramebufferTexture2D", userptr);
    glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) load("glGetFramebufferAttachmentParameteriv", userptr);
    glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) load("glClearBufferfv", userptr);
    glEnablei = (PFNGLENABLEIPROC) load("glEnablei", userptr);
    glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) load("glIsFramebuffer", userptr);
    glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) load("glCheckFramebufferStatus", userptr);
    glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) load("glGetFragDataLocation", userptr);
    glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load("glBindBufferRange", userptr);
    glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) load("glGetTexParameterIiv", userptr);
    glIsVertexArray = (PFNGLISVERTEXARRAYPROC) load("glIsVertexArray", userptr);
    glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) load("glVertexAttribI4iv", userptr);
    glUniform1uiv = (PFNGLUNIFORM1UIVPROC) load("glUniform1uiv", userptr);
    glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) load("glTransformFeedbackVaryings", userptr);
    glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) load("glBlitFramebuffer", userptr);
    glIsEnabledi = (PFNGLISENABLEDIPROC) load("glIsEnabledi", userptr);
    glClampColor = (PFNGLCLAMPCOLORPROC) load("glClampColor", userptr);
    glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) load("glEndConditionalRender", userptr);
    glColorMaski = (PFNGLCOLORMASKIPROC) load("glColorMaski", userptr);
    glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) load("glGetUniformuiv", userptr);
    glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) load("glVertexAttribI3i", userptr);
    glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) load("glBindFragDataLocation", userptr);
    glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) load("glBeginConditionalRender", userptr);
    glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) load("glClearBufferfi", userptr);
    glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) load("glGetVertexAttribIiv", userptr);
    glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) load("glGenVertexArrays", userptr);
    glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) load("glVertexAttribI4sv", userptr);
    glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) load("glVertexAttribI1i", userptr);
    glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) load("glGenFramebuffers", userptr);
    glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) load("glVertexAttribI4usv", userptr);
    glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) load("glFramebufferRenderbuffer", userptr);
    glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) load("glMapBufferRange", userptr);
    glUniform2ui = (PFNGLUNIFORM2UIPROC) load("glUniform2ui", userptr);
    glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) load("glVertexAttribI1uiv", userptr);
    glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) load("glClearBufferuiv", userptr);
    glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) load("glTexParameterIuiv", userptr);
    glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) load("glGetTexParameterIuiv", userptr);
    glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) load("glIsRenderbuffer", userptr);
    glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) load("glGenerateMipmap", userptr);
    glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) load("glFramebufferTexture1D", userptr);
    glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) load("glDeleteVertexArrays", userptr);
    glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) load("glVertexAttribI4i", userptr);
    glUniform3uiv = (PFNGLUNIFORM3UIVPROC) load("glUniform3uiv", userptr);
    glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) load("glRenderbufferStorageMultisample", userptr);
    glUniform4uiv = (PFNGLUNIFORM4UIVPROC) load("glUniform4uiv", userptr);
    glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) load("glGetBooleani_v", userptr);
    glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) load("glVertexAttribIPointer", userptr);
}
static void glad_gl_load_GL_VERSION_3_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_1) return;
    glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) load("glBindBufferBase", userptr);
    glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) load("glGetActiveUniformBlockName", userptr);
    glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) load("glGetActiveUniformsiv", userptr);
    glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) load("glDrawArraysInstanced", userptr);
    glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) load("glBindBufferRange", userptr);
    glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) load("glCopyBufferSubData", userptr);
    glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) load("glGetActiveUniformBlockiv", userptr);
    glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) load("glGetActiveUniformName", userptr);
    glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) load("glUniformBlockBinding", userptr);
    glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) load("glGetUniformIndices", userptr);
    glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) load("glPrimitiveRestartIndex", userptr);
    glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) load("glDrawElementsInstanced", userptr);
    glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) load("glGetIntegeri_v", userptr);
    glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) load("glGetUniformBlockIndex", userptr);
    glTexBuffer = (PFNGLTEXBUFFERPROC) load("glTexBuffer", userptr);
}
static void glad_gl_load_GL_VERSION_3_2( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_2) return;
    glIsSync = (PFNGLISSYNCPROC) load("glIsSync", userptr);
    glGetSynciv = (PFNGLGETSYNCIVPROC) load("glGetSynciv", userptr);
    glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) load("glTexImage2DMultisample", userptr);
    glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) load("glClientWaitSync", userptr);
    glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) load("glMultiDrawElementsBaseVertex", userptr);
    glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) load("glGetInteger64i_v", userptr);
    glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) load("glProvokingVertex", userptr);
    glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) load("glFramebufferTexture", userptr);
    glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) load("glGetBufferParameteri64v", userptr);
    glGetInteger64v = (PFNGLGETINTEGER64VPROC) load("glGetInteger64v", userptr);
    glDeleteSync = (PFNGLDELETESYNCPROC) load("glDeleteSync", userptr);
    glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) load("glDrawElementsInstancedBaseVertex", userptr);
    glFenceSync = (PFNGLFENCESYNCPROC) load("glFenceSync", userptr);
    glWaitSync = (PFNGLWAITSYNCPROC) load("glWaitSync", userptr);
    glSampleMaski = (PFNGLSAMPLEMASKIPROC) load("glSampleMaski", userptr);
    glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) load("glTexImage3DMultisample", userptr);
    glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) load("glDrawElementsBaseVertex", userptr);
    glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) load("glGetMultisamplefv", userptr);
    glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) load("glDrawRangeElementsBaseVertex", userptr);
}
static void glad_gl_load_GL_VERSION_3_3( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_3) return;
    glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) load("glSamplerParameterIuiv", userptr);
    glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) load("glGetSamplerParameterfv", userptr);
    glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) load("glSamplerParameterfv", userptr);
    glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) load("glVertexAttribP1uiv", userptr);
    glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) load("glGetSamplerParameterIuiv", userptr);
    glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) load("glVertexAttribP4uiv", userptr);
    glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) load("glDeleteSamplers", userptr);
    glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) load("glVertexAttribP2uiv", userptr);
    glBindSampler = (PFNGLBINDSAMPLERPROC) load("glBindSampler", userptr);
    glIsSampler = (PFNGLISSAMPLERPROC) load("glIsSampler", userptr);
    glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) load("glVertexAttribDivisor", userptr);
    glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) load("glVertexAttribP2ui", userptr);
    glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) load("glVertexAttribP1ui", userptr);
    glQueryCounter = (PFNGLQUERYCOUNTERPROC) load("glQueryCounter", userptr);
    glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) load("glVertexAttribP3ui", userptr);
    glGenSamplers = (PFNGLGENSAMPLERSPROC) load("glGenSamplers", userptr);
    glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) load("glGetQueryObjectui64v", userptr);
    glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) load("glBindFragDataLocationIndexed", userptr);
    glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) load("glSamplerParameterIiv", userptr);
    glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) load("glGetQueryObjecti64v", userptr);
    glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) load("glSamplerParameteri", userptr);
    glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) load("glVertexAttribP3uiv", userptr);
    glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) load("glSamplerParameterf", userptr);
    glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) load("glGetSamplerParameterIiv", userptr);
    glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) load("glGetFragDataIndex", userptr);
    glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) load("glVertexAttribP4ui", userptr);
    glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) load("glGetSamplerParameteriv", userptr);
    glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) load("glSamplerParameteriv", userptr);
}
static void glad_gl_load_GL_VERSION_4_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_0) return;
    glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) load("glEndQueryIndexed", userptr);
    glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) load("glBeginQueryIndexed", userptr);
    glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) load("glResumeTransformFeedback", userptr);
    glUniform2d = (PFNGLUNIFORM2DPROC) load("glUniform2d", userptr);
    glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) load("glGetQueryIndexediv", userptr);
    glUniform1dv = (PFNGLUNIFORM1DVPROC) load("glUniform1dv", userptr);
    glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC) load("glMinSampleShading", userptr);
    glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) load("glBlendEquationSeparatei", userptr);
    glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) load("glGetSubroutineUniformLocation", userptr);
    glUniform4dv = (PFNGLUNIFORM4DVPROC) load("glUniform4dv", userptr);
    glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) load("glUniformSubroutinesuiv", userptr);
    glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) load("glGetUniformSubroutineuiv", userptr);
    glUniform3dv = (PFNGLUNIFORM3DVPROC) load("glUniform3dv", userptr);
    glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) load("glUniformMatrix3x2dv", userptr);
    glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) load("glUniformMatrix3x4dv", userptr);
    glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) load("glIsTransformFeedback", userptr);
    glBlendEquationi = (PFNGLBLENDEQUATIONIPROC) load("glBlendEquationi", userptr);
    glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) load("glGetActiveSubroutineUniformName", userptr);
    glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) load("glUniformMatrix4x3dv", userptr);
    glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) load("glGetSubroutineIndex", userptr);
    glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) load("glDrawTransformFeedbackStream", userptr);
    glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) load("glGetProgramStageiv", userptr);
    glUniform4d = (PFNGLUNIFORM4DPROC) load("glUniform4d", userptr);
    glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) load("glBindTransformFeedback", userptr);
    glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) load("glDeleteTransformFeedbacks", userptr);
    glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) load("glUniformMatrix2x4dv", userptr);
    glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) load("glDrawElementsIndirect", userptr);
    glGetUniformdv = (PFNGLGETUNIFORMDVPROC) load("glGetUniformdv", userptr);
    glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) load("glPauseTransformFeedback", userptr);
    glUniform3d = (PFNGLUNIFORM3DPROC) load("glUniform3d", userptr);
    glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) load("glUniformMatrix4dv", userptr);
    glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) load("glUniformMatrix2x3dv", userptr);
    glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) load("glUniformMatrix4x2dv", userptr);
    glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) load("glUniformMatrix2dv", userptr);
    glUniform2dv = (PFNGLUNIFORM2DVPROC) load("glUniform2dv", userptr);
    glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) load("glPatchParameterfv", userptr);
    glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) load("glDrawArraysIndirect", userptr);
    glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) load("glGenTransformFeedbacks", userptr);
    glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) load("glGetActiveSubroutineName", userptr);
    glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) load("glGetActiveSubroutineUniformiv", userptr);
    glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) load("glDrawTransformFeedback", userptr);
    glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) load("glBlendFuncSeparatei", userptr);
    glUniform1d = (PFNGLUNIFORM1DPROC) load("glUniform1d", userptr);
    glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) load("glPatchParameteri", userptr);
    glBlendFunci = (PFNGLBLENDFUNCIPROC) load("glBlendFunci", userptr);
    glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) load("glUniformMatrix3dv", userptr);
}
static void glad_gl_load_GL_VERSION_4_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_1) return;
    glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) load("glGenProgramPipelines", userptr);
    glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) load("glProgramUniform3iv", userptr);
    glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) load("glProgramUniform4dv", userptr);
    glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) load("glProgramUniformMatrix4fv", userptr);
    glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) load("glGetDoublei_v", userptr);
    glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) load("glValidateProgramPipeline", userptr);
    glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) load("glProgramParameteri", userptr);
    glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) load("glDepthRangeArrayv", userptr);
    glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) load("glVertexAttribL3dv", userptr);
    glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) load("glViewportIndexedfv", userptr);
    glDepthRangef = (PFNGLDEPTHRANGEFPROC) load("glDepthRangef", userptr);
    glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) load("glVertexAttribL4dv", userptr);
    glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) load("glProgramUniform1dv", userptr);
    glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) load("glProgramUniformMatrix4x3dv", userptr);
    glProgramBinary = (PFNGLPROGRAMBINARYPROC) load("glProgramBinary", userptr);
    glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) load("glProgramUniformMatrix2dv", userptr);
    glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) load("glProgramUniformMatrix3x4fv", userptr);
    glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) load("glProgramUniform4uiv", userptr);
    glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) load("glProgramUniform4fv", userptr);
    glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) load("glProgramUniform2fv", userptr);
    glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) load("glProgramUniform4i", userptr);
    glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) load("glProgramUniform4f", userptr);
    glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) load("glViewportIndexedf", userptr);
    glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) load("glProgramUniform4d", userptr);
    glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) load("glGetProgramPipelineInfoLog", userptr);
    glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) load("glProgramUniformMatrix2x4dv", userptr);
    glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) load("glScissorIndexed", userptr);
    glShaderBinary = (PFNGLSHADERBINARYPROC) load("glShaderBinary", userptr);
    glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) load("glProgramUniform1ui", userptr);
    glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) load("glProgramUniform2uiv", userptr);
    glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) load("glProgramUniformMatrix3x2dv", userptr);
    glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) load("glProgramUniform3f", userptr);
    glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) load("glProgramUniform1uiv", userptr);
    glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) load("glVertexAttribL4d", userptr);
    glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) load("glProgramUniformMatrix4x2fv", userptr);
    glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) load("glVertexAttribL1dv", userptr);
    glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) load("glProgramUniformMatrix2fv", userptr);
    glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) load("glProgramUniformMatrix3fv", userptr);
    glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) load("glProgramUniformMatrix3x4dv", userptr);
    glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) load("glGetShaderPrecisionFormat", userptr);
    glScissorArrayv = (PFNGLSCISSORARRAYVPROC) load("glScissorArrayv", userptr);
    glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) load("glProgramUniformMatrix2x4fv", userptr);
    glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) load("glProgramUniform1iv", userptr);
    glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) load("glProgramUniformMatrix4x3fv", userptr);
    glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) load("glVertexAttribL1d", userptr);
    glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) load("glViewportArrayv", userptr);
    glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) load("glProgramUniform3dv", userptr);
    glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) load("glProgramUniform2dv", userptr);
    glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) load("glProgramUniformMatrix2x3dv", userptr);
    glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) load("glReleaseShaderCompiler", userptr);
    glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) load("glProgramUniform2i", userptr);
    glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) load("glIsProgramPipeline", userptr);
    glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) load("glProgramUniform2d", userptr);
    glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) load("glProgramUniform2f", userptr);
    glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) load("glGetProgramBinary", userptr);
    glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) load("glDepthRangeIndexed", userptr);
    glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) load("glVertexAttribLPointer", userptr);
    glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) load("glVertexAttribL2dv", userptr);
    glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) load("glCreateShaderProgramv", userptr);
    glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) load("glProgramUniformMatrix4dv", userptr);
    glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) load("glVertexAttribL2d", userptr);
    glGetFloati_v = (PFNGLGETFLOATI_VPROC) load("glGetFloati_v", userptr);
    glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) load("glProgramUniform3i", userptr);
    glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) load("glUseProgramStages", userptr);
    glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) load("glProgramUniformMatrix3dv", userptr);
    glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) load("glProgramUniform3uiv", userptr);
    glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) load("glProgramUniform4iv", userptr);
    glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) load("glProgramUniformMatrix3x2fv", userptr);
    glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) load("glProgramUniform3d", userptr);
    glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) load("glProgramUniform2ui", userptr);
    glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) load("glProgramUniform4ui", userptr);
    glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) load("glProgramUniform2iv", userptr);
    glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) load("glGetProgramPipelineiv", userptr);
    glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) load("glProgramUniformMatrix4x2dv", userptr);
    glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) load("glScissorIndexedv", userptr);
    glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) load("glGetVertexAttribLdv", userptr);
    glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) load("glProgramUniformMatrix2x3fv", userptr);
    glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) load("glProgramUniform3fv", userptr);
    glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) load("glProgramUniform3ui", userptr);
    glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) load("glDeleteProgramPipelines", userptr);
    glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) load("glProgramUniform1fv", userptr);
    glClearDepthf = (PFNGLCLEARDEPTHFPROC) load("glClearDepthf", userptr);
    glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) load("glBindProgramPipeline", userptr);
    glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) load("glProgramUniform1i", userptr);
    glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) load("glVertexAttribL3d", userptr);
    glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) load("glProgramUniform1d", userptr);
    glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) load("glActiveShaderProgram", userptr);
    glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) load("glProgramUniform1f", userptr);
}
static void glad_gl_load_GL_ARB_robustness( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GL_ARB_robustness) return;
    glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC) load("glGetnUniformfvARB", userptr);
    glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC) load("glGetnTexImageARB", userptr);
    glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC) load("glReadnPixelsARB", userptr);
    glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) load("glGetnCompressedTexImageARB", userptr);
    glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC) load("glGetGraphicsResetStatusARB", userptr);
    glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC) load("glGetnUniformdvARB", userptr);
    glReadnPixels = (PFNGLREADNPIXELSPROC) load("glReadnPixels", userptr);
    glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC) load("glGetnUniformivARB", userptr);
    glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC) load("glGetnUniformuivARB", userptr);
}



#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
#define GLAD_GL_IS_SOME_NEW_VERSION 1
#else
#define GLAD_GL_IS_SOME_NEW_VERSION 0
#endif

static int glad_gl_get_extensions( int version, const char **out_exts, unsigned int *out_num_exts_i, char ***out_exts_i) {
#if GLAD_GL_IS_SOME_NEW_VERSION
    if(GLAD_VERSION_MAJOR(version) < 3) {
#else
    (void) version;
    (void) out_num_exts_i;
    (void) out_exts_i;
#endif
        if (glGetString == NULL) {
            return 0;
        }
        *out_exts = (const char *)glGetString(GL_EXTENSIONS);
#if GLAD_GL_IS_SOME_NEW_VERSION
    } else {
        unsigned int index = 0;
        unsigned int num_exts_i = 0;
        char **exts_i = NULL;
        if (glGetStringi == NULL || glGetIntegerv == NULL) {
            return 0;
        }
        glGetIntegerv(GL_NUM_EXTENSIONS, (int*) &num_exts_i);
        if (num_exts_i > 0) {
            exts_i = (char **) malloc(num_exts_i * (sizeof *exts_i));
        }
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            const char *gl_str_tmp = (const char*) glGetStringi(GL_EXTENSIONS, index);
            size_t len = strlen(gl_str_tmp) + 1;

            char *local_str = (char*) malloc(len * sizeof(char));
            if(local_str != NULL) {
                memcpy(local_str, gl_str_tmp, len * sizeof(char));
            }

            exts_i[index] = local_str;
        }

        *out_num_exts_i = num_exts_i;
        *out_exts_i = exts_i;
    }
#endif
    return 1;
}
static void glad_gl_free_extensions(char **exts_i, unsigned int num_exts_i) {
    if (exts_i != NULL) {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            free((void *) (exts_i[index]));
        }
        free((void *)exts_i);
        exts_i = NULL;
    }
}
static int glad_gl_has_extension(int version, const char *exts, unsigned int num_exts_i, char **exts_i, const char *ext) {
    if(GLAD_VERSION_MAJOR(version) < 3 || !GLAD_GL_IS_SOME_NEW_VERSION) {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    } else {
        unsigned int index;
        for(index = 0; index < num_exts_i; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    }
    return 0;
}

static GLADapiproc glad_gl_get_proc_from_userptr(const char* name, void *userptr) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int glad_gl_find_extensions_gl( int version) {
    const char *exts = NULL;
    unsigned int num_exts_i = 0;
    char **exts_i = NULL;
    if (!glad_gl_get_extensions(version, &exts, &num_exts_i, &exts_i)) return 0;

    GLAD_GL_3DFX_multisample = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_3DFX_multisample");
    GLAD_GL_ARB_robustness = glad_gl_has_extension(version, exts, num_exts_i, exts_i, "GL_ARB_robustness");

    glad_gl_free_extensions(exts_i, num_exts_i);

    return 1;
}

static int glad_gl_find_core_gl(void) {
    int i, major, minor;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        NULL
    };
    version = (const char*) glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

    GLAD_IMPL_UTIL_SSCANF(version, "%d.%d", &major, &minor);

    GLAD_GL_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    GLAD_GL_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    GLAD_GL_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    GLAD_GL_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    GLAD_GL_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    GLAD_GL_VERSION_1_5 = (major == 1 && minor >= 5) || major > 1;
    GLAD_GL_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    GLAD_GL_VERSION_2_1 = (major == 2 && minor >= 1) || major > 2;
    GLAD_GL_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    GLAD_GL_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    GLAD_GL_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;
    GLAD_GL_VERSION_3_3 = (major == 3 && minor >= 3) || major > 3;
    GLAD_GL_VERSION_4_0 = (major == 4 && minor >= 0) || major > 4;
    GLAD_GL_VERSION_4_1 = (major == 4 && minor >= 1) || major > 4;

    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLUserPtr( GLADuserptrloadfunc load, void *userptr) {
    int version;

    glGetString = (PFNGLGETSTRINGPROC) load("glGetString", userptr);
    if(glGetString == NULL) return 0;
    if(glGetString(GL_VERSION) == NULL) return 0;
    version = glad_gl_find_core_gl();

    glad_gl_load_GL_VERSION_1_0(load, userptr);
    glad_gl_load_GL_VERSION_1_1(load, userptr);
    glad_gl_load_GL_VERSION_1_2(load, userptr);
    glad_gl_load_GL_VERSION_1_3(load, userptr);
    glad_gl_load_GL_VERSION_1_4(load, userptr);
    glad_gl_load_GL_VERSION_1_5(load, userptr);
    glad_gl_load_GL_VERSION_2_0(load, userptr);
    glad_gl_load_GL_VERSION_2_1(load, userptr);
    glad_gl_load_GL_VERSION_3_0(load, userptr);
    glad_gl_load_GL_VERSION_3_1(load, userptr);
    glad_gl_load_GL_VERSION_3_2(load, userptr);
    glad_gl_load_GL_VERSION_3_3(load, userptr);
    glad_gl_load_GL_VERSION_4_0(load, userptr);
    glad_gl_load_GL_VERSION_4_1(load, userptr);

    if (!glad_gl_find_extensions_gl(version)) return 0;
    glad_gl_load_GL_ARB_robustness(load, userptr);



    return version;
}


int gladLoadGL( GLADloadfunc load) {
    return gladLoadGLUserPtr( glad_gl_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}




#ifdef GLAD_GL

#ifndef GLAD_LOADER_LIBRARY_C_
#define GLAD_LOADER_LIBRARY_C_

#include <stddef.h>
#include <stdlib.h>

#if GLAD_PLATFORM_WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif


static void* glad_get_dlopen_handle(const char *lib_names[], int length) {
    void *handle = NULL;
    int i;

    for (i = 0; i < length; ++i) {
#if GLAD_PLATFORM_WIN32
  #if GLAD_PLATFORM_UWP
        size_t buffer_size = (strlen(lib_names[i]) + 1) * sizeof(WCHAR);
        LPWSTR buffer = (LPWSTR) malloc(buffer_size);
        if (buffer != NULL) {
            int ret = MultiByteToWideChar(CP_ACP, 0, lib_names[i], -1, buffer, buffer_size);
            if (ret != 0) {
                handle = (void*) LoadPackagedLibrary(buffer, 0);
            }
            free((void*) buffer);
        }
  #else
        handle = (void*) LoadLibraryA(lib_names[i]);
  #endif
#else
        handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_LOCAL);
#endif
        if (handle != NULL) {
            return handle;
        }
    }

    return NULL;
}

static void glad_close_dlopen_handle(void* handle) {
    if (handle != NULL) {
#if GLAD_PLATFORM_WIN32
        FreeLibrary((HMODULE) handle);
#else
        dlclose(handle);
#endif
    }
}

static GLADapiproc glad_dlsym_handle(void* handle, const char *name) {
    if (handle == NULL) {
        return NULL;
    }

#if GLAD_PLATFORM_WIN32
    return (GLADapiproc) GetProcAddress((HMODULE) handle, name);
#else
    return GLAD_GNUC_EXTENSION (GLADapiproc) dlsym(handle, name);
#endif
}

#endif /* GLAD_LOADER_LIBRARY_C_ */

typedef void* (GLAD_API_PTR *GLADglprocaddrfunc)(const char*);
struct _glad_gl_userptr {
    void *gl_handle;
    GLADglprocaddrfunc gl_get_proc_address_ptr;
};

static GLADapiproc glad_gl_get_proc(const char *name, void *vuserptr) {
    struct _glad_gl_userptr userptr = *(struct _glad_gl_userptr*) vuserptr;
    GLADapiproc result = NULL;

#ifndef __APPLE__
    if(userptr.gl_get_proc_address_ptr != NULL) {
        result = GLAD_GNUC_EXTENSION (GLADapiproc) userptr.gl_get_proc_address_ptr(name);
    }
#endif
    if(result == NULL) {
        result = glad_dlsym_handle(userptr.gl_handle, name);
    }

    return result;
}

int gladLoaderLoadGL(void) {
#ifdef __APPLE__
    static const char *NAMES[] = {
        "../Frameworks/OpenGL.framework/OpenGL",
        "/Library/Frameworks/OpenGL.framework/OpenGL",
        "/System/Library/Frameworks/OpenGL.framework/OpenGL",
        "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"
    };
#elif GLAD_PLATFORM_WIN32
    static const char *NAMES[] = {"opengl32.dll"};
#else
    static const char *NAMES[] = {
#if defined __CYGWIN__
        "libGL-1.so",
#endif
        "libGL.so.1",
        "libGL.so"
    };
#endif

    int version = 0;
    void *handle;
    struct _glad_gl_userptr userptr;

    handle = glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
    if (handle) {
        userptr.gl_handle = handle;
#ifdef __APPLE__
        userptr.gl_get_proc_address_ptr = NULL;
#elif GLAD_PLATFORM_WIN32
        userptr.gl_get_proc_address_ptr =
            (GLADglprocaddrfunc) glad_dlsym_handle(handle, "wglGetProcAddress");
#else
        userptr.gl_get_proc_address_ptr =
            (GLADglprocaddrfunc) glad_dlsym_handle(handle, "glXGetProcAddressARB");
#endif
        version = gladLoadGLUserPtr(glad_gl_get_proc, &userptr);

        glad_close_dlopen_handle(handle);
    }

    return version;
}


#endif /* GLAD_GL */

#endif /* GLAD_GL_IMPLEMENTATION */

